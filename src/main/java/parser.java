
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return SymbolTable.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\002\000\002\003\004\000\002\004\010" +
    "\000\002\004\006\000\002\004\007\000\002\004\005\000" +
    "\002\006\004\000\002\007\004\000\002\007\002\000\002" +
    "\010\005\000\002\011\004\000\002\011\002\000\002\014" +
    "\003\000\002\014\005\000\002\013\005\000\002\015\005" +
    "\000\002\012\003\000\002\012\004\000\002\012\004\000" +
    "\002\005\004\000\002\021\003\000\002\021\005\000\002" +
    "\023\003\000\002\023\004\000\002\024\006\000\002\024" +
    "\010\000\002\025\007\000\002\025\005\000\002\026\005" +
    "\000\002\026\006\000\002\026\005\000\002\026\004\000" +
    "\002\027\003\000\002\027\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\004\000\002\022\004\000\002\022" +
    "\004\000\002\035\006\000\002\035\005\000\002\030\002" +
    "\000\002\030\004\000\002\033\003\000\002\033\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\036\004\000\002\036\005\000\002" +
    "\037\003\000\002\037\005\000\002\020\003\000\002\020" +
    "\003\000\002\020\004\000\002\020\004\000\002\040\003" +
    "\000\002\040\005\000\002\040\006\000\002\041\004\000" +
    "\002\041\005\000\002\034\005\000\002\034\004\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\005\000\002\034\004\000\002\034\006\000" +
    "\002\042\005\000\002\042\006\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\004\000\002\017" +
    "\003\000\002\017\005\000\002\031\003\000\002\031\002" +
    "" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\006\055\005\056\006\001\002\000\004\002" +
    "\236\001\002\000\006\002\ufffe\004\233\001\002\000\012" +
    "\002\ufff6\004\ufff6\020\011\053\ufff6\001\002\000\010\002" +
    "\ufff3\004\025\053\017\001\002\000\012\002\ufff6\004\ufff6" +
    "\020\011\053\ufff6\001\002\000\004\004\013\001\002\000" +
    "\004\002\uffff\001\002\000\014\002\uffa1\004\uffa1\020\uffa1" +
    "\052\014\053\uffa1\001\002\000\024\002\uffa2\004\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\047\uffa2\053\uffa2" +
    "\001\002\000\012\002\ufff5\004\ufff5\020\ufff5\053\ufff5\001" +
    "\002\000\010\002\ufff7\004\ufff7\053\ufff7\001\002\000\006" +
    "\037\uffa7\051\uffa7\001\002\000\016\002\uffa1\004\uffa1\037" +
    "\uffa8\051\uffa8\052\014\053\uffa1\001\002\000\010\002\uffee" +
    "\004\uffee\053\uffee\001\002\000\004\046\155\001\002\000" +
    "\004\002\ufff8\001\002\000\010\002\ufff3\004\025\053\017" +
    "\001\002\000\014\037\uffa6\042\037\044\135\050\040\051" +
    "\uffa6\001\002\000\004\037\133\001\002\000\006\037\uffa4" +
    "\051\032\001\002\000\012\002\uffa1\004\uffa1\052\014\053" +
    "\uffa1\001\002\000\010\002\uffec\004\uffec\053\uffec\001\002" +
    "\000\006\004\034\053\017\001\002\000\006\037\uffa8\051" +
    "\uffa8\001\002\000\012\037\uffa6\042\037\050\040\051\uffa6" +
    "\001\002\000\004\037\uffa3\001\002\000\006\037\uffa5\051" +
    "\uffa5\001\002\000\026\004\064\005\063\006\047\007\053" +
    "\010\051\011\062\021\050\023\056\030\057\046\060\001" +
    "\002\000\006\012\043\013\041\001\002\000\036\002\uffbf" +
    "\004\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\037\uffbf\042" +
    "\044\045\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\001\002\000\032\002\ufff0\004\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\037\ufff0\045\ufff0\047\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\001\002\000\036\002\uffbe\004\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\037\uffbe\042\044\045\uffbe\046\uffbe" +
    "\047\uffbe\051\uffbe\052\uffbe\053\uffbe\001\002\000\030\004" +
    "\064\005\063\006\047\007\053\010\051\011\062\021\050" +
    "\023\056\030\057\043\052\046\060\001\002\000\034\002" +
    "\uffbb\004\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\037\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\001" +
    "\002\000\034\002\uffbc\004\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\037\uffbc\045\uffbc\046\uffbc\047\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\001\002\000\070\002\uffb0\004\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\040\uffb0\041\uffb0\043\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\051\uffb0\052\uffb0\053\uffb0\001\002\000\004" +
    "\044\124\001\002\000\070\002\uffae\004\uffae\014\uffae\015" +
    "\uffae\016\uffae\017\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\040\uffae\041\uffae\043\uffae\045\uffae\046\uffae" +
    "\047\uffae\051\uffae\052\uffae\053\uffae\001\002\000\036\002" +
    "\uffb8\004\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\037\uffb8" +
    "\042\122\045\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\001\002\000\070\002\uffb1\004\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\040\uffb1\041\uffb1\043\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\001\002\000\026\004\064" +
    "\005\063\006\047\007\053\010\051\011\062\021\050\023" +
    "\056\030\057\046\060\001\002\000\070\002\uffb3\004\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\043\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002" +
    "\000\026\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\021\uffd3\023\uffd3\030\uffd3\046\uffd3\001\002\000\026" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\021" +
    "\uffd2\023\uffd2\030\uffd2\046\uffd2\001\002\000\026\004\064" +
    "\005\063\006\047\007\053\010\051\011\062\021\050\023" +
    "\056\030\057\046\060\001\002\000\040\022\111\023\103" +
    "\024\074\025\077\026\102\027\076\031\075\032\107\033" +
    "\101\034\104\035\106\036\073\040\105\041\100\043\115" +
    "\001\002\000\070\002\uffaf\004\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\040\uffaf\041\uffaf\043\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\001\002\000\070\002\uffb2\004" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\041\uffb2\043\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\001" +
    "\002\000\074\002\uffb4\004\uffb4\014\uffb4\015\uffb4\016\uffb4" +
    "\017\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\040\uffb4\041\uffb4\042\037\043\uffb4\044\065\045\uffb4\046" +
    "\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\001\002\000\030" +
    "\004\064\005\063\006\047\007\053\010\051\011\062\021" +
    "\050\023\056\030\057\045\071\046\060\001\002\000\070" +
    "\002\uffac\004\uffac\014\uffac\015\uffac\016\uffac\017\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\031\uffac" +
    "\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\040\uffac\041" +
    "\uffac\043\uffac\045\uffac\046\uffac\047\uffac\051\uffac\052\uffac" +
    "\053\uffac\001\002\000\004\045\114\001\002\000\064\002" +
    "\uffc1\004\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\022\111" +
    "\023\103\024\074\025\077\026\102\027\076\031\075\032" +
    "\107\033\101\034\104\035\106\036\073\040\105\041\100" +
    "\045\uffc1\047\uffc1\051\072\052\uffc1\053\uffc1\001\002\000" +
    "\070\002\uffd6\004\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\040\uffd6" +
    "\041\uffd6\043\uffd6\045\uffd6\046\uffd6\047\uffd6\051\uffd6\052" +
    "\uffd6\053\uffd6\001\002\000\026\004\064\005\063\006\047" +
    "\007\053\010\051\011\062\021\050\023\056\030\057\046" +
    "\060\001\002\000\026\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\021\uffc4\023\uffc4\030\uffc4\046\uffc4\001" +
    "\002\000\026\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\021\uffcf\023\uffcf\030\uffcf\046\uffcf\001\002\000" +
    "\026\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\021\uffcb\023\uffcb\030\uffcb\046\uffcb\001\002\000\026\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\021\uffcc" +
    "\023\uffcc\030\uffcc\046\uffcc\001\002\000\026\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\021\uffce\023\uffce" +
    "\030\uffce\046\uffce\001\002\000\026\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\021\uffc6\023\uffc6\030\uffc6" +
    "\046\uffc6\001\002\000\026\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\021\uffc9\023\uffc9\030\uffc9\046\uffc9" +
    "\001\002\000\026\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\021\uffcd\023\uffcd\030\uffcd\046\uffcd\001\002" +
    "\000\026\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\021\uffd0\023\uffd0\030\uffd0\046\uffd0\001\002\000\026" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\021" +
    "\uffc8\023\uffc8\030\uffc8\046\uffc8\001\002\000\026\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\021\uffc7\023" +
    "\uffc7\030\uffc7\046\uffc7\001\002\000\026\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\021\uffc5\023\uffc5\030" +
    "\uffc5\046\uffc5\001\002\000\026\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\021\uffca\023\uffca\030\uffca\046" +
    "\uffca\001\002\000\026\004\064\005\063\006\047\007\053" +
    "\010\051\011\062\021\050\023\056\030\057\046\060\001" +
    "\002\000\026\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\021\uffd1\023\uffd1\030\uffd1\046\uffd1\001\002\000" +
    "\070\002\uffb6\004\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\022\111\023\103\024\074\025\077\026\102\027\076\031" +
    "\075\032\107\033\101\034\104\035\106\036\073\040\105" +
    "\041\100\043\uffb6\045\uffb6\046\uffb6\047\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\001\002\000\026\002\uffc0\004\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\045\uffc0\047\uffc0\052\uffc0\053" +
    "\uffc0\001\002\000\070\002\uffd7\004\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\040\uffd7\041\uffd7\043\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\001\002\000\036\002\uffba" +
    "\004\uffba\014\uffba\015\uffba\016\uffba\017\uffba\037\uffba\042" +
    "\044\045\uffba\046\uffba\047\uffba\051\uffba\052\uffba\053\uffba" +
    "\001\002\000\034\002\uffb9\004\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\037\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\001\002\000\004\047\120\001\002\000" +
    "\070\002\uffad\004\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\040\uffad" +
    "\041\uffad\043\uffad\045\uffad\046\uffad\047\uffad\051\uffad\052" +
    "\uffad\053\uffad\001\002\000\070\002\uffb5\004\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\022\111\023\103\024\074\025" +
    "\077\026\102\027\076\031\075\032\107\033\101\034\104" +
    "\035\106\036\073\040\105\041\100\043\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5\001\002\000\004" +
    "\043\052\001\002\000\034\002\uffb7\004\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\037\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\001\002\000\026\004\064\005" +
    "\063\006\047\007\053\010\051\011\062\021\050\023\056" +
    "\030\057\046\060\001\002\000\040\022\111\023\103\024" +
    "\074\025\077\026\102\027\076\031\075\032\107\033\101" +
    "\034\104\035\106\036\073\040\105\041\100\045\126\001" +
    "\002\000\070\002\uffab\004\uffab\014\uffab\015\uffab\016\uffab" +
    "\017\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027" +
    "\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\040\uffab\041\uffab\043\uffab\045\uffab\046\uffab\047\uffab\051" +
    "\uffab\052\uffab\053\uffab\001\002\000\034\002\uffbd\004\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\017\uffbd\037\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\001\002\000\040" +
    "\022\111\023\103\024\074\025\077\026\102\027\076\031" +
    "\075\032\107\033\101\034\104\035\106\036\073\040\105" +
    "\041\100\043\131\001\002\000\074\002\uffaa\004\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\031\uffaa\032\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\037" +
    "\043\uffaa\045\uffaa\046\uffaa\047\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\001\002\000\072\002\uffa9\004\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\043\uffa9\045\uffa9\046" +
    "\uffa9\047\uffa9\051\uffa9\052\uffa9\053\uffa9\001\002\000\026" +
    "\004\064\005\063\006\047\007\053\010\051\011\062\021" +
    "\050\023\056\030\057\046\060\001\002\000\024\002\uffef" +
    "\004\uffef\014\uffef\015\uffef\016\uffef\017\uffef\047\uffef\052" +
    "\uffef\053\uffef\001\002\000\006\004\141\045\140\001\002" +
    "\000\006\045\ufff2\051\ufff2\001\002\000\006\045\150\051" +
    "\147\001\002\000\012\002\ufff9\004\ufff9\046\ufff9\050\142" +
    "\001\002\000\004\050\040\001\002\000\006\012\043\013" +
    "\041\001\002\000\010\002\ufffa\004\ufffa\046\ufffa\001\002" +
    "\000\012\002\uffea\004\uffea\046\uffea\051\145\001\002\000" +
    "\006\012\043\013\041\001\002\000\010\002\uffe9\004\uffe9" +
    "\046\uffe9\001\002\000\004\004\141\001\002\000\012\002" +
    "\ufffb\004\ufffb\046\ufffb\050\151\001\002\000\006\012\043" +
    "\013\041\001\002\000\010\002\ufffc\004\ufffc\046\ufffc\001" +
    "\002\000\006\045\ufff1\051\ufff1\001\002\000\004\002\ufff4" +
    "\001\002\000\016\004\166\014\167\016\165\017\162\047" +
    "\163\053\017\001\002\000\010\002\uffeb\004\uffeb\053\uffeb" +
    "\001\002\000\026\004\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\037\uffa8\047\uffa1\051\uffa8\052\014\053\uffa1\001\002" +
    "\000\022\004\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\047" +
    "\uffa1\052\014\053\uffa1\001\002\000\020\004\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\047\uffdb\053\uffdb\001\002\000" +
    "\032\004\064\005\063\006\047\007\053\010\051\011\062" +
    "\021\050\023\056\030\057\046\060\047\uffa1\052\014\001" +
    "\002\000\022\002\uffdf\004\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\047\uffdf\053\uffdf\001\002\000\016\004\166\014" +
    "\167\016\165\017\uffe8\047\uffe8\053\017\001\002\000\030" +
    "\004\064\005\063\006\047\007\053\010\051\011\062\021" +
    "\050\023\056\030\057\044\215\046\060\001\002\000\014" +
    "\037\uffa6\042\037\044\065\050\040\051\uffa6\001\002\000" +
    "\030\004\064\005\063\006\047\007\053\010\051\011\062" +
    "\021\050\023\056\030\057\044\201\046\060\001\002\000" +
    "\020\004\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\047\uffdc" +
    "\053\uffdc\001\002\000\004\047\200\001\002\000\006\017" +
    "\162\047\175\001\002\000\022\004\uffa1\014\uffa1\015\uffa1" +
    "\016\uffa1\017\uffa1\047\uffa1\052\014\053\uffa1\001\002\000" +
    "\020\004\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\047\uffd9" +
    "\053\uffd9\001\002\000\022\002\uffe2\004\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\047\uffe2\053\uffe2\001\002\000\004" +
    "\047\177\001\002\000\022\002\uffe1\004\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\047\uffe1\053\uffe1\001\002\000\022" +
    "\002\uffe0\004\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\047" +
    "\uffe0\053\uffe0\001\002\000\026\004\064\005\063\006\047" +
    "\007\053\010\051\011\062\021\050\023\056\030\057\046" +
    "\060\001\002\000\050\004\166\014\167\016\165\022\111" +
    "\023\103\024\074\025\077\026\102\027\076\031\075\032" +
    "\107\033\101\034\104\035\106\036\073\040\105\041\100" +
    "\046\155\053\017\001\002\000\020\004\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\047\uffdd\053\uffdd\001\002\000\020" +
    "\004\uffde\014\uffde\015\uffde\016\uffde\017\uffde\047\uffde\053" +
    "\uffde\001\002\000\020\004\uffd5\014\uffd5\015\206\016\uffd5" +
    "\017\uffd5\047\uffd5\053\uffd5\001\002\000\014\004\166\014" +
    "\167\016\165\046\155\053\017\001\002\000\020\004\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\047\uffe6\053\uffe6\001" +
    "\002\000\020\004\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\047\uffd4\053\uffd4\001\002\000\040\022\111\023\103\024" +
    "\074\025\077\026\102\027\076\031\075\032\107\033\101" +
    "\034\104\035\106\036\073\040\105\041\100\045\212\001" +
    "\002\000\014\004\166\014\167\016\165\046\155\053\017" +
    "\001\002\000\020\004\uffd5\014\uffd5\015\206\016\uffd5\017" +
    "\uffd5\047\uffd5\053\uffd5\001\002\000\020\004\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\047\uffe5\053\uffe5\001\002\000" +
    "\026\004\064\005\063\006\047\007\053\010\051\011\062" +
    "\021\050\023\056\030\057\046\060\001\002\000\050\004" +
    "\166\014\167\016\165\022\111\023\103\024\074\025\077" +
    "\026\102\027\076\031\075\032\107\033\101\034\104\035" +
    "\106\036\073\040\105\041\100\046\155\053\017\001\002" +
    "\000\020\004\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\047" +
    "\uffe3\053\uffe3\001\002\000\040\022\111\023\103\024\074" +
    "\025\077\026\102\027\076\031\075\032\107\033\101\034" +
    "\104\035\106\036\073\040\105\041\100\045\221\001\002" +
    "\000\014\004\166\014\167\016\165\046\155\053\017\001" +
    "\002\000\020\004\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\047\uffe4\053\uffe4\001\002\000\006\017\uffe7\047\uffe7\001" +
    "\002\000\006\047\uffa1\052\014\001\002\000\004\047\uffc3" +
    "\001\002\000\004\047\uffc2\001\002\000\020\004\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\047\uffd8\053\uffd8\001\002" +
    "\000\020\004\uffda\014\uffda\015\uffda\016\uffda\017\uffda\047" +
    "\uffda\053\uffda\001\002\000\010\002\uffed\004\uffed\053\uffed" +
    "\001\002\000\006\002\ufffe\004\233\001\002\000\004\044" +
    "\135\001\002\000\004\002\000\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\233\004\231\001\001\000\010\006\011\007\006" +
    "\010\007\001\001\000\022\004\021\005\020\011\022\012" +
    "\023\013\017\015\027\016\026\017\025\001\001\000\006" +
    "\007\015\010\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\230\001\001\000\002\001\001\000\004\026\155\001\001" +
    "\000\002\001\001\000\022\004\021\005\020\011\153\012" +
    "\023\013\017\015\027\016\026\017\025\001\001\000\004" +
    "\042\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\030\001\001\000\002\001\001\000\010\013\032" +
    "\016\026\017\034\001\001\000\002\001\001\000\004\042" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\053\034\127\035\054\001\001\000\004\020\041\001" +
    "\001\000\006\040\126\041\044\001\001\000\002\001\001" +
    "\000\006\040\045\041\044\001\001\000\010\033\053\034" +
    "\060\035\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\122\001\001\000\002\001\001\000\010\033\053" +
    "\034\120\035\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\033\053\034\067\035\054" +
    "\037\116\001\001\000\004\032\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\065\001\001\000\012" +
    "\033\053\034\067\035\054\037\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\107\001\001\000\002" +
    "\001\001\000\012\033\053\034\067\035\054\037\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\053\034\111\035\054\001\001\000\002" +
    "\001\001\000\004\032\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\115\041\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\053\034\124\035\054\001\001\000\004\032\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\107" +
    "\001\001\000\004\042\131\001\001\000\002\001\001\000" +
    "\012\033\053\034\067\035\054\037\133\001\001\000\002" +
    "\001\001\000\006\013\135\014\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\143\021\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\143\021\145\001\001\000\002" +
    "\001\001\000\006\013\135\014\152\001\001\000\002\001" +
    "\001\000\006\020\143\021\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\013\156\015" +
    "\172\016\026\017\025\022\163\023\171\024\167\025\160" +
    "\035\157\036\170\001\001\000\002\001\001\000\004\031" +
    "\227\001\001\000\004\031\226\001\001\000\002\001\001" +
    "\000\014\031\224\033\053\034\067\035\054\037\223\001" +
    "\001\000\002\001\001\000\024\013\156\015\172\016\026" +
    "\017\025\022\163\023\222\024\167\025\160\035\157\001" +
    "\001\000\010\033\053\034\215\035\054\001\001\000\004" +
    "\042\035\001\001\000\010\033\053\034\201\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\175" +
    "\001\001\000\004\031\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\053\034\210\035\054\001\001\000" +
    "\030\013\156\015\172\016\026\017\025\022\203\024\167" +
    "\025\160\026\202\027\204\032\107\035\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\206\001\001" +
    "\000\026\013\156\015\172\016\026\017\025\022\203\024" +
    "\167\025\160\026\202\027\207\035\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\107\001\001\000" +
    "\026\013\156\015\172\016\026\017\025\022\203\024\167" +
    "\025\160\026\202\027\212\035\157\001\001\000\004\030" +
    "\213\001\001\000\002\001\001\000\010\033\053\034\217" +
    "\035\054\001\001\000\030\013\156\015\172\016\026\017" +
    "\025\022\203\024\167\025\160\026\202\027\216\032\107" +
    "\035\157\001\001\000\002\001\001\000\004\032\107\001" +
    "\001\000\026\013\156\015\172\016\026\017\025\022\203" +
    "\024\167\025\160\026\202\027\221\035\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\234\004\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 96. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= file EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // file ::= INTERFACE interface 
            {
                Object RESULT = null;
                 System.out.println("got here"); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // file ::= PROGRAM program 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // interface ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // interface ::= abs_meth interface 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // abs_meth ::= IDENTIFIER OPEN_PAREN decls CLOSE_PAREN COLON typelst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",2, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // abs_meth ::= IDENTIFIER OPEN_PAREN decls CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",2, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // abs_meth ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN COLON typelst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",2, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // abs_meth ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // program ::= imports defns 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // imports ::= use imports 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // imports ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",5, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // use ::= USE IDENTIFIER semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("use",6, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // defns ::= definition defns 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("defns",7, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // defns ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("defns",7, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // decls ::= decl 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // decls ::= decls COMMA decls 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // decl ::= IDENTIFIER COLON type 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // assign ::= targets EQUALS vallst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // definition ::= method 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // definition ::= decl semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // definition ::= assign semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // method ::= abs_meth fnblock 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // typelst ::= type 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // typelst ::= type COMMA typelst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // statementlst ::= statement 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlst",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // statementlst ::= statement statementlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlst",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // if ::= IF expr block elseopt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",18, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // if ::= IF OPEN_PAREN expr CLOSE_PAREN block elseopt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",18, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // while ::= WHILE OPEN_PAREN expr CLOSE_PAREN block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // while ::= WHILE expr block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // fnblock ::= OPEN_BRACE statementlst CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // fnblock ::= OPEN_BRACE statementlst return CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",20, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // fnblock ::= OPEN_BRACE return CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // fnblock ::= OPEN_BRACE CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",20, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // block ::= statement 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // block ::= fnblock 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // statement ::= if 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // statement ::= while 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // statement ::= decl semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // statement ::= assign semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // statement ::= fncall semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // fncall ::= IDENTIFIER OPEN_PAREN vallst CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",27, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // fncall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // elseopt ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseopt",22, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // elseopt ::= ELSE block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseopt",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // unop ::= MINUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // unop ::= NOT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // binop ::= PLUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // binop ::= MINUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // binop ::= TIMES 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // binop ::= HIGHTIMES 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // binop ::= DIVIDE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // binop ::= MODULO 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // binop ::= LT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // binop ::= LEQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // binop ::= GT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // binop ::= GEQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // binop ::= EQB 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // binop ::= NEQB 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // binop ::= AND 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // binop ::= OR 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // return ::= RETURN semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // return ::= RETURN vallst semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // vallst ::= expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("vallst",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // vallst ::= expr COMMA vallst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("vallst",29, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // type ::= BOOL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // type ::= INT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // type ::= BOOL bracketlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // type ::= INT bracketlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // bracketlst ::= nullbrackets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bracketlst",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // bracketlst ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bracketlst",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // bracketlst ::= OPEN_BRACKET expr CLOSE_BRACKET bracketlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bracketlst",30, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // nullbrackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("nullbrackets",31, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // nullbrackets ::= OPEN_BRACKET CLOSE_BRACKET nullbrackets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("nullbrackets",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // expr ::= expr binop expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // expr ::= unop expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // expr ::= IDENTIFIER 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // expr ::= fncall 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // expr ::= STRING_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // expr ::= INTEGER_LITERAL 
            {
                Object RESULT = null;
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Object l = CUP$parser$stack.peek().<Object> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // expr ::= CHARACTER_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // expr ::= FALSE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // expr ::= TRUE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // expr ::= OPEN_BRACE vallst CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // expr ::= IDENTIFIER idxlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // idxlst ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("idxlst",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // idxlst ::= OPEN_BRACKET expr CLOSE_BRACKET idxlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("idxlst",32, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // target ::= decl 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // target ::= UNDERSCORE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // target ::= IDENTIFIER 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // target ::= IDENTIFIER idxlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",12, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // targets ::= target 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("targets",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // targets ::= target COMMA targets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("targets",13, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // semi ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // semi ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",23, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
