
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.internal.markers.*;
import java.util.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return SymbolTable.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\005\004\000\002\005\002\000\002\006\005\000" +
    "\002\007\004\000\002\007\002\000\002\010\003\000\002" +
    "\010\004\000\002\015\003\000\002\015\005\000\002\014" +
    "\003\000\002\014\005\000\002\013\005\000\002\011\010" +
    "\000\002\011\006\000\002\011\007\000\002\011\005\000" +
    "\002\046\005\000\002\027\003\000\002\027\005\000\002" +
    "\032\003\000\002\032\004\000\002\033\003\000\002\033" +
    "\003\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\023\006\000\002\023\010\000\002\024\007\000" +
    "\002\024\005\000\002\031\003\000\002\031\003\000\002" +
    "\030\005\000\002\030\006\000\002\030\005\000\002\035" +
    "\006\000\002\035\005\000\002\034\002\000\002\034\004" +
    "\000\002\050\003\000\002\050\002\000\002\025\004\000" +
    "\002\025\005\000\002\041\003\000\002\041\003\000\002" +
    "\041\005\000\002\041\005\000\002\047\005\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\045\003" +
    "\000\002\045\005\000\002\037\005\000\002\042\003\000" +
    "\002\042\005\000\002\043\006\000\002\043\006\000\002" +
    "\012\004\000\002\016\003\000\002\016\005\000\002\026" +
    "\005\000\002\026\004\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\005\000" +
    "\002\026\003\000\002\026\006\000\002\040\003\000\002" +
    "\040\005\000\002\053\006\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\022\003\000" +
    "\002\022\004\000\002\036\006\000\002\036\005\000\002" +
    "\052\003\000\002\055\002\000\002\052\004\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\017\003\000\002\017\003\000\002\020\003" +
    "\000\002\020\005" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\006\055\005\056\006\001\002\000\004\002" +
    "\272\001\002\000\006\002\ufffd\004\267\001\002\000\010" +
    "\002\ufffa\004\ufffa\040\011\001\002\000\006\002\ufff7\004" +
    "\026\001\002\000\010\002\ufffa\004\ufffa\040\011\001\002" +
    "\000\004\004\013\001\002\000\004\002\uffff\001\002\000" +
    "\012\002\uffd3\004\uffd3\040\uffd3\052\014\001\002\000\030" +
    "\002\uffd4\004\uffd4\012\uffd4\013\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\047\uffd4\053\uffd4\001\002\000\010" +
    "\002\ufff9\004\ufff9\040\ufff9\001\002\000\006\002\ufffb\004" +
    "\ufffb\001\002\000\012\002\ufff4\004\ufff4\031\262\052\ufff4" +
    "\001\002\000\004\046\064\001\002\000\006\002\ufff6\004" +
    "\ufff6\001\002\000\010\002\uffd3\004\uffd3\052\014\001\002" +
    "\000\014\002\ufff2\004\ufff2\031\ufff2\051\060\052\ufff2\001" +
    "\002\000\004\002\ufffc\001\002\000\006\002\ufff7\004\026" +
    "\001\002\000\006\044\027\050\030\001\002\000\006\004" +
    "\042\045\041\001\002\000\006\012\034\013\031\001\002" +
    "\000\042\002\uff96\004\uff96\012\uff96\013\uff96\031\uff96\034" +
    "\uff96\035\uff96\036\uff96\037\uff96\042\uff96\045\uff96\046\uff96" +
    "\047\uff96\051\uff96\052\uff96\053\uff96\001\002\000\016\002" +
    "\ufff0\004\ufff0\031\ufff0\042\035\051\ufff0\052\ufff0\001\002" +
    "\000\042\002\uff94\004\uff94\012\uff94\013\uff94\031\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\042\uff94\045\uff94\046\uff94" +
    "\047\uff94\051\uff94\052\uff94\053\uff94\001\002\000\042\002" +
    "\uff95\004\uff95\012\uff95\013\uff95\031\uff95\034\uff95\035\uff95" +
    "\036\uff95\037\uff95\042\uff95\045\uff95\046\uff95\047\uff95\051" +
    "\uff95\052\uff95\053\uff95\001\002\000\004\043\036\001\002" +
    "\000\042\002\uff93\004\uff93\012\uff93\013\uff93\031\uff93\034" +
    "\uff93\035\uff93\036\uff93\037\uff93\042\uff93\045\uff93\046\uff93" +
    "\047\uff93\051\uff93\052\uff93\053\uff93\001\002\000\004\045" +
    "\054\001\002\000\006\045\uffea\051\052\001\002\000\012" +
    "\002\uffec\004\uffec\046\uffec\050\045\001\002\000\004\050" +
    "\043\001\002\000\006\012\034\013\031\001\002\000\010" +
    "\042\035\045\uffeb\051\uffeb\001\002\000\006\012\034\013" +
    "\031\001\002\000\010\002\uffed\004\uffed\046\uffed\001\002" +
    "\000\014\002\uffc0\004\uffc0\042\035\046\uffc0\051\050\001" +
    "\002\000\006\012\034\013\031\001\002\000\010\002\uffbf" +
    "\004\uffbf\046\uffbf\001\002\000\004\004\042\001\002\000" +
    "\004\045\uffe9\001\002\000\012\002\uffee\004\uffee\046\uffee" +
    "\050\055\001\002\000\006\012\034\013\031\001\002\000" +
    "\010\002\uffef\004\uffef\046\uffef\001\002\000\004\002\ufff8" +
    "\001\002\000\004\004\062\001\002\000\012\002\ufff1\004" +
    "\ufff1\031\ufff1\052\ufff1\001\002\000\004\050\030\001\002" +
    "\000\006\002\ufff5\004\ufff5\001\002\000\020\004\104\012" +
    "\034\013\031\034\106\036\103\037\074\053\066\001\002" +
    "\000\006\002\uffc1\004\uffc1\001\002\000\006\031\uffc9\051" +
    "\uffc9\001\002\000\026\004\uffd3\012\uffd3\013\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\047\uffd3\052\014\053\uffd3\001" +
    "\002\000\004\042\256\001\002\000\024\004\uffe5\012\uffe5" +
    "\013\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\047\uffe5\053" +
    "\uffe5\001\002\000\006\031\uffc8\051\252\001\002\000\004" +
    "\031\250\001\002\000\032\004\132\005\131\006\115\007" +
    "\120\010\117\011\130\015\122\022\uffa6\041\116\046\123" +
    "\047\uffd3\052\014\001\002\000\032\004\uffcf\012\uffcf\013" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\042\242\047\uffcf" +
    "\051\241\052\uffcf\053\uffcf\001\002\000\026\004\uffd3\012" +
    "\uffd3\013\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\047\uffd3" +
    "\052\014\053\uffd3\001\002\000\026\004\uffd3\012\uffd3\013" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\047\uffd3\052\014" +
    "\053\uffd3\001\002\000\006\037\074\047\234\001\002\000" +
    "\004\042\uffb2\001\002\000\022\004\104\012\034\013\031" +
    "\034\106\036\103\037\uffe8\047\uffe8\053\066\001\002\000" +
    "\030\004\132\005\131\006\115\007\120\010\117\011\130" +
    "\015\122\022\uffa6\041\116\044\225\046\123\001\002\000" +
    "\010\042\uffb1\044\221\050\203\001\002\000\010\031\uffcb" +
    "\042\uffb0\051\uffcb\001\002\000\030\004\132\005\131\006" +
    "\115\007\120\010\117\011\130\015\122\022\uffa6\041\116" +
    "\044\205\046\123\001\002\000\032\004\uffd0\012\uffd0\013" +
    "\uffd0\031\uffca\034\uffd0\035\uffd0\036\uffd0\037\uffd0\047\uffd0" +
    "\051\177\052\uffd0\053\uffd0\001\002\000\024\004\uffe6\012" +
    "\uffe6\013\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\047\uffe6" +
    "\053\uffe6\001\002\000\032\004\uffc5\012\uffc5\013\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\042\174\047\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\001\002\000\004\047\173\001\002\000" +
    "\004\042\114\001\002\000\026\004\132\005\131\006\115" +
    "\007\120\010\117\011\130\015\122\022\uffa6\041\116\046" +
    "\123\001\002\000\104\002\uffae\004\uffae\006\uffae\007\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\032\uffae\033\uffae\034\uffae\035" +
    "\uffae\036\uffae\037\uffae\043\uffae\045\uffae\046\uffae\047\uffae" +
    "\051\uffae\052\uffae\053\uffae\001\002\000\004\044\170\001" +
    "\002\000\104\002\uffac\004\uffac\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\023\uffac\024\uffac\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\043\uffac\045\uffac\046\uffac\047\uffac\051\uffac" +
    "\052\uffac\053\uffac\001\002\000\104\002\uffaf\004\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\043\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\051\uffaf\052\uffaf\053\uffaf\001\002\000\026" +
    "\004\132\005\131\006\115\007\120\010\117\011\130\015" +
    "\122\022\uffa6\041\116\046\123\001\002\000\026\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\015\uffa7\022" +
    "\uffa7\041\uffa7\046\uffa7\001\002\000\026\004\132\005\131" +
    "\006\115\007\120\010\117\011\130\015\122\022\uffa6\041" +
    "\116\046\123\001\002\000\004\022\164\001\002\000\074" +
    "\004\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\042\uffb2\043\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\001\002\000\072\004\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\043\uffb9\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\001\002\000\040\014\157\015\151\016\142\017\145" +
    "\020\150\021\143\023\144\024\155\025\147\026\152\027" +
    "\153\030\141\032\154\033\146\043\163\001\002\000\104" +
    "\002\uffad\004\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad" +
    "\043\uffad\045\uffad\046\uffad\047\uffad\051\uffad\052\uffad\053" +
    "\uffad\001\002\000\072\004\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\043\uffba\045\uffba\046" +
    "\uffba\047\uffba\051\uffba\052\uffba\053\uffba\001\002\000\076" +
    "\004\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\042\uffb1\043\uffbc\044\134\045\uffbc\046\uffbc" +
    "\047\uffbc\051\uffbc\052\uffbc\053\uffbc\001\002\000\074\004" +
    "\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\042\uffb0\043\uffb7\045\uffb7\046\uffb7\047\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\001\002\000\030\004\132\005\131" +
    "\006\115\007\120\010\117\011\130\015\122\022\uffa6\041" +
    "\116\045\137\046\123\001\002\000\004\045\162\001\002" +
    "\000\066\004\uffb5\012\uffb5\013\uffb5\014\157\015\151\016" +
    "\142\017\145\020\150\021\143\023\144\024\155\025\147" +
    "\026\152\027\153\030\141\032\154\033\146\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\045\uffb5\047\uffb5\051\140\052\uffb5" +
    "\053\uffb5\001\002\000\074\004\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\042\uffa8\043\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8\001" +
    "\002\000\026\004\132\005\131\006\115\007\120\010\117" +
    "\011\130\015\122\022\uffa6\041\116\046\123\001\002\000" +
    "\026\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97" +
    "\015\uff97\022\uff97\041\uff97\046\uff97\001\002\000\026\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\015\uffa2" +
    "\022\uffa2\041\uffa2\046\uffa2\001\002\000\026\004\uff9f\005" +
    "\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\015\uff9f\022\uff9f" +
    "\041\uff9f\046\uff9f\001\002\000\026\004\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\011\uff9e\015\uff9e\022\uff9e\041\uff9e" +
    "\046\uff9e\001\002\000\026\004\uffa1\005\uffa1\006\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\015\uffa1\022\uffa1\041\uffa1\046\uffa1" +
    "\001\002\000\026\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\015\uff99\022\uff99\041\uff99\046\uff99\001\002" +
    "\000\026\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011" +
    "\uff9c\015\uff9c\022\uff9c\041\uff9c\046\uff9c\001\002\000\026" +
    "\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\015" +
    "\uffa0\022\uffa0\041\uffa0\046\uffa0\001\002\000\026\004\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\015\uffa3\022" +
    "\uffa3\041\uffa3\046\uffa3\001\002\000\026\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\015\uff9b\022\uff9b\041" +
    "\uff9b\046\uff9b\001\002\000\026\004\uff98\005\uff98\006\uff98" +
    "\007\uff98\010\uff98\011\uff98\015\uff98\022\uff98\041\uff98\046" +
    "\uff98\001\002\000\026\004\uff9a\005\uff9a\006\uff9a\007\uff9a" +
    "\010\uff9a\011\uff9a\015\uff9a\022\uff9a\041\uff9a\046\uff9a\001" +
    "\002\000\026\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\015\uff9d\022\uff9d\041\uff9d\046\uff9d\001\002\000" +
    "\026\004\132\005\131\006\115\007\120\010\117\011\130" +
    "\015\122\022\uffa6\041\116\046\123\001\002\000\026\004" +
    "\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\015\uffa4" +
    "\022\uffa4\041\uffa4\046\uffa4\001\002\000\072\004\uffbe\012" +
    "\uffbe\013\uffbe\014\157\015\151\016\142\017\145\020\150" +
    "\021\143\023\144\024\155\025\147\026\152\027\153\030" +
    "\141\032\154\033\146\034\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\043\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\001\002\000\030\004\uffb4\012\uffb4\013\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\045\uffb4\047\uffb4\052\uffb4\053" +
    "\uffb4\001\002\000\074\004\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\042\uffa9\043\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\051\uffa9\052\uffa9\053\uffa9\001\002" +
    "\000\032\004\uffc3\012\uffc3\013\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\042\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\001\002\000\026\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\015\uffa5\022\uffa5\041\uffa5\046\uffa5\001\002" +
    "\000\004\047\166\001\002\000\072\004\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\043\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8\001" +
    "\002\000\072\004\uffbd\012\uffbd\013\uffbd\014\157\015\151" +
    "\016\142\017\145\020\150\021\143\023\144\024\155\025" +
    "\147\026\152\027\153\030\141\032\154\033\146\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\043\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\001\002\000\026\004\132" +
    "\005\131\006\115\007\120\010\117\011\130\015\122\022" +
    "\uffa6\041\116\046\123\001\002\000\040\014\157\015\151" +
    "\016\142\017\145\020\150\021\143\023\144\024\155\025" +
    "\147\026\152\027\153\030\141\032\154\033\146\045\172" +
    "\001\002\000\072\004\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\043\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000\026\002" +
    "\uffd9\004\uffd9\012\uffd9\013\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\047\uffd9\053\uffd9\001\002\000\026\004\132\005" +
    "\131\006\115\007\120\010\117\011\130\015\122\022\uffa6" +
    "\041\116\046\123\001\002\000\040\014\157\015\151\016" +
    "\142\017\145\020\150\021\143\023\144\024\155\025\147" +
    "\026\152\027\153\030\141\032\154\033\146\043\176\001" +
    "\002\000\032\004\uffc2\012\uffc2\013\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\042\uffc2\047\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\001\002\000\010\004\201\012\034\013\031\001\002" +
    "\000\026\004\uffce\012\uffce\013\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\047\uffce\052\uffce\053\uffce\001\002\000\004" +
    "\050\203\001\002\000\030\004\uffd0\012\uffd0\013\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\047\uffd0\051\177\052\uffd0" +
    "\053\uffd0\001\002\000\006\012\034\013\031\001\002\000" +
    "\034\004\uffcc\012\uffcc\013\uffcc\031\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\042\035\047\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\001\002\000\026\004\132\005\131\006\115\007\120" +
    "\010\117\011\130\015\122\022\uffa6\041\116\046\123\001" +
    "\002\000\054\004\104\012\034\013\031\014\157\015\151" +
    "\016\142\017\145\020\150\021\143\023\144\024\155\025" +
    "\147\026\152\027\153\030\141\032\154\033\146\034\106" +
    "\036\103\046\064\053\066\001\002\000\024\004\uffdd\012" +
    "\uffdd\013\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\047\uffdd" +
    "\053\uffdd\001\002\000\024\004\uffd6\012\uffd6\013\uffd6\034" +
    "\uffd6\035\212\036\uffd6\037\uffd6\047\uffd6\053\uffd6\001\002" +
    "\000\024\004\uffdc\012\uffdc\013\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\047\uffdc\053\uffdc\001\002\000\020\004\104" +
    "\012\034\013\031\034\106\036\103\046\064\053\066\001" +
    "\002\000\024\004\uffe1\012\uffe1\013\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\047\uffe1\053\uffe1\001\002\000\024\004" +
    "\uffd5\012\uffd5\013\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\047\uffd5\053\uffd5\001\002\000\040\014\157\015\151\016" +
    "\142\017\145\020\150\021\143\023\144\024\155\025\147" +
    "\026\152\027\153\030\141\032\154\033\146\045\216\001" +
    "\002\000\020\004\104\012\034\013\031\034\106\036\103" +
    "\046\064\053\066\001\002\000\024\004\uffd6\012\uffd6\013" +
    "\uffd6\034\uffd6\035\212\036\uffd6\037\uffd6\047\uffd6\053\uffd6" +
    "\001\002\000\024\004\uffe0\012\uffe0\013\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\047\uffe0\053\uffe0\001\002\000\030" +
    "\004\132\005\131\006\115\007\120\010\117\011\130\015" +
    "\122\022\uffa6\041\116\045\223\046\123\001\002\000\004" +
    "\045\224\001\002\000\030\004\uffd7\012\uffd7\013\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\042\uffa8\047\uffd7\052\uffd7" +
    "\053\uffd7\001\002\000\030\004\uffd8\012\uffd8\013\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\042\uffa9\047\uffd8\052\uffd8" +
    "\053\uffd8\001\002\000\026\004\132\005\131\006\115\007" +
    "\120\010\117\011\130\015\122\022\uffa6\041\116\046\123" +
    "\001\002\000\054\004\104\012\034\013\031\014\157\015" +
    "\151\016\142\017\145\020\150\021\143\023\144\024\155" +
    "\025\147\026\152\027\153\030\141\032\154\033\146\034" +
    "\106\036\103\046\064\053\066\001\002\000\024\004\uffde" +
    "\012\uffde\013\uffde\034\uffde\035\uffde\036\uffde\037\uffde\047" +
    "\uffde\053\uffde\001\002\000\040\014\157\015\151\016\142" +
    "\017\145\020\150\021\143\023\144\024\155\025\147\026" +
    "\152\027\153\030\141\032\154\033\146\045\231\001\002" +
    "\000\020\004\104\012\034\013\031\034\106\036\103\046" +
    "\064\053\066\001\002\000\024\004\uffdf\012\uffdf\013\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\047\uffdf\053\uffdf\001" +
    "\002\000\006\037\uffe7\047\uffe7\001\002\000\026\002\uffdb" +
    "\004\uffdb\012\uffdb\013\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\047\uffdb\053\uffdb\001\002\000\004\047\236\001\002" +
    "\000\026\002\uffda\004\uffda\012\uffda\013\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\047\uffda\053\uffda\001\002\000\024" +
    "\004\uffe2\012\uffe2\013\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\047\uffe2\053\uffe2\001\002\000\024\004\uffe4\012\uffe4" +
    "\013\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\047\uffe4\053" +
    "\uffe4\001\002\000\010\004\201\012\034\013\031\001\002" +
    "\000\004\043\243\001\002\000\032\004\uffc4\012\uffc4\013" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\042\uffc4\047\uffc4" +
    "\051\uffc4\052\uffc4\053\uffc4\001\002\000\026\004\uffcd\012" +
    "\uffcd\013\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\047\uffcd" +
    "\052\uffcd\053\uffcd\001\002\000\006\047\uffd3\052\014\001" +
    "\002\000\004\047\uffd2\001\002\000\004\047\uffd1\001\002" +
    "\000\026\004\132\005\131\006\115\007\120\010\117\011" +
    "\130\015\122\022\uffa6\041\116\046\123\001\002\000\026" +
    "\004\uffc6\012\uffc6\013\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\047\uffc6\052\uffc6\053\uffc6\001\002\000\006\004\254" +
    "\053\066\001\002\000\004\031\uffc7\001\002\000\010\042" +
    "\uffb1\044\134\050\203\001\002\000\006\031\uffca\051\uffca" +
    "\001\002\000\026\004\132\005\131\006\115\007\120\010" +
    "\117\011\130\015\122\022\uffa6\041\116\046\123\001\002" +
    "\000\040\014\157\015\151\016\142\017\145\020\150\021" +
    "\143\023\144\024\155\025\147\026\152\027\153\030\141" +
    "\032\154\033\146\043\260\001\002\000\076\004\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\042\uffb3\043\uffb3\045\uffb3\046\uffb3\047\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\001\002\000\024\004\uffe3\012\uffe3" +
    "\013\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\047\uffe3\053" +
    "\uffe3\001\002\000\012\006\115\007\120\010\117\011\130" +
    "\001\002\000\010\002\ufff3\004\ufff3\052\ufff3\001\002\000" +
    "\020\002\uffab\004\uffab\006\115\007\120\010\117\011\130" +
    "\052\uffab\001\002\000\010\002\uffaa\004\uffaa\052\uffaa\001" +
    "\002\000\006\002\ufffd\004\267\001\002\000\004\044\027" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\267\011\265\001\001\000\010\004\011\005\006" +
    "\006\007\001\001\000\020\007\023\010\024\011\017\012" +
    "\020\013\022\014\016\015\021\001\001\000\006\005\015" +
    "\006\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\064\001" +
    "\001\000\002\001\001\000\004\050\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\056\010\024\011" +
    "\017\012\020\013\022\014\016\015\021\001\001\000\002" +
    "\001\001\000\006\027\036\046\037\001\001\000\006\017" +
    "\032\020\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\032\020\043\001" +
    "\001\000\002\001\001\000\010\016\045\017\032\020\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\050\017\032\020\046\001\001\000\002\001\001\000\006" +
    "\027\052\046\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\055\017\032\020\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\022\014\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\017\112\023\107\024\070\025\111\032\077\033" +
    "\101\035\076\036\100\037\075\041\066\042\074\043\110" +
    "\044\071\045\072\047\106\053\104\054\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\021\125\026\135\036\124\040\244" +
    "\050\245\052\120\053\132\054\067\055\123\001\001\000" +
    "\002\001\001\000\004\050\237\001\001\000\004\050\236" +
    "\001\001\000\004\025\234\001\001\000\002\001\001\000" +
    "\042\017\112\023\107\024\070\032\232\033\101\035\076" +
    "\036\100\037\075\041\066\042\074\043\110\044\071\045" +
    "\072\047\106\053\104\054\067\001\001\000\020\021\125" +
    "\026\225\036\124\052\120\053\132\054\067\055\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\021\125" +
    "\026\205\036\124\052\120\053\132\054\067\055\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\021\125\026" +
    "\126\036\124\052\120\053\132\054\067\055\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\125\026\166\036\124\052\120" +
    "\053\132\054\067\055\123\001\001\000\002\001\001\000" +
    "\022\021\125\026\135\036\124\040\164\052\120\053\132" +
    "\054\067\055\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\125\026\135\036\124\040\134\052\120" +
    "\053\132\054\067\055\123\001\001\000\002\001\001\000" +
    "\004\051\155\001\001\000\002\001\001\000\022\021\125" +
    "\026\135\036\124\040\160\052\120\053\132\054\067\055" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\125\026\157\036\124\052\120" +
    "\053\132\054\067\055\123\001\001\000\002\001\001\000" +
    "\004\051\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\155\001\001\000\020\021\125" +
    "\026\170\036\124\052\120\053\132\054\067\055\123\001" +
    "\001\000\004\051\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\021\125\026\174\036\124\052\120\053" +
    "\132\054\067\055\123\001\001\000\004\051\155\001\001" +
    "\000\002\001\001\000\014\017\112\041\177\042\074\043" +
    "\110\047\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\032\020\203\001\001\000" +
    "\002\001\001\000\020\021\125\026\214\036\124\052\120" +
    "\053\132\054\067\055\123\001\001\000\046\017\112\023" +
    "\107\024\070\030\210\031\207\033\206\035\076\036\100" +
    "\037\075\041\066\042\074\043\110\044\071\045\072\047" +
    "\106\051\155\053\104\054\067\001\001\000\002\001\001" +
    "\000\004\034\212\001\001\000\002\001\001\000\044\017" +
    "\112\023\107\024\070\030\210\031\213\033\206\035\076" +
    "\036\100\037\075\041\066\042\074\043\110\044\071\045" +
    "\072\047\106\053\104\054\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\155\001\001\000\044\017" +
    "\112\023\107\024\070\030\210\031\216\033\206\035\076" +
    "\036\100\037\075\041\066\042\074\043\110\044\071\045" +
    "\072\047\106\053\104\054\067\001\001\000\004\034\217" +
    "\001\001\000\002\001\001\000\022\021\125\026\135\036" +
    "\124\040\221\052\120\053\132\054\067\055\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\021\125\026\227\036\124\052\120\053\132\054\067" +
    "\055\123\001\001\000\046\017\112\023\107\024\070\030" +
    "\210\031\226\033\206\035\076\036\100\037\075\041\066" +
    "\042\074\043\110\044\071\045\072\047\106\051\155\053" +
    "\104\054\067\001\001\000\002\001\001\000\004\051\155" +
    "\001\001\000\044\017\112\023\107\024\070\030\210\031" +
    "\231\033\206\035\076\036\100\037\075\041\066\042\074" +
    "\043\110\044\071\045\072\047\106\053\104\054\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\112\041\243\042\074\043\110" +
    "\047\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\021\125\026\135\036\124\040" +
    "\250\052\120\053\132\054\067\055\123\001\001\000\002" +
    "\001\001\000\016\036\100\044\071\045\252\047\254\053" +
    "\104\054\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\021\125\026\256\036\124\052" +
    "\120\053\132\054\067\055\123\001\001\000\004\051\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\263\022\262\001\001\000\002\001\001\000\006\021\263" +
    "\022\264\001\001\000\002\001\001\000\006\003\270\011" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 110. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= file EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Eta start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Eta> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // file ::= INTERFACE interface 
            {
                Eta RESULT = null;
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                Interface It = CUP$parser$stack.peek().<Interface> value();
                 RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // file ::= PROGRAM program 
            {
                Eta RESULT = null;
                int Pleft = CUP$parser$stack.peek().left;
                int Pright = CUP$parser$stack.peek().right;
                Program P = CUP$parser$stack.peek().<Program> value();
                 RESULT = P;  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // interface ::= methodHeader interface 
            {
                Interface RESULT = null;
                int amleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int amright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Method am = CUP$parser$stack.elementAt(CUP$parser$top-1).<Method> value();
                int itleft = CUP$parser$stack.peek().left;
                int itright = CUP$parser$stack.peek().right;
                Interface it = CUP$parser$stack.peek().<Interface> value();
                 ArrayList<Method> ml = it.getMethodHeaders(); ml.add(0, am); RESULT = new Interface(ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // interface ::= 
            {
                Interface RESULT = null;
                 RESULT = new Interface(new ArrayList<Method>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // program ::= imports allDefinitions 
            {
                Program RESULT = null;
                int Isleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Isright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Use> Is = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Use>> value();
                int Dsleft = CUP$parser$stack.peek().left;
                int Dsright = CUP$parser$stack.peek().right;
                ArrayList<Definition> Ds = CUP$parser$stack.peek().<ArrayList<Definition>> value();
                 RESULT = new Program(Is, Ds); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // imports ::= use imports 
            {
                ArrayList<Use> RESULT = null;
                int uleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int uright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Use u = CUP$parser$stack.elementAt(CUP$parser$top-1).<Use> value();
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                ArrayList<Use> It = CUP$parser$stack.peek().<ArrayList<Use>> value();
                 It.add(0, u); RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // imports ::= 
            {
                ArrayList<Use> RESULT = null;
                 RESULT = new ArrayList<Use>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",3, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // use ::= USE IDENTIFIER semi 
            {
                Use RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                 RESULT = new Use(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // allDefinitions ::= definition allDefinitions 
            {
                ArrayList<Definition> RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Definition> d = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Definition>> value();
                int Dtleft = CUP$parser$stack.peek().left;
                int Dtright = CUP$parser$stack.peek().right;
                ArrayList<Definition> Dt = CUP$parser$stack.peek().<ArrayList<Definition>> value();
                 Dt.addAll(d); RESULT = Dt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("allDefinitions",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // allDefinitions ::= 
            {
                ArrayList<Definition> RESULT = null;
                 RESULT = new ArrayList<Definition>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("allDefinitions",5, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // definition ::= method 
            {
                ArrayList<Definition> RESULT = null;
                int mleft = CUP$parser$stack.peek().left;
                int mright = CUP$parser$stack.peek().right;
                Method m = CUP$parser$stack.peek().<Method> value();
                 RESULT = ParseUtil.singleton(m); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // definition ::= globalMultiDeclaration semi 
            {
                ArrayList<Definition> RESULT = null;
                int dcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Definition dc = CUP$parser$stack.elementAt(CUP$parser$top-1).<Definition> value();
                 RESULT = ParseUtil.singleton(dc); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // globalMultiDeclaration ::= globalDecls 
            {
                Definition RESULT = null;
                int gDleft = CUP$parser$stack.peek().left;
                int gDright = CUP$parser$stack.peek().right;
                ArrayList<GlobalDecl> gD = CUP$parser$stack.peek().<ArrayList<GlobalDecl>> value();
                 RESULT = new GlobalDeclarationBuilder(gD, null); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalMultiDeclaration",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // globalMultiDeclaration ::= globalDecls EQUALS primLitLst 
            {
                Definition RESULT = null;
                int gDleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int gDright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<GlobalDecl> gD = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<GlobalDecl>> value();
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                ArrayList<Literal> pl = CUP$parser$stack.peek().<ArrayList<Literal>> value();
                 RESULT = new GlobalDeclarationBuilder(gD, pl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalMultiDeclaration",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // globalDecls ::= globalDecl 
            {
                ArrayList<GlobalDecl> RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                GlobalDecl d = CUP$parser$stack.peek().<GlobalDecl> value();
                 RESULT = ParseUtil.singleton(d); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecls",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // globalDecls ::= globalDecl COMMA globalDecls 
            {
                ArrayList<GlobalDecl> RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                GlobalDecl d = CUP$parser$stack.elementAt(CUP$parser$top-2).<GlobalDecl> value();
                int Dsleft = CUP$parser$stack.peek().left;
                int Dsright = CUP$parser$stack.peek().right;
                ArrayList<GlobalDecl> Ds = CUP$parser$stack.peek().<ArrayList<GlobalDecl>> value();
                 Ds.add(0, d); RESULT = Ds; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecls",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // globalDecl ::= IDENTIFIER COLON type 
            {
                GlobalDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new GlobalDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // methodHeader ::= IDENTIFIER OPEN_PAREN methodArgs CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-5).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<GlobalDecl> Ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<GlobalDecl>> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                ArrayList<Type> Ts = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 RESULT = new Method(id, Ds, Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // methodHeader ::= IDENTIFIER OPEN_PAREN methodArgs CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<GlobalDecl> Ds = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<GlobalDecl>> value();
                 RESULT = new Method(id, Ds, new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // methodHeader ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                ArrayList<Type> Ts = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 RESULT = new Method(id, new ArrayList<GlobalDecl>(), Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // methodHeader ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Method(id, new ArrayList<GlobalDecl>(), new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // methodArg ::= IDENTIFIER COLON type 
            {
                GlobalDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                RESULT = new GlobalDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArg",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // methodArgs ::= methodArg 
            {
                ArrayList<GlobalDecl> RESULT = null;
                int maleft = CUP$parser$stack.peek().left;
                int maright = CUP$parser$stack.peek().right;
                GlobalDecl ma = CUP$parser$stack.peek().<GlobalDecl> value();
                RESULT = ParseUtil.singleton(ma); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArgs",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // methodArgs ::= methodArg COMMA methodArgs 
            {
                ArrayList<GlobalDecl> RESULT = null;
                int maleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int maright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                GlobalDecl ma = CUP$parser$stack.elementAt(CUP$parser$top-2).<GlobalDecl> value();
                int malleft = CUP$parser$stack.peek().left;
                int malright = CUP$parser$stack.peek().right;
                ArrayList<GlobalDecl> mal = CUP$parser$stack.peek().<ArrayList<GlobalDecl>> value();
                mal.add(0, ma); RESULT = mal;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArgs",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // statementList ::= statement 
            {
                ArrayList<Statement> RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                RESULT = ParseUtil.singleton(s);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // statementList ::= statement statementList 
            {
                ArrayList<Statement> RESULT = null;
                int sleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement s = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                ArrayList<Statement> sl = CUP$parser$stack.peek().<ArrayList<Statement>> value();
                sl.add(0, s); RESULT = sl;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",24, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // statement ::= if 
            {
                Statement RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Statement.If i = CUP$parser$stack.peek().<Statement.If> value();
                 RESULT = i; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // statement ::= while 
            {
                Statement RESULT = null;
                int wleft = CUP$parser$stack.peek().left;
                int wright = CUP$parser$stack.peek().right;
                Statement.While w = CUP$parser$stack.peek().<Statement.While> value();
                 RESULT = w; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // statement ::= multiAssign semi 
            {
                Statement RESULT = null;
                int aleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                MultiAssignBuilder a = CUP$parser$stack.elementAt(CUP$parser$top-1).<MultiAssignBuilder> value();
                 RESULT = a; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // statement ::= multiDeclOrArrayInit semi 
            {
                Statement RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Statement.DeclareInit> d = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Statement.DeclareInit>> value();
                 RESULT = new Statement.DeclareInits(d); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // statement ::= procedureCall semi 
            {
                Statement RESULT = null;
                int fnleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fnright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement.Procedure fn = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement.Procedure> value();
                 RESULT = fn; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",25, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // if ::= IF expr block elseOptional 
            {
                Statement.If RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement.Block b = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement.Block> value();
                int elsleft = CUP$parser$stack.peek().left;
                int elsright = CUP$parser$stack.peek().right;
                Statement.Block els = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = new Statement.If(e, b, els); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // if ::= IF OPEN_PAREN expr CLOSE_PAREN block elseOptional 
            {
                Statement.If RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expr> value();
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement.Block b = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement.Block> value();
                int elsleft = CUP$parser$stack.peek().left;
                int elsright = CUP$parser$stack.peek().right;
                Statement.Block els = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = new Statement.If(e, b, els); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // while ::= WHILE OPEN_PAREN expr CLOSE_PAREN block 
            {
                Statement.While RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement.Block b = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = new Statement.While(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",18, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // while ::= WHILE expr block 
            {
                Statement.While RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement.Block b = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = new Statement.While(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // block ::= statement 
            {
                Statement.Block RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                 RESULT = new Statement.Block(ParseUtil.singleton(s)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // block ::= returnableBlock 
            {
                Statement.Block RESULT = null;
                int rbleft = CUP$parser$stack.peek().left;
                int rbright = CUP$parser$stack.peek().right;
                Statement.Block rb = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = rb; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // returnableBlock ::= OPEN_BRACE statementList CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Statement>> value();
                 RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // returnableBlock ::= OPEN_BRACE statementList return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Statement>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                 sLst.add(r); RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",22, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // returnableBlock ::= OPEN_BRACE return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                 RESULT = new Statement.Block(ParseUtil.singleton(r)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // procedureCall ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Statement.Procedure RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int vlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> vl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Statement.Procedure(id, vl);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCall",27, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // procedureCall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Statement.Procedure RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Statement.Procedure(id, new ArrayList<Expr>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCall",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // elseOptional ::= 
            {
                Statement.Block RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseOptional",26, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // elseOptional ::= ELSE block 
            {
                Statement.Block RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement.Block b = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = new Statement.Block(ParseUtil.singleton(b)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseOptional",26, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // semi ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // semi ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",38, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // return ::= RETURN semi 
            {
                Statement RESULT = null;
                 RESULT = new Statement.Return(new ArrayList<Expr>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",19, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // return ::= RETURN exprList semi 
            {
                Statement RESULT = null;
                int exprLstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int exprLstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> exprLst = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Statement.Return(exprLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // multiDeclOrArrayInit ::= varDecl 
            {
                ArrayList<Statement.DeclareInit> RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                RESULT = ParseUtil.singleton(new Statement.DeclareInit.Declare(vd));
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multiDeclOrArrayInit",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // multiDeclOrArrayInit ::= arrayinit 
            {
                ArrayList<Statement.DeclareInit> RESULT = null;
                int aileft = CUP$parser$stack.peek().left;
                int airight = CUP$parser$stack.peek().right;
                ArrayInit ai = CUP$parser$stack.peek().<ArrayInit> value();
                RESULT = ParseUtil.singleton(new Statement.DeclareInit.Init(ai));
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multiDeclOrArrayInit",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // multiDeclOrArrayInit ::= varDecl COMMA multiDeclOrArrayInit 
            {
                ArrayList<Statement.DeclareInit> RESULT = null;
                int vdleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int vdright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                VarDecl vd = CUP$parser$stack.elementAt(CUP$parser$top-2).<VarDecl> value();
                int mdaileft = CUP$parser$stack.peek().left;
                int mdairight = CUP$parser$stack.peek().right;
                ArrayList<Statement.DeclareInit> mdai = CUP$parser$stack.peek().<ArrayList<Statement.DeclareInit>> value();
                Statement.DeclareInit di = new Statement.DeclareInit.Declare(vd); mdai.add(0, di); RESULT = mdai; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multiDeclOrArrayInit",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // multiDeclOrArrayInit ::= arrayinit COMMA multiDeclOrArrayInit 
            {
                ArrayList<Statement.DeclareInit> RESULT = null;
                int aileft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int airight = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayInit ai = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayInit> value();
                int mdaileft = CUP$parser$stack.peek().left;
                int mdairight = CUP$parser$stack.peek().right;
                ArrayList<Statement.DeclareInit> mdai = CUP$parser$stack.peek().<ArrayList<Statement.DeclareInit>> value();
                Statement.DeclareInit di = new Statement.DeclareInit.Init(ai); mdai.add(0, di); RESULT = mdai;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multiDeclOrArrayInit",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // varDecl ::= IDENTIFIER COLON type 
            {
                VarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new VarDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",37, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // assignable ::= arrayAccess 
            {
                AssignTarget RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr e1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignTarget.ExprAssign(e1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // assignable ::= varDecl 
            {
                AssignTarget RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl vd = CUP$parser$stack.peek().<VarDecl> value();
                 RESULT = new AssignTarget.DeclAssign(vd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // assignable ::= UNDERSCORE 
            {
                AssignTarget RESULT = null;
                 RESULT = new AssignTarget.Underscore(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // assignables ::= assignable 
            {
                ArrayList<AssignTarget> RESULT = null;
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                AssignTarget at = CUP$parser$stack.peek().<AssignTarget> value();
                 RESULT = ParseUtil.singleton(at); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignables",35, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // assignables ::= assignable COMMA assignables 
            {
                ArrayList<AssignTarget> RESULT = null;
                int atleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int atright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                AssignTarget at = CUP$parser$stack.elementAt(CUP$parser$top-2).<AssignTarget> value();
                int atlleft = CUP$parser$stack.peek().left;
                int atlright = CUP$parser$stack.peek().right;
                ArrayList<AssignTarget> atl = CUP$parser$stack.peek().<ArrayList<AssignTarget>> value();
                 atl.add(0, at); RESULT = atl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignables",35, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // multiAssign ::= assignables EQUALS exprList 
            {
                MultiAssignBuilder RESULT = null;
                int tgleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tgright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<AssignTarget> tg = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<AssignTarget>> value();
                int exprsleft = CUP$parser$stack.peek().left;
                int exprsright = CUP$parser$stack.peek().right;
                ArrayList<Expr> exprs = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new MultiAssignBuilder(tg, exprs);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multiAssign",29, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // arrayinit ::= arrayNonBlank 
            {
                ArrayInit RESULT = null;
                int anbleft = CUP$parser$stack.peek().left;
                int anbright = CUP$parser$stack.peek().right;
                ArrayInit anb = CUP$parser$stack.peek().<ArrayInit> value();
                 RESULT = anb;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayinit",32, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // arrayinit ::= arrayinit OPEN_BRACKET CLOSE_BRACKET 
            {
                ArrayInit RESULT = null;
                int aileft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int airight = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayInit ai = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayInit> value();
                 RESULT = new ArrayInit.Dim(ai, null); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayinit",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // arrayNonBlank ::= primType OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayInit RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Primitive pt = CUP$parser$stack.elementAt(CUP$parser$top-3).<Primitive> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new ArrayInit.ArrPtr(pt, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",33, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // arrayNonBlank ::= arrayNonBlank OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayInit RESULT = null;
                int anbleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int anbright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayInit anb = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayInit> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new ArrayInit.Dim(anb, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",33, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // method ::= methodHeader returnableBlock 
            {
                Method RESULT = null;
                int amleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int amright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Method am = CUP$parser$stack.elementAt(CUP$parser$top-1).<Method> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement.Block b = CUP$parser$stack.peek().<Statement.Block> value();
                 am.setBody(b); RESULT = am; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // typelst ::= type 
            {
                ArrayList<Type> RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = ParseUtil.singleton(t);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // typelst ::= type COMMA typelst 
            {
                ArrayList<Type> RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                ArrayList<Type> tl = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 tl.add(0, t); RESULT = tl;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // expr ::= expr binop expr 
            {
                Expr RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr l = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                BinaryOp.Operation op = CUP$parser$stack.elementAt(CUP$parser$top-1).<BinaryOp.Operation> value();
                int rleft = CUP$parser$stack.peek().left;
                int rright = CUP$parser$stack.peek().right;
                Expr r = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(op, l, r); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // expr ::= unop expr 
            {
                Expr RESULT = null;
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UnaryOp.Operation op = CUP$parser$stack.elementAt(CUP$parser$top-1).<UnaryOp.Operation> value();
                int argleft = CUP$parser$stack.peek().left;
                int argright = CUP$parser$stack.peek().right;
                Expr arg = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryOp(op, arg); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // expr ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // expr ::= functionCall 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                Expr.FunctionCall fc = CUP$parser$stack.peek().<Expr.FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // expr ::= STRING_LITERAL 
            {
                Expr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                String s = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.StringLit(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // expr ::= primitiveLiteral 
            {
                Expr RESULT = null;
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                Literal pl = CUP$parser$stack.peek().<Literal> value();
                 RESULT = pl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // expr ::= OPEN_BRACE exprList CLOSE_BRACE 
            {
                Expr RESULT = null;
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> el = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Literal.ArrayLit(el); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // expr ::= arrayAccess 
            {
                Expr RESULT = null;
                int aaleft = CUP$parser$stack.peek().left;
                int aaright = CUP$parser$stack.peek().right;
                Expr aa = CUP$parser$stack.peek().<Expr> value();
                 RESULT = aa; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = e; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // exprList ::= expr 
            {
                ArrayList<Expr> RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = ParseUtil.singleton(e);  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // exprList ::= expr COMMA exprList 
            {
                ArrayList<Expr> RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                ArrayList<Expr> l = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                 l.add(0,e); RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // arrayAccess ::= indexable OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expr> value();
                int e2left = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int e2right = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e2 = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new Expr.ArrayAccess(e1,e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",41, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // indexable ::= functionCall 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                Expr.FunctionCall fc = CUP$parser$stack.peek().<Expr.FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",42, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // indexable ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",42, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // indexable ::= arrayAccess 
            {
                Expr RESULT = null;
                int aaleft = CUP$parser$stack.peek().left;
                int aaright = CUP$parser$stack.peek().right;
                Expr aa = CUP$parser$stack.peek().<Expr> value();
                 RESULT = aa; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",42, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // primitiveLiteral ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int nleft = CUP$parser$stack.peek().left;
                int nright = CUP$parser$stack.peek().right;
                String n = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.IntLit(Long.parseLong(n)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // primitiveLiteral ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Character c = CUP$parser$stack.peek().<Character> value();
                 RESULT = new Literal.CharLit(c); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // primitiveLiteral ::= FALSE 
            {
                Literal RESULT = null;
                 RESULT = new Literal.BoolLit(false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // primitiveLiteral ::= TRUE 
            {
                Literal RESULT = null;
                 RESULT = new Literal.BoolLit(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // primLitLst ::= primitiveLiteral 
            {
                ArrayList<Literal> RESULT = null;
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                Literal pl = CUP$parser$stack.peek().<Literal> value();
                 RESULT = ParseUtil.singleton(pl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primLitLst",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // primLitLst ::= primitiveLiteral primLitLst 
            {
                ArrayList<Literal> RESULT = null;
                int plleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int plright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Literal pl = CUP$parser$stack.elementAt(CUP$parser$top-1).<Literal> value();
                int pllleft = CUP$parser$stack.peek().left;
                int pllright = CUP$parser$stack.peek().right;
                ArrayList<Literal> pll = CUP$parser$stack.peek().<ArrayList<Literal>> value();
                 pll.add(0, pl); RESULT = pll;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primLitLst",16, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // functionCall ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Expr.FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int vlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> vl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Expr.FunctionCall(id, vl);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCall",28, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // functionCall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Expr.FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Expr.FunctionCall(id, new ArrayList<Expr>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCall",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // unop ::= MINUS 
            {
                UnaryOp.Operation RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",40, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // NT$0 ::= 
            {
                UnaryOp.Operation RESULT = null;
 RESULT = UnaryOp.Operation.NEG; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // unop ::= NT$0 NOT 
            {
                UnaryOp.Operation RESULT = null;
                // propagate RESULT from NT$0
                RESULT = CUP$parser$stack.elementAt(CUP$parser$top-1).<UnaryOp.Operation> value();
                 RESULT = UnaryOp.Operation.NOT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",40, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // binop ::= PLUS 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.PLUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // binop ::= MINUS 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.MINUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // binop ::= TIMES 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.TIMES; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // binop ::= HIGHTIMES 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.HIGHTIMES; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // binop ::= DIVIDE 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.DIVIDE; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // binop ::= MODULO 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.MODULO; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // binop ::= LT 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.LT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // binop ::= LEQ 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.LEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // binop ::= GT 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.GT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // binop ::= GEQ 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.GEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // binop ::= EQB 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.EQB; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // binop ::= NEQB 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.NEQB; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // binop ::= AND 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.AND; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // binop ::= OR 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.OR; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // primType ::= BOOL 
            {
                Primitive RESULT = null;
                RESULT = new Primitive.BOOL(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primType",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // primType ::= INT 
            {
                Primitive RESULT = null;
                RESULT = new Primitive.INT(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primType",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // type ::= primType 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                Primitive pt = CUP$parser$stack.peek().<Primitive> value();
                RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // type ::= type OPEN_BRACKET CLOSE_BRACKET 
            {
                Type RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                RESULT = new Type.Array(t);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
