
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.internal.markers.*;
import java.util.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return SymbolTable.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\005\004\000\002\005\002\000\002\006\005\000" +
    "\002\007\004\000\002\007\002\000\002\010\003\000\002" +
    "\010\004\000\002\015\003\000\002\015\005\000\002\014" +
    "\003\000\002\014\005\000\002\013\005\000\002\011\010" +
    "\000\002\011\006\000\002\011\007\000\002\011\005\000" +
    "\002\026\005\000\002\027\003\000\002\027\005\000\002" +
    "\037\003\000\002\037\004\000\002\036\003\000\002\036" +
    "\003\000\002\036\004\000\002\036\004\000\002\023\006" +
    "\000\002\023\010\000\002\024\007\000\002\024\005\000" +
    "\002\041\003\000\002\041\003\000\002\040\005\000\002" +
    "\040\006\000\002\047\006\000\002\047\005\000\002\042" +
    "\002\000\002\042\004\000\002\043\003\000\002\043\002" +
    "\000\002\025\004\000\002\025\005\000\002\035\003\000" +
    "\002\035\005\000\002\034\003\000\002\034\003\000\002" +
    "\033\005\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\032\003\000\002\032\005\000\002\030\005" +
    "\000\002\050\003\000\002\050\005\000\002\053\006\000" +
    "\002\053\006\000\002\012\004\000\002\016\003\000\002" +
    "\016\005\000\002\046\005\000\002\046\004\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\005\000\002\046\006\000\002\046\006\000" +
    "\002\051\003\000\002\051\005\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\003\000\002\022\004\000\002\045\003\000\002\054\002" +
    "\000\002\045\004\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\003\000\002\020\005" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\055\005\056\006\001\002\000\004\002" +
    "\235\001\002\000\006\002\ufffd\004\232\001\002\000\010" +
    "\002\ufffa\004\ufffa\040\011\001\002\000\006\002\ufff7\004" +
    "\026\001\002\000\010\002\ufffa\004\ufffa\040\011\001\002" +
    "\000\004\004\013\001\002\000\004\002\uffff\001\002\000" +
    "\012\002\uffd5\004\uffd5\040\uffd5\052\014\001\002\000\024" +
    "\002\uffd6\004\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\047\uffd6\053\uffd6\001\002\000\010\002\ufff9\004\ufff9" +
    "\040\ufff9\001\002\000\006\002\ufffb\004\ufffb\001\002\000" +
    "\012\002\ufff4\004\ufff4\031\225\052\ufff4\001\002\000\004" +
    "\046\064\001\002\000\006\002\ufff6\004\ufff6\001\002\000" +
    "\010\002\uffd5\004\uffd5\052\014\001\002\000\014\002\ufff2" +
    "\004\ufff2\031\ufff2\051\060\052\ufff2\001\002\000\004\002" +
    "\ufffc\001\002\000\006\002\ufff7\004\026\001\002\000\006" +
    "\044\027\050\030\001\002\000\006\004\042\045\041\001" +
    "\002\000\006\012\033\013\031\001\002\000\022\002\uff9e" +
    "\004\uff9e\031\uff9e\042\uff9e\045\uff9e\046\uff9e\051\uff9e\052" +
    "\uff9e\001\002\000\016\002\ufff0\004\ufff0\031\ufff0\042\035" +
    "\051\ufff0\052\ufff0\001\002\000\022\002\uff9d\004\uff9d\031" +
    "\uff9d\042\uff9d\045\uff9d\046\uff9d\051\uff9d\052\uff9d\001\002" +
    "\000\022\002\uff9c\004\uff9c\031\uff9c\042\uff9c\045\uff9c\046" +
    "\uff9c\051\uff9c\052\uff9c\001\002\000\004\043\036\001\002" +
    "\000\022\002\uff9b\004\uff9b\031\uff9b\042\uff9b\045\uff9b\046" +
    "\uff9b\051\uff9b\052\uff9b\001\002\000\004\045\054\001\002" +
    "\000\006\045\uffea\051\052\001\002\000\012\002\uffec\004" +
    "\uffec\046\uffec\050\045\001\002\000\004\050\043\001\002" +
    "\000\006\012\033\013\031\001\002\000\010\042\035\045" +
    "\uffeb\051\uffeb\001\002\000\006\012\033\013\031\001\002" +
    "\000\010\002\uffed\004\uffed\046\uffed\001\002\000\014\002" +
    "\uffc2\004\uffc2\042\035\046\uffc2\051\050\001\002\000\006" +
    "\012\033\013\031\001\002\000\010\002\uffc1\004\uffc1\046" +
    "\uffc1\001\002\000\004\004\042\001\002\000\004\045\uffe9" +
    "\001\002\000\012\002\uffee\004\uffee\046\uffee\050\055\001" +
    "\002\000\006\012\033\013\031\001\002\000\010\002\uffef" +
    "\004\uffef\046\uffef\001\002\000\004\002\ufff8\001\002\000" +
    "\004\004\062\001\002\000\012\002\ufff1\004\ufff1\031\ufff1" +
    "\052\ufff1\001\002\000\004\050\030\001\002\000\006\002" +
    "\ufff5\004\ufff5\001\002\000\012\004\077\034\101\036\076" +
    "\053\066\001\002\000\006\002\uffc3\004\uffc3\001\002\000" +
    "\006\031\uffcb\051\uffcb\001\002\000\020\004\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\047\uffe5\053\uffe5\001\002\000" +
    "\006\031\uffca\051\222\001\002\000\004\031\220\001\002" +
    "\000\022\004\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\047" +
    "\uffd5\052\014\053\uffd5\001\002\000\006\037\210\047\211" +
    "\001\002\000\022\004\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\047\uffd5\052\014\053\uffd5\001\002\000\016\004\077" +
    "\034\101\036\076\037\uffe8\047\uffe8\053\066\001\002\000" +
    "\030\004\122\005\120\006\104\007\107\010\106\011\121" +
    "\015\111\022\uffae\041\105\044\200\046\114\001\002\000" +
    "\006\044\123\050\176\001\002\000\006\031\uffcd\051\uffcd" +
    "\001\002\000\030\004\122\005\120\006\104\007\107\010" +
    "\106\011\121\015\111\022\uffae\041\105\044\112\046\114" +
    "\001\002\000\020\004\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\047\uffe6\053\uffe6\001\002\000\006\031\uffcc\051\uffcc" +
    "\001\002\000\102\002\uffb4\004\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\042\uffb4\043\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\001\002\000\004\044\173\001\002\000\102" +
    "\002\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\042\uffb2\043\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\001" +
    "\002\000\102\002\uffb5\004\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\042" +
    "\uffb5\043\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\001\002\000\026\004\122\005\120\006\104\007" +
    "\107\010\106\011\121\015\111\022\uffae\041\105\046\114" +
    "\001\002\000\026\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\015\uffaf\022\uffaf\041\uffaf\046\uffaf\001\002" +
    "\000\026\004\122\005\120\006\104\007\107\010\106\011" +
    "\121\015\111\022\uffae\041\105\046\114\001\002\000\004" +
    "\022\165\001\002\000\026\004\122\005\120\006\104\007" +
    "\107\010\106\011\121\015\111\022\uffae\041\105\046\114" +
    "\001\002\000\070\004\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\001\002\000\070\004\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\042\uffbb\043\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\001" +
    "\002\000\052\004\077\014\147\015\141\016\131\017\135" +
    "\020\140\021\133\023\134\024\145\025\137\026\142\027" +
    "\143\030\130\032\144\033\136\034\101\036\076\042\132" +
    "\046\064\053\066\001\002\000\070\004\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\042\uffbc\043\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\001\002\000" +
    "\102\002\uffb3\004\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\042\uffb3\043" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\001\002\000\072\004\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\042\uffbe\043\uffbe\044\123\045\uffbe\046\uffbe" +
    "\047\uffbe\051\uffbe\052\uffbe\053\uffbe\001\002\000\030\004" +
    "\122\005\120\006\104\007\107\010\106\011\121\015\111" +
    "\022\uffae\041\105\045\126\046\114\001\002\000\004\045" +
    "\154\001\002\000\064\004\uffb7\014\147\015\141\016\131" +
    "\017\135\020\140\021\133\023\134\024\145\025\137\026" +
    "\142\027\143\030\130\032\144\033\136\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\042\132\045\uffb7\047\uffb7\051\127\052" +
    "\uffb7\053\uffb7\001\002\000\070\004\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\042\uffd9\043\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\001\002\000\026" +
    "\004\122\005\120\006\104\007\107\010\106\011\121\015" +
    "\111\022\uffae\041\105\046\114\001\002\000\026\004\uff9f" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\015\uff9f\022" +
    "\uff9f\041\uff9f\046\uff9f\001\002\000\026\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\015\uffaa\022\uffaa\041" +
    "\uffaa\046\uffaa\001\002\000\026\004\122\005\120\006\104" +
    "\007\107\010\106\011\121\015\111\022\uffae\041\105\046" +
    "\114\001\002\000\026\004\uffa7\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\015\uffa7\022\uffa7\041\uffa7\046\uffa7\001" +
    "\002\000\026\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\011\uffa6\015\uffa6\022\uffa6\041\uffa6\046\uffa6\001\002\000" +
    "\026\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\015\uffa9\022\uffa9\041\uffa9\046\uffa9\001\002\000\026\004" +
    "\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\015\uffa1" +
    "\022\uffa1\041\uffa1\046\uffa1\001\002\000\026\004\uffa4\005" +
    "\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\015\uffa4\022\uffa4" +
    "\041\uffa4\046\uffa4\001\002\000\026\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\015\uffa8\022\uffa8\041\uffa8" +
    "\046\uffa8\001\002\000\026\004\uffab\005\uffab\006\uffab\007" +
    "\uffab\010\uffab\011\uffab\015\uffab\022\uffab\041\uffab\046\uffab" +
    "\001\002\000\026\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\011\uffa3\015\uffa3\022\uffa3\041\uffa3\046\uffa3\001\002" +
    "\000\026\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\015\uffa0\022\uffa0\041\uffa0\046\uffa0\001\002\000\026" +
    "\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\015" +
    "\uffa2\022\uffa2\041\uffa2\046\uffa2\001\002\000\026\004\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\015\uffa5\022" +
    "\uffa5\041\uffa5\046\uffa5\001\002\000\026\004\122\005\120" +
    "\006\104\007\107\010\106\011\121\015\111\022\uffae\041" +
    "\105\046\114\001\002\000\026\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\015\uffac\022\uffac\041\uffac\046" +
    "\uffac\001\002\000\070\004\uffc0\014\147\015\141\016\131" +
    "\017\135\020\140\021\133\023\134\024\145\025\137\026" +
    "\142\027\143\030\130\032\144\033\136\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\042\132\043\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\001\002\000\042\014\147" +
    "\015\141\016\131\017\135\020\140\021\133\023\134\024" +
    "\145\025\137\026\142\027\143\030\130\032\144\033\136" +
    "\042\132\043\152\001\002\000\070\004\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\042\uffb9\043\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9\001\002\000" +
    "\024\004\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\045\uffb6" +
    "\047\uffb6\052\uffb6\053\uffb6\001\002\000\070\004\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\042\uffda\043\uffda" +
    "\045\uffda\046\uffda\047\uffda\051\uffda\052\uffda\053\uffda\001" +
    "\002\000\020\004\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\047\uffde\053\uffde\001\002\000\020\004\uffd8\034\uffd8\035" +
    "\160\036\uffd8\037\uffd8\047\uffd8\053\uffd8\001\002\000\020" +
    "\004\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\047\uffdd\053" +
    "\uffdd\001\002\000\014\004\077\034\101\036\076\046\064" +
    "\053\066\001\002\000\020\004\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\047\uffe2\053\uffe2\001\002\000\020\004\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\047\uffd7\053\uffd7\001" +
    "\002\000\004\047\164\001\002\000\070\004\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\042\uffba\043\uffba\045" +
    "\uffba\046\uffba\047\uffba\051\uffba\052\uffba\053\uffba\001\002" +
    "\000\026\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011" +
    "\uffad\015\uffad\022\uffad\041\uffad\046\uffad\001\002\000\042" +
    "\014\147\015\141\016\131\017\135\020\140\021\133\023" +
    "\134\024\145\025\137\026\142\027\143\030\130\032\144" +
    "\033\136\042\132\045\167\001\002\000\014\004\077\034" +
    "\101\036\076\046\064\053\066\001\002\000\020\004\uffd8" +
    "\034\uffd8\035\160\036\uffd8\037\uffd8\047\uffd8\053\uffd8\001" +
    "\002\000\020\004\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\047\uffe1\053\uffe1\001\002\000\070\004\uffbf\014\147\015" +
    "\141\016\131\017\135\020\140\021\133\023\134\024\145" +
    "\025\137\026\142\027\143\030\130\032\144\033\136\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\042\132\043\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002\000" +
    "\026\004\122\005\120\006\104\007\107\010\106\011\121" +
    "\015\111\022\uffae\041\105\046\114\001\002\000\042\014" +
    "\147\015\141\016\131\017\135\020\140\021\133\023\134" +
    "\024\145\025\137\026\142\027\143\030\130\032\144\033" +
    "\136\042\132\045\175\001\002\000\070\004\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\042\uffb8\043\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8\001\002" +
    "\000\006\012\033\013\031\001\002\000\010\031\uffce\042" +
    "\035\051\uffce\001\002\000\026\004\122\005\120\006\104" +
    "\007\107\010\106\011\121\015\111\022\uffae\041\105\046" +
    "\114\001\002\000\052\004\077\014\147\015\141\016\131" +
    "\017\135\020\140\021\133\023\134\024\145\025\137\026" +
    "\142\027\143\030\130\032\144\033\136\034\101\036\076" +
    "\042\132\046\064\053\066\001\002\000\020\004\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\047\uffdf\053\uffdf\001\002" +
    "\000\042\014\147\015\141\016\131\017\135\020\140\021" +
    "\133\023\134\024\145\025\137\026\142\027\143\030\130" +
    "\032\144\033\136\042\132\045\204\001\002\000\014\004" +
    "\077\034\101\036\076\046\064\053\066\001\002\000\020" +
    "\004\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\047\uffe0\053" +
    "\uffe0\001\002\000\006\037\uffe7\047\uffe7\001\002\000\020" +
    "\004\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\047\uffe3\053" +
    "\uffe3\001\002\000\032\004\122\005\120\006\104\007\107" +
    "\010\106\011\121\015\111\022\uffae\041\105\046\114\047" +
    "\uffd5\052\014\001\002\000\022\002\uffdc\004\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\047\uffdc\053\uffdc\001\002\000" +
    "\004\047\213\001\002\000\022\002\uffdb\004\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\047\uffdb\053\uffdb\001\002\000" +
    "\006\047\uffd5\052\014\001\002\000\004\047\uffd4\001\002" +
    "\000\004\047\uffd3\001\002\000\020\004\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\047\uffe4\053\uffe4\001\002\000\026" +
    "\004\122\005\120\006\104\007\107\010\106\011\121\015" +
    "\111\022\uffae\041\105\046\114\001\002\000\022\004\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\047\uffc8\052\uffc8\053" +
    "\uffc8\001\002\000\006\004\224\053\066\001\002\000\004" +
    "\031\uffc9\001\002\000\004\050\176\001\002\000\012\006" +
    "\104\007\107\010\106\011\121\001\002\000\010\002\ufff3" +
    "\004\ufff3\052\ufff3\001\002\000\020\002\uffb1\004\uffb1\006" +
    "\104\007\107\010\106\011\121\052\uffb1\001\002\000\010" +
    "\002\uffb0\004\uffb0\052\uffb0\001\002\000\006\002\ufffd\004" +
    "\232\001\002\000\004\044\027\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\232\011\230\001\001\000\010\004\011\005\006" +
    "\006\007\001\001\000\020\007\023\010\024\011\017\012" +
    "\020\013\022\014\016\015\021\001\001\000\006\005\015" +
    "\006\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\064\001" +
    "\001\000\002\001\001\000\004\043\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\056\010\024\011" +
    "\017\012\020\013\022\014\016\015\021\001\001\000\002" +
    "\001\001\000\006\026\037\027\036\001\001\000\006\017" +
    "\033\020\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\033\020\043\001" +
    "\001\000\002\001\001\000\010\016\045\017\033\020\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\050\017\033\020\046\001\001\000\002\001\001\000\006" +
    "\026\037\027\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\055\017\033\020\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\022\014\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\023\101\024\066\030\071\031\067\032\070\033" +
    "\102\036\074\037\072\047\073\052\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\216\001\001\000\004" +
    "\025\211\001\001\000\004\043\206\001\001\000\026\023" +
    "\101\024\066\030\071\031\067\032\070\033\102\036\074" +
    "\037\205\047\073\052\077\001\001\000\014\021\115\045" +
    "\107\046\200\047\114\054\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\021\115\045\107\046\116\047" +
    "\114\054\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\021\115\045\107\046\171\047\114" +
    "\054\112\001\001\000\002\001\001\000\014\021\115\045" +
    "\107\046\165\047\114\054\112\001\001\000\002\001\001" +
    "\000\016\021\115\045\107\046\124\047\114\051\162\054" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\023\101\024\066\030\071\031\067\032\070\033\102\036" +
    "\154\040\156\041\155\044\145\047\073\052\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\021\115\045\107\046\124\047\114\051\123\054\112" +
    "\001\001\000\002\001\001\000\004\044\145\001\001\000" +
    "\002\001\001\000\016\021\115\045\107\046\124\047\114" +
    "\051\152\054\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\021\115\045\107\046\150\047\114\054\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\021\115\045\107" +
    "\046\147\047\114\054\112\001\001\000\002\001\001\000" +
    "\004\044\145\001\001\000\004\044\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\160\001\001\000\002\001\001\000\030" +
    "\023\101\024\066\030\071\031\067\032\070\033\102\036" +
    "\154\040\156\041\161\047\073\052\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\145\001\001\000\030" +
    "\023\101\024\066\030\071\031\067\032\070\033\102\036" +
    "\154\040\156\041\167\047\073\052\077\001\001\000\004" +
    "\042\170\001\001\000\002\001\001\000\004\044\145\001" +
    "\001\000\014\021\115\045\107\046\173\047\114\054\112" +
    "\001\001\000\004\044\145\001\001\000\002\001\001\000" +
    "\006\017\033\020\176\001\001\000\002\001\001\000\014" +
    "\021\115\045\107\046\202\047\114\054\112\001\001\000" +
    "\032\023\101\024\066\030\071\031\067\032\070\033\102" +
    "\036\154\040\156\041\201\044\145\047\073\052\077\001" +
    "\001\000\002\001\001\000\004\044\145\001\001\000\030" +
    "\023\101\024\066\030\071\031\067\032\070\033\102\036" +
    "\154\040\156\041\204\047\073\052\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\021" +
    "\115\043\214\045\107\046\124\047\114\051\213\054\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\021\115\045\107\046" +
    "\124\047\114\051\220\054\112\001\001\000\002\001\001" +
    "\000\012\031\067\032\222\033\102\052\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\226\022\225" +
    "\001\001\000\002\001\001\000\006\021\226\022\227\001" +
    "\001\000\002\001\001\000\006\003\233\011\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 102. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= file EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Eta start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Eta> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // file ::= INTERFACE interface 
            {
                Eta RESULT = null;
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                Interface It = CUP$parser$stack.peek().<Interface> value();
                 RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // file ::= PROGRAM program 
            {
                Eta RESULT = null;
                int Pleft = CUP$parser$stack.peek().left;
                int Pright = CUP$parser$stack.peek().right;
                Program P = CUP$parser$stack.peek().<Program> value();
                 RESULT = P;  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // interface ::= methodHeader interface 
            {
                Interface RESULT = null;
                int amleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int amright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Method am = CUP$parser$stack.elementAt(CUP$parser$top-1).<Method> value();
                int itleft = CUP$parser$stack.peek().left;
                int itright = CUP$parser$stack.peek().right;
                Interface it = CUP$parser$stack.peek().<Interface> value();
                 ArrayList<Method> ml = it.methodHeaders; ml.add(0, am); RESULT = new Interface(ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // interface ::= 
            {
                Interface RESULT = null;
                 RESULT = new Interface(new ArrayList<Method>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // program ::= imports allDefinitions 
            {
                Program RESULT = null;
                int Isleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Isright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Use> Is = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Use>> value();
                int Dsleft = CUP$parser$stack.peek().left;
                int Dsright = CUP$parser$stack.peek().right;
                ArrayList<Definition> Ds = CUP$parser$stack.peek().<ArrayList<Definition>> value();
                 RESULT = new Program(Is, Ds); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // imports ::= use imports 
            {
                ArrayList<Use> RESULT = null;
                int uleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int uright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Use u = CUP$parser$stack.elementAt(CUP$parser$top-1).<Use> value();
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                ArrayList<Use> It = CUP$parser$stack.peek().<ArrayList<Use>> value();
                 It.add(0, u); RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // imports ::= 
            {
                ArrayList<Use> RESULT = null;
                 RESULT = new ArrayList<Use>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",3, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // use ::= USE IDENTIFIER semi 
            {
                Use RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                 RESULT = new Use(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // allDefinitions ::= definition allDefinitions 
            {
                ArrayList<Definition> RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Definition> d = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Definition>> value();
                int Dtleft = CUP$parser$stack.peek().left;
                int Dtright = CUP$parser$stack.peek().right;
                ArrayList<Definition> Dt = CUP$parser$stack.peek().<ArrayList<Definition>> value();
                 Dt.addAll(d); RESULT = Dt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("allDefinitions",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // allDefinitions ::= 
            {
                ArrayList<Definition> RESULT = null;
                 RESULT = new ArrayList<Definition>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("allDefinitions",5, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // definition ::= method 
            {
                ArrayList<Definition> RESULT = null;
                int mleft = CUP$parser$stack.peek().left;
                int mright = CUP$parser$stack.peek().right;
                Method m = CUP$parser$stack.peek().<Method> value();
                 RESULT = ParseUtil.singleton(m); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // definition ::= globalMultiDeclaration semi 
            {
                ArrayList<Definition> RESULT = null;
                int dcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Definition> dc = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Definition>> value();
                 RESULT = dc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // globalMultiDeclaration ::= globalDecls 
            {
                ArrayList<Definition> RESULT = null;
                int gDleft = CUP$parser$stack.peek().left;
                int gDright = CUP$parser$stack.peek().right;
                ArrayList<GlobalDecl> gD = CUP$parser$stack.peek().<ArrayList<GlobalDecl>> value();
                 RESULT = new GlobalDeclarationBuilder(gD, null).toDefinitionList(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalMultiDeclaration",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // globalMultiDeclaration ::= globalDecls EQUALS primLitLst 
            {
                ArrayList<Definition> RESULT = null;
                int gDleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int gDright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<GlobalDecl> gD = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<GlobalDecl>> value();
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                ArrayList<Literal> pl = CUP$parser$stack.peek().<ArrayList<Literal>> value();
                 RESULT = new GlobalDeclarationBuilder(gD, pl).toDefinitionList(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalMultiDeclaration",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // globalDecls ::= globalDecl 
            {
                ArrayList<GlobalDecl> RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                GlobalDecl d = CUP$parser$stack.peek().<GlobalDecl> value();
                 RESULT = ParseUtil.singleton(d); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecls",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // globalDecls ::= globalDecl COMMA globalDecls 
            {
                ArrayList<GlobalDecl> RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                GlobalDecl d = CUP$parser$stack.elementAt(CUP$parser$top-2).<GlobalDecl> value();
                int Dsleft = CUP$parser$stack.peek().left;
                int Dsright = CUP$parser$stack.peek().right;
                ArrayList<GlobalDecl> Ds = CUP$parser$stack.peek().<ArrayList<GlobalDecl>> value();
                 Ds.add(0, d); RESULT = Ds; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecls",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // globalDecl ::= IDENTIFIER COLON type 
            {
                GlobalDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new GlobalDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // methodHeader ::= IDENTIFIER OPEN_PAREN methodArgs CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-5).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Object Ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<Object> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                ArrayList<Type> Ts = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 RESULT = new Method(id, Ds, Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // methodHeader ::= IDENTIFIER OPEN_PAREN methodArgs CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object Ds = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = new Method(id, Ds, new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // methodHeader ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                ArrayList<Type> Ts = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 RESULT = new Method(id, new ArrayList<GlobalDecl>(), Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // methodHeader ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Method(id, new ArrayList<GlobalDecl>(), new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // methodArg ::= IDENTIFIER COLON type 
            {
                Object RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArg",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // methodArgs ::= methodArg 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArgs",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // methodArgs ::= methodArg COMMA methodArgs 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArgs",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // statementList ::= statement 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // statementList ::= statement statementList 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",29, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // statement ::= if 
            {
                Object RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Statement.If i = CUP$parser$stack.peek().<Statement.If> value();
                 RESULT = i; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // statement ::= while 
            {
                Object RESULT = null;
                int wleft = CUP$parser$stack.peek().left;
                int wright = CUP$parser$stack.peek().right;
                Statement.While w = CUP$parser$stack.peek().<Statement.While> value();
                 RESULT = w; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // statement ::= multiAssign semi 
            {
                Object RESULT = null;
                int aleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object a = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = a; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // statement ::= functionCall semi 
            {
                Object RESULT = null;
                int fnleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fnright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object fn = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = fn; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // if ::= IF expr block elseOptional 
            {
                Statement.If RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object b = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int elsleft = CUP$parser$stack.peek().left;
                int elsright = CUP$parser$stack.peek().right;
                Object els = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Statement.If(e, b, els); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // if ::= IF OPEN_PAREN expr CLOSE_PAREN block elseOptional 
            {
                Statement.If RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Object e = CUP$parser$stack.elementAt(CUP$parser$top-3).<Object> value();
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object b = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int elsleft = CUP$parser$stack.peek().left;
                int elsright = CUP$parser$stack.peek().right;
                Object els = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Statement.If(e, b, els); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",17, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // while ::= WHILE OPEN_PAREN expr CLOSE_PAREN block 
            {
                Statement.While RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Statement.While(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",18, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // while ::= WHILE expr block 
            {
                Statement.While RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Statement.While(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // block ::= statement 
            {
                Object RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Object s = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Statement.Block(ParseUtil.singleton(s)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // block ::= returnableBlock 
            {
                Object RESULT = null;
                int rbleft = CUP$parser$stack.peek().left;
                int rbright = CUP$parser$stack.peek().right;
                Object rb = CUP$parser$stack.peek().<Object> value();
                 RESULT = rb; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // returnableBlock ::= OPEN_BRACE statementList CLOSE_BRACE 
            {
                Object RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object sLst = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // returnableBlock ::= OPEN_BRACE statementList return CLOSE_BRACE 
            {
                Object RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object sLst = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                 sLst.add(r), RESULT = Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",30, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // functionCall ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Object RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int vlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object vl = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = new Expr.FunctionCall(id, vl);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCall",37, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // functionCall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Object RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Expr.FunctionCall(id, new ArrayList<Expr>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCall",37, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // elseOptional ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseOptional",32, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // elseOptional ::= ELSE block 
            {
                Object RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Statement.Block(b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseOptional",32, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // semi ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",33, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // semi ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",33, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // return ::= RETURN semi 
            {
                Statement RESULT = null;
                 RESULT = new Statement.Return(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",19, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // return ::= RETURN exprList semi 
            {
                Statement RESULT = null;
                int exprLstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int exprLstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object exprLst = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = new Statement.Return(exprLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // multiDeclOrArrayInit ::= varDeclOrArrayInit 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("multiDeclOrArrayInit",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // multiDeclOrArrayInit ::= varDeclOrArrayInit COMMA multiDeclOrArrayInit 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("multiDeclOrArrayInit",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // varDeclOrArrayInit ::= varDecl 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclOrArrayInit",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // varDeclOrArrayInit ::= arrayinit 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclOrArrayInit",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // varDecl ::= IDENTIFIER COLON type 
            {
                Object RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = VarDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",25, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // assignable ::= arrayAccess 
            {
                Object RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Object e1 = CUP$parser$stack.peek().<Object> value();
                 RESULT = e1; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // assignable ::= varDecl 
            {
                Object RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                Object vd = CUP$parser$stack.peek().<Object> value();
                 RESULT = vd; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // assignable ::= UNDERSCORE 
            {
                Object RESULT = null;
                 RESULT = "TODO"; //TODO 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // assignables ::= assignable 
            {
                Object RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Object t = CUP$parser$stack.peek().<Object> value();
                 RESULT = "TODO"; //TODO 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignables",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // assignables ::= assignable COMMA assignables 
            {
                Object RESULT = null;
                 RESULT = "TODO"; //TODO 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignables",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // multiAssign ::= assignables EQUALS exprList 
            {
                Object RESULT = null;
                int tgleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tgright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object tg = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int exprsleft = CUP$parser$stack.peek().left;
                int exprsright = CUP$parser$stack.peek().right;
                Object exprs = CUP$parser$stack.peek().<Object> value();
                 RESULT = new MultiAssignBuilder(tg, expr).toStatementList();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multiAssign",22, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // arrayinit ::= arrayNonBlank 
            {
                Object RESULT = null;
                int anbleft = CUP$parser$stack.peek().left;
                int anbright = CUP$parser$stack.peek().right;
                Object anb = CUP$parser$stack.peek().<Object> value();
                 RESULT = anb;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayinit",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // arrayinit ::= arrayinit OPEN_BRACKET CLOSE_BRACKET 
            {
                Object RESULT = null;
                int aileft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int airight = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object ai = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                 RESULT = new ArrayInit.Blank(ai); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayinit",38, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // arrayNonBlank ::= primType OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Object RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Primitive pt = CUP$parser$stack.elementAt(CUP$parser$top-3).<Primitive> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = new ArrayInit.InitArr(id, pt, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",41, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // arrayNonBlank ::= arrayNonBlank OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Object RESULT = null;
                int anbleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int anbright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Object anb = CUP$parser$stack.elementAt(CUP$parser$top-3).<Object> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = new ArrayInit.NonBlank(anb, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",41, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // method ::= methodHeader returnableBlock 
            {
                Method RESULT = null;
                int amleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int amright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Method am = CUP$parser$stack.elementAt(CUP$parser$top-1).<Method> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Method(am, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // typelst ::= type 
            {
                ArrayList<Type> RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // typelst ::= type COMMA typelst 
            {
                ArrayList<Type> RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // expr ::= expr binop expr 
            {
                Object RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object l = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object op = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int rleft = CUP$parser$stack.peek().left;
                int rright = CUP$parser$stack.peek().right;
                Object r = CUP$parser$stack.peek().<Object> value();
                 RESULT = new BinaryOp(op, l, r); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // expr ::= unop expr 
            {
                Object RESULT = null;
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object op = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                int argleft = CUP$parser$stack.peek().left;
                int argright = CUP$parser$stack.peek().right;
                Object arg = CUP$parser$stack.peek().<Object> value();
                 RESULT = new UnaryOp(op, arg); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // expr ::= IDENTIFIER 
            {
                Object RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // expr ::= functionCall 
            {
                Object RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                Object fc = CUP$parser$stack.peek().<Object> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // expr ::= STRING_LITERAL 
            {
                Object RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Object s = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Literal.StringLit(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // expr ::= primitiveLiteral 
            {
                Object RESULT = null;
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                Literal pl = CUP$parser$stack.peek().<Literal> value();
                 RESULT = pl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // expr ::= OPEN_BRACE exprList CLOSE_BRACE 
            {
                Object RESULT = null;
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object el = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = el; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // expr ::= expr OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Object RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Object e1 = CUP$parser$stack.elementAt(CUP$parser$top-3).<Object> value();
                int e2left = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int e2right = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object e2 = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = new Expr.ArrayAccess(e1,e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Object RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = e; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",36, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // exprList ::= expr 
            {
                Object RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Object e = CUP$parser$stack.peek().<Object> value();
                 RESULT = ParseUtil.singleton(e);  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // exprList ::= expr COMMA exprList 
            {
                Object RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Object e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Object> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Object l = CUP$parser$stack.peek().<Object> value();
                 l.add(0,e); RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",39, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // primitiveLiteral ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int nleft = CUP$parser$stack.peek().left;
                int nright = CUP$parser$stack.peek().right;
                Object n = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Literal.IntLit(Long.parseLong(n)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // primitiveLiteral ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Object c = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Literal.CharLit(c); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // primitiveLiteral ::= FALSE 
            {
                Literal RESULT = null;
                 RESULT = new Literal.BoolLit(false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // primitiveLiteral ::= TRUE 
            {
                Literal RESULT = null;
                 RESULT = new Literal.BoolLit(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // primLitLst ::= primitiveLiteral 
            {
                ArrayList<Literal> RESULT = null;
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                Literal pl = CUP$parser$stack.peek().<Literal> value();
                 RESULT = ParseUtil.singleton(pl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primLitLst",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // primLitLst ::= primitiveLiteral primLitLst 
            {
                ArrayList<Literal> RESULT = null;
                int plleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int plright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Literal pl = CUP$parser$stack.elementAt(CUP$parser$top-1).<Literal> value();
                int pllleft = CUP$parser$stack.peek().left;
                int pllright = CUP$parser$stack.peek().right;
                ArrayList<Literal> pll = CUP$parser$stack.peek().<ArrayList<Literal>> value();
                 pll.add(0, pl); RESULT = pll;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primLitLst",16, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // unop ::= MINUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",35, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // NT$0 ::= 
            {
                Object RESULT = null;
 RESULT = UnaryOp.Operation.IntNeg; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // unop ::= NT$0 NOT 
            {
                Object RESULT = null;
                // propagate RESULT from NT$0
                RESULT = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = UnaryOp.Operation.BoolNeg; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",35, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // binop ::= PLUS 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.PLUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // binop ::= MINUS 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.MINUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // binop ::= TIMES 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.TIMES; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // binop ::= HIGHTIMES 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.HIGHTIMES; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // binop ::= DIVIDE 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.DIVIDE; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // binop ::= MODULO 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.MODULO; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // binop ::= LT 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.LT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // binop ::= LEQ 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.LEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // binop ::= GT 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.GT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // binop ::= GEQ 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.GEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // binop ::= EQB 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.EQB; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // binop ::= NEQB 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.NEQB; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // binop ::= AND 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.AND; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // binop ::= OR 
            {
                Object RESULT = null;
                 RESULT = BinaryOp.Operation.OR; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // primType ::= BOOL 
            {
                Primitive RESULT = null;
                RESULT = BOOL();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primType",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // primType ::= INT 
            {
                Primitive RESULT = null;
                RESULT = INT();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primType",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // type ::= primType 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                Primitive pt = CUP$parser$stack.peek().<Primitive> value();
                RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // type ::= type OPEN_BRACKET CLOSE_BRACKET 
            {
                Type RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                RESULT = Array(t);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
