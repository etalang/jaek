
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return SymbolTable.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\005\004" +
    "\000\002\005\002\000\002\013\003\000\002\013\005\000" +
    "\002\037\005\000\002\012\005\000\002\011\003\000\002" +
    "\011\003\000\002\006\003\000\002\006\004\000\002\006" +
    "\004\000\002\007\010\000\002\007\006\000\002\007\007" +
    "\000\002\007\005\000\002\020\005\000\002\010\004\000" +
    "\002\014\003\000\002\014\005\000\002\024\003\000\002" +
    "\024\004\000\002\025\006\000\002\025\010\000\002\026" +
    "\007\000\002\026\005\000\002\027\005\000\002\027\006" +
    "\000\002\027\005\000\002\027\004\000\002\030\003\000" +
    "\002\030\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\036" +
    "\006\000\002\036\005\000\002\031\002\000\002\031\004" +
    "\000\002\034\003\000\002\034\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\040\004\000\002\040\005\000\002\041\003\000\002" +
    "\041\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\005\000\002\042\003\000\002\042\005\000\002\042\006" +
    "\000\002\043\004\000\002\043\005\000\002\035\005\000" +
    "\002\035\004\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\005\000\002\035\004" +
    "\000\002\035\006\000\002\044\005\000\002\044\006\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\004\000\002\022\003\000\002\022\005\000\002\032" +
    "\003\000\002\032\002" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\012\002\ufffe\004\ufffe\020\006\053\ufffe\001" +
    "\002\000\010\002\ufffb\004\025\053\016\001\002\000\012" +
    "\002\ufffe\004\ufffe\020\006\053\ufffe\001\002\000\004\004" +
    "\011\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\014\002\uffa3\004\uffa3\020\uffa3\052\012\053" +
    "\uffa3\001\002\000\024\002\uffa4\004\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\047\uffa4\053\uffa4\001\002\000" +
    "\012\002\ufffd\004\ufffd\020\ufffd\053\ufffd\001\002\000\010" +
    "\002\uffff\004\uffff\053\uffff\001\002\000\032\002\ufff5\004" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\037\ufff5\045\ufff5" +
    "\047\ufff5\051\ufff5\052\ufff5\053\ufff5\001\002\000\006\037" +
    "\uffa9\051\uffa9\001\002\000\016\002\uffa3\004\uffa3\037\uffaa" +
    "\051\uffaa\052\012\053\uffa3\001\002\000\010\002\ufff4\004" +
    "\ufff4\053\ufff4\001\002\000\032\002\ufff6\004\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\037\ufff6\045\ufff6\047\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\001\002\000\004\046\156\001\002" +
    "\000\004\002\000\001\002\000\010\002\ufffb\004\025\053" +
    "\016\001\002\000\014\037\uffa8\042\036\044\136\050\037" +
    "\051\uffa8\001\002\000\004\037\134\001\002\000\012\002" +
    "\uffa3\004\uffa3\052\012\053\uffa3\001\002\000\006\037\uffa6" +
    "\051\031\001\002\000\006\004\033\053\016\001\002\000" +
    "\006\037\uffaa\051\uffaa\001\002\000\012\037\uffa8\042\036" +
    "\050\037\051\uffa8\001\002\000\004\037\uffa5\001\002\000" +
    "\006\037\uffa7\051\uffa7\001\002\000\026\004\065\005\064" +
    "\006\050\007\054\010\053\011\063\021\051\023\057\030" +
    "\060\046\061\001\002\000\010\012\045\013\040\042\043" +
    "\001\002\000\036\002\uffc0\004\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\037\uffc0\042\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\001\002\000\032\002\ufff8\004" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\037\ufff8\045\ufff8" +
    "\047\ufff8\051\ufff8\052\ufff8\053\ufff8\001\002\000\032\002" +
    "\uffbd\004\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\037\uffbd" +
    "\045\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\001\002\000" +
    "\030\004\065\005\064\006\050\007\054\010\053\011\063" +
    "\021\051\023\057\030\060\043\052\046\061\001\002\000" +
    "\034\002\ufff7\004\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\037\ufff7\042\046\045\ufff7\047\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\001\002\000\036\002\uffbf\004\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\037\uffbf\042\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002\000\004\043\047" +
    "\001\002\000\036\002\uffbe\004\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\037\uffbe\042\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\051\uffbe\052\uffbe\053\uffbe\001\002\000\070\002\uffb2\004" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\041\uffb2\043\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\001" +
    "\002\000\004\044\125\001\002\000\034\002\uffba\004\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\037\uffba\042\123\045" +
    "\uffba\047\uffba\051\uffba\052\uffba\053\uffba\001\002\000\070" +
    "\002\uffb0\004\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\022" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\040\uffb0\041" +
    "\uffb0\043\uffb0\045\uffb0\046\uffb0\047\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\001\002\000\070\002\uffb3\004\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\040\uffb3\041\uffb3\043\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000\070\002" +
    "\uffb5\004\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\031\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\040\uffb5\041\uffb5" +
    "\043\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\001\002\000\026\004\065\005\064\006\050\007\054" +
    "\010\053\011\063\021\051\023\057\030\060\046\061\001" +
    "\002\000\026\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\021\uffd4\023\uffd4\030\uffd4\046\uffd4\001\002\000" +
    "\026\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\021\uffd3\023\uffd3\030\uffd3\046\uffd3\001\002\000\026\004" +
    "\065\005\064\006\050\007\054\010\053\011\063\021\051" +
    "\023\057\030\060\046\061\001\002\000\040\022\112\023" +
    "\104\024\075\025\100\026\103\027\076\031\077\032\110" +
    "\033\102\034\105\035\107\036\074\040\106\041\101\043" +
    "\116\001\002\000\070\002\uffb1\004\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\040\uffb1\041\uffb1\043\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\001\002\000\070\002\uffb4" +
    "\004\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4\041\uffb4\043" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\001\002\000\074\002\uffb6\004\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\040\uffb6\041\uffb6\042\036\043\uffb6\044\066\045\uffb6" +
    "\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000" +
    "\030\004\065\005\064\006\050\007\054\010\053\011\063" +
    "\021\051\023\057\030\060\045\072\046\061\001\002\000" +
    "\070\002\uffae\004\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\040\uffae" +
    "\041\uffae\043\uffae\045\uffae\046\uffae\047\uffae\051\uffae\052" +
    "\uffae\053\uffae\001\002\000\004\045\115\001\002\000\064" +
    "\002\uffc2\004\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\022" +
    "\112\023\104\024\075\025\100\026\103\027\076\031\077" +
    "\032\110\033\102\034\105\035\107\036\074\040\106\041" +
    "\101\045\uffc2\047\uffc2\051\073\052\uffc2\053\uffc2\001\002" +
    "\000\070\002\uffd7\004\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040" +
    "\uffd7\041\uffd7\043\uffd7\045\uffd7\046\uffd7\047\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\001\002\000\026\004\065\005\064\006" +
    "\050\007\054\010\053\011\063\021\051\023\057\030\060" +
    "\046\061\001\002\000\026\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\021\uffc5\023\uffc5\030\uffc5\046\uffc5" +
    "\001\002\000\026\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010" +
    "\uffd0\011\uffd0\021\uffd0\023\uffd0\030\uffd0\046\uffd0\001\002" +
    "\000\026\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\021\uffcd\023\uffcd\030\uffcd\046\uffcd\001\002\000\026" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\021" +
    "\uffcc\023\uffcc\030\uffcc\046\uffcc\001\002\000\026\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\021\uffcf\023" +
    "\uffcf\030\uffcf\046\uffcf\001\002\000\026\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\021\uffc7\023\uffc7\030" +
    "\uffc7\046\uffc7\001\002\000\026\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\021\uffca\023\uffca\030\uffca\046" +
    "\uffca\001\002\000\026\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\021\uffce\023\uffce\030\uffce\046\uffce\001" +
    "\002\000\026\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\021\uffd1\023\uffd1\030\uffd1\046\uffd1\001\002\000" +
    "\026\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\021\uffc9\023\uffc9\030\uffc9\046\uffc9\001\002\000\026\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\021\uffc8" +
    "\023\uffc8\030\uffc8\046\uffc8\001\002\000\026\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\021\uffc6\023\uffc6" +
    "\030\uffc6\046\uffc6\001\002\000\026\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\021\uffcb\023\uffcb\030\uffcb" +
    "\046\uffcb\001\002\000\026\004\065\005\064\006\050\007" +
    "\054\010\053\011\063\021\051\023\057\030\060\046\061" +
    "\001\002\000\026\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\021\uffd2\023\uffd2\030\uffd2\046\uffd2\001\002" +
    "\000\070\002\uffb8\004\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\022\112\023\104\024\075\025\100\026\103\027\076" +
    "\031\077\032\110\033\102\034\105\035\107\036\074\040" +
    "\106\041\101\043\uffb8\045\uffb8\046\uffb8\047\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\001\002\000\026\002\uffc1\004\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\045\uffc1\047\uffc1\052\uffc1" +
    "\053\uffc1\001\002\000\070\002\uffd8\004\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\040\uffd8\041\uffd8\043\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\051\uffd8\052\uffd8\053\uffd8\001\002\000\034\002" +
    "\uffbc\004\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\037\uffbc" +
    "\042\043\045\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\001" +
    "\002\000\032\002\uffbb\004\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\037\uffbb\045\uffbb\047\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\001\002\000\004\047\121\001\002\000\070\002\uffaf" +
    "\004\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\040\uffaf\041\uffaf\043" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\001\002\000\070\002\uffb7\004\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\022\112\023\104\024\075\025\100\026\103" +
    "\027\076\031\077\032\110\033\102\034\105\035\107\036" +
    "\074\040\106\041\101\043\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\001\002\000\004\043\052\001" +
    "\002\000\032\002\uffb9\004\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\037\uffb9\045\uffb9\047\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\001\002\000\026\004\065\005\064\006\050\007\054" +
    "\010\053\011\063\021\051\023\057\030\060\046\061\001" +
    "\002\000\040\022\112\023\104\024\075\025\100\026\103" +
    "\027\076\031\077\032\110\033\102\034\105\035\107\036" +
    "\074\040\106\041\101\045\127\001\002\000\070\002\uffad" +
    "\004\uffad\014\uffad\015\uffad\016\uffad\017\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\040\uffad\041\uffad\043" +
    "\uffad\045\uffad\046\uffad\047\uffad\051\uffad\052\uffad\053\uffad" +
    "\001\002\000\040\022\112\023\104\024\075\025\100\026" +
    "\103\027\076\031\077\032\110\033\102\034\105\035\107" +
    "\036\074\040\106\041\101\043\131\001\002\000\074\002" +
    "\uffac\004\uffac\014\uffac\015\uffac\016\uffac\017\uffac\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac" +
    "\041\uffac\042\036\043\uffac\045\uffac\046\uffac\047\uffac\051" +
    "\uffac\052\uffac\053\uffac\001\002\000\072\002\uffab\004\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\027\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\043" +
    "\uffab\045\uffab\046\uffab\047\uffab\051\uffab\052\uffab\053\uffab" +
    "\001\002\000\010\002\ufff2\004\ufff2\053\ufff2\001\002\000" +
    "\026\004\065\005\064\006\050\007\054\010\053\011\063" +
    "\021\051\023\057\030\060\046\061\001\002\000\024\002" +
    "\uffed\004\uffed\014\uffed\015\uffed\016\uffed\017\uffed\047\uffed" +
    "\052\uffed\053\uffed\001\002\000\006\004\141\045\142\001" +
    "\002\000\006\045\ufffa\051\153\001\002\000\004\045\150" +
    "\001\002\000\004\050\037\001\002\000\006\046\uffee\050" +
    "\143\001\002\000\006\012\045\013\040\001\002\000\004" +
    "\046\uffef\001\002\000\010\042\046\046\uffeb\051\146\001" +
    "\002\000\006\012\045\013\040\001\002\000\004\046\uffea" +
    "\001\002\000\006\046\ufff0\050\151\001\002\000\006\012" +
    "\045\013\040\001\002\000\004\046\ufff1\001\002\000\004" +
    "\004\141\001\002\000\004\045\ufff9\001\002\000\004\002" +
    "\ufffc\001\002\000\016\004\167\014\171\016\166\017\163" +
    "\047\164\053\016\001\002\000\010\002\uffec\004\uffec\053" +
    "\uffec\001\002\000\026\004\uffa3\014\uffa3\015\uffa3\016\uffa3" +
    "\017\uffa3\037\uffaa\047\uffa3\051\uffaa\052\012\053\uffa3\001" +
    "\002\000\022\004\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3" +
    "\047\uffa3\052\012\053\uffa3\001\002\000\020\004\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\047\uffdc\053\uffdc\001\002" +
    "\000\032\004\065\005\064\006\050\007\054\010\053\011" +
    "\063\021\051\023\057\030\060\046\061\047\uffa3\052\012" +
    "\001\002\000\022\002\uffe0\004\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\047\uffe0\053\uffe0\001\002\000\016\004\167" +
    "\014\171\016\166\017\uffe9\047\uffe9\053\016\001\002\000" +
    "\030\004\065\005\064\006\050\007\054\010\053\011\063" +
    "\021\051\023\057\030\060\044\216\046\061\001\002\000" +
    "\014\037\uffa8\042\036\044\066\050\037\051\uffa8\001\002" +
    "\000\020\004\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\047" +
    "\uffdd\053\uffdd\001\002\000\030\004\065\005\064\006\050" +
    "\007\054\010\053\011\063\021\051\023\057\030\060\044" +
    "\202\046\061\001\002\000\006\017\163\047\177\001\002" +
    "\000\004\047\176\001\002\000\022\004\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\047\uffa3\052\012\053\uffa3\001\002" +
    "\000\020\004\uffda\014\uffda\015\uffda\016\uffda\017\uffda\047" +
    "\uffda\053\uffda\001\002\000\022\002\uffe1\004\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\047\uffe1\053\uffe1\001\002\000" +
    "\022\002\uffe3\004\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\047\uffe3\053\uffe3\001\002\000\004\047\201\001\002\000" +
    "\022\002\uffe2\004\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\047\uffe2\053\uffe2\001\002\000\026\004\065\005\064\006" +
    "\050\007\054\010\053\011\063\021\051\023\057\030\060" +
    "\046\061\001\002\000\050\004\167\014\171\016\166\022" +
    "\112\023\104\024\075\025\100\026\103\027\076\031\077" +
    "\032\110\033\102\034\105\035\107\036\074\040\106\041" +
    "\101\046\156\053\016\001\002\000\020\004\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\047\uffde\053\uffde\001\002\000" +
    "\020\004\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\047\uffdf" +
    "\053\uffdf\001\002\000\020\004\uffd6\014\uffd6\015\207\016" +
    "\uffd6\017\uffd6\047\uffd6\053\uffd6\001\002\000\014\004\167" +
    "\014\171\016\166\046\156\053\016\001\002\000\020\004" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\047\uffe7\053\uffe7" +
    "\001\002\000\020\004\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\047\uffd5\053\uffd5\001\002\000\040\022\112\023\104" +
    "\024\075\025\100\026\103\027\076\031\077\032\110\033" +
    "\102\034\105\035\107\036\074\040\106\041\101\045\213" +
    "\001\002\000\014\004\167\014\171\016\166\046\156\053" +
    "\016\001\002\000\020\004\uffd6\014\uffd6\015\207\016\uffd6" +
    "\017\uffd6\047\uffd6\053\uffd6\001\002\000\020\004\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\047\uffe6\053\uffe6\001\002" +
    "\000\026\004\065\005\064\006\050\007\054\010\053\011" +
    "\063\021\051\023\057\030\060\046\061\001\002\000\050" +
    "\004\167\014\171\016\166\022\112\023\104\024\075\025" +
    "\100\026\103\027\076\031\077\032\110\033\102\034\105" +
    "\035\107\036\074\040\106\041\101\046\156\053\016\001" +
    "\002\000\020\004\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\047\uffe4\053\uffe4\001\002\000\040\022\112\023\104\024" +
    "\075\025\100\026\103\027\076\031\077\032\110\033\102" +
    "\034\105\035\107\036\074\040\106\041\101\045\222\001" +
    "\002\000\014\004\167\014\171\016\166\046\156\053\016" +
    "\001\002\000\020\004\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\047\uffe5\053\uffe5\001\002\000\006\017\uffe8\047\uffe8" +
    "\001\002\000\006\047\uffa3\052\012\001\002\000\004\047" +
    "\uffc4\001\002\000\004\047\uffc3\001\002\000\020\004\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\047\uffd9\053\uffd9\001" +
    "\002\000\020\004\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\047\uffdb\053\uffdb\001\002\000\010\002\ufff3\004\ufff3\053" +
    "\ufff3\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\002\006\003\003\004\004\001\001\000" +
    "\026\005\022\006\023\007\021\010\017\011\016\012\020" +
    "\020\026\021\027\022\025\037\014\001\001\000\006\003" +
    "\013\004\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\156\001\001\000\002" +
    "\001\001\000\026\005\154\006\023\007\021\010\017\011" +
    "\016\012\020\020\026\021\027\022\025\037\014\001\001" +
    "\000\004\044\034\001\001\000\002\001\001\000\004\032" +
    "\132\001\001\000\002\001\001\000\014\011\031\012\020" +
    "\021\027\022\033\037\014\001\001\000\002\001\001\000" +
    "\004\044\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\055\035\127\036\054\001\001\000\010\015" +
    "\043\042\040\043\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\055\035\061\036" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\055\035\121\036" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\034\055\035\070\036\054\041\117\001\001\000\004\033" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\066\001\001\000\012\034\055\035\070\036\054\041" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\110\001\001\000\002\001\001\000\012\034\055\035" +
    "\070\036\054\041\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\055\035\112" +
    "\036\054\001\001\000\002\001\001\000\004\033\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\116" +
    "\043\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\055\035\125\036\054\001" +
    "\001\000\004\033\110\001\001\000\002\001\001\000\004" +
    "\033\110\001\001\000\004\044\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\034\055\035\070\036\054" +
    "\041\134\001\001\000\002\001\001\000\012\011\136\012" +
    "\020\013\137\037\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\143\015\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\146\015\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\151\015\144\001\001\000\002" +
    "\001\001\000\012\011\136\012\020\013\153\037\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\011\157" +
    "\012\020\020\173\021\027\022\025\023\164\024\171\025" +
    "\167\026\161\036\160\037\014\040\172\001\001\000\002" +
    "\001\001\000\004\032\230\001\001\000\004\032\227\001" +
    "\001\000\002\001\001\000\014\032\225\034\055\035\070" +
    "\036\054\041\224\001\001\000\002\001\001\000\030\011" +
    "\157\012\020\020\173\021\027\022\025\023\164\024\223" +
    "\025\167\026\161\036\160\037\014\001\001\000\010\034" +
    "\055\035\216\036\054\001\001\000\004\044\034\001\001" +
    "\000\002\001\001\000\010\034\055\035\202\036\054\001" +
    "\001\000\004\040\177\001\001\000\002\001\001\000\004" +
    "\032\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\055\035\211\036\054\001\001\000\034\011\157\012" +
    "\020\020\173\021\027\022\025\023\204\025\167\026\161" +
    "\027\203\030\205\033\110\036\160\037\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\207\001\001" +
    "\000\032\011\157\012\020\020\173\021\027\022\025\023" +
    "\204\025\167\026\161\027\203\030\210\036\160\037\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\110\001\001\000\032\011\157\012\020\020\173\021\027" +
    "\022\025\023\204\025\167\026\161\027\203\030\213\036" +
    "\160\037\014\001\001\000\004\031\214\001\001\000\002" +
    "\001\001\000\010\034\055\035\220\036\054\001\001\000" +
    "\034\011\157\012\020\020\173\021\027\022\025\023\204" +
    "\025\167\026\161\027\203\030\217\033\110\036\160\037" +
    "\014\001\001\000\002\001\001\000\004\033\110\001\001" +
    "\000\032\011\157\012\020\020\173\021\027\022\025\023" +
    "\204\025\167\026\161\027\203\030\222\036\160\037\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 94. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Program start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // program ::= imports defns 
            {
                Program RESULT = null;
                int Isleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Isright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Imports Is = CUP$parser$stack.elementAt(CUP$parser$top-1).<Imports> value();
                int Dsleft = CUP$parser$stack.peek().left;
                int Dsright = CUP$parser$stack.peek().right;
                Definitions Ds = CUP$parser$stack.peek().<Definitions> value();
                 RESULT = new Program(Is, Ds); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // imports ::= use imports 
            {
                Imports RESULT = null;
                int uleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int uright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Use u = CUP$parser$stack.elementAt(CUP$parser$top-1).<Use> value();
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                Imports It = CUP$parser$stack.peek().<Imports> value();
                 It.prependImport(u); RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // imports ::= 
            {
                Imports RESULT = null;
                 RESULT = new Imports(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // use ::= USE IDENTIFIER semi 
            {
                Use RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                 RESULT = new Use(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // defns ::= definition defns 
            {
                Definitions RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Definition d = CUP$parser$stack.elementAt(CUP$parser$top-1).<Definition> value();
                int Dtleft = CUP$parser$stack.peek().left;
                int Dtright = CUP$parser$stack.peek().right;
                Definitions Dt = CUP$parser$stack.peek().<Definitions> value();
                 Dt.prependDefn(d); RESULT = Dt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("defns",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // defns ::= 
            {
                Definitions RESULT = null;
                 RESULT = new Definitions(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("defns",3, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // decls ::= decl 
            {
                Declarations RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Declaration d = CUP$parser$stack.peek().<Declaration> value();
                 Declarations Ds = new Declarations(); Ds.prependDecl(d); RESULT = Ds; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // decls ::= decl COMMA decls 
            {
                Declarations RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Declaration d = CUP$parser$stack.elementAt(CUP$parser$top-2).<Declaration> value();
                int Dsleft = CUP$parser$stack.peek().left;
                int Dsright = CUP$parser$stack.peek().right;
                Declarations Ds = CUP$parser$stack.peek().<Declarations> value();
                 Ds.prependDecl(d); RESULT = Ds; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // arrayinit ::= IDENTIFIER COLON bracketlst 
            {
                Object RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayinit",29, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // globalDecl ::= IDENTIFIER COLON type 
            {
                Declaration RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new Declaration(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",8, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // decl ::= globalDecl 
            {
                Declaration RESULT = null;
                int gDleft = CUP$parser$stack.peek().left;
                int gDright = CUP$parser$stack.peek().right;
                Declaration gD = CUP$parser$stack.peek().<Declaration> value();
                RESULT = gD;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // decl ::= arrayinit 
            {
                Declaration RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // definition ::= method 
            {
                Definition RESULT = null;
                int mleft = CUP$parser$stack.peek().left;
                int mright = CUP$parser$stack.peek().right;
                Method m = CUP$parser$stack.peek().<Method> value();
                 RESULT = m; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // definition ::= decl semi 
            {
                Definition RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Declaration d = CUP$parser$stack.elementAt(CUP$parser$top-1).<Declaration> value();
                 RESULT = d; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // definition ::= assign semi 
            {
                Definition RESULT = null;
                int aleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object a = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                 RESULT = a; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // abs_meth ::= IDENTIFIER OPEN_PAREN decls CLOSE_PAREN COLON typelst 
            {
                MethodInterface RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-5).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Declarations Ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<Declarations> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                TypeList Ts = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new MethodInterface(id, Ds, Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",5, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // abs_meth ::= IDENTIFIER OPEN_PAREN decls CLOSE_PAREN 
            {
                MethodInterface RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Declarations Ds = CUP$parser$stack.elementAt(CUP$parser$top-1).<Declarations> value();
                 RESULT = new MethodInterface(id, Ds, new TypeList()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",5, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // abs_meth ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN COLON typelst 
            {
                MethodInterface RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                TypeList Ts = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new MethodInterface(id, new Declarations(), Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",5, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // abs_meth ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                MethodInterface RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new MethodInterface(id, new Declarations(), new TypeList()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // assign ::= targets EQUALS vallst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // method ::= abs_meth fnblock 
            {
                Method RESULT = null;
                int amleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int amright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                MethodInterface am = CUP$parser$stack.elementAt(CUP$parser$top-1).<MethodInterface> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Method(am, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // typelst ::= type 
            {
                TypeList RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // typelst ::= type COMMA typelst 
            {
                TypeList RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // statementlst ::= statement 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlst",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // statementlst ::= statement statementlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlst",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // if ::= IF expr block elseopt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // if ::= IF OPEN_PAREN expr CLOSE_PAREN block elseopt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",19, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // while ::= WHILE OPEN_PAREN expr CLOSE_PAREN block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",20, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // while ::= WHILE expr block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // fnblock ::= OPEN_BRACE statementlst CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // fnblock ::= OPEN_BRACE statementlst return CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",21, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // fnblock ::= OPEN_BRACE return CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",21, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // fnblock ::= OPEN_BRACE CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",21, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // block ::= statement 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // block ::= fnblock 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // statement ::= if 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // statement ::= while 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // statement ::= decl semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // statement ::= assign semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // statement ::= fncall semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // fncall ::= IDENTIFIER OPEN_PAREN vallst CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",28, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // fncall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // elseopt ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseopt",23, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // elseopt ::= ELSE block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseopt",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // unop ::= MINUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // unop ::= NOT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // binop ::= PLUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // binop ::= MINUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // binop ::= TIMES 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // binop ::= HIGHTIMES 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // binop ::= DIVIDE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // binop ::= MODULO 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // binop ::= LT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // binop ::= LEQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // binop ::= GT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // binop ::= GEQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // binop ::= EQB 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // binop ::= NEQB 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // binop ::= AND 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // binop ::= OR 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // return ::= RETURN semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",30, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // return ::= RETURN vallst semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // vallst ::= expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("vallst",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // vallst ::= expr COMMA vallst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("vallst",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // type ::= BOOL 
            {
                Type RESULT = null;
                RESULT = Bool();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // type ::= INT 
            {
                Type RESULT = null;
                RESULT = Int();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // type ::= type OPEN_BRACKET CLOSE_BRACKET 
            {
                Type RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                RESULT = Array(t);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // bracketlst ::= nullbrackets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bracketlst",32, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // bracketlst ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bracketlst",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // bracketlst ::= OPEN_BRACKET expr CLOSE_BRACKET bracketlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bracketlst",32, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // nullbrackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("nullbrackets",33, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // nullbrackets ::= OPEN_BRACKET CLOSE_BRACKET nullbrackets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("nullbrackets",33, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // expr ::= expr binop expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // expr ::= unop expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // expr ::= IDENTIFIER 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // expr ::= fncall 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // expr ::= STRING_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // expr ::= INTEGER_LITERAL 
            {
                Object RESULT = null;
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Object l = CUP$parser$stack.peek().<Object> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // expr ::= CHARACTER_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // expr ::= FALSE 
            {
                Object RESULT = null;
                RESULT = BoolLit(false);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // expr ::= TRUE 
            {
                Object RESULT = null;
                RESULT = BoolLit(true);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // expr ::= OPEN_BRACE vallst CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // expr ::= IDENTIFIER idxlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",27, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // idxlst ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("idxlst",34, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // idxlst ::= OPEN_BRACKET expr CLOSE_BRACKET idxlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("idxlst",34, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // target ::= decl 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // target ::= UNDERSCORE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // target ::= IDENTIFIER 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // target ::= IDENTIFIER idxlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",15, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // targets ::= target 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("targets",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // targets ::= target COMMA targets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("targets",16, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // semi ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // semi ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",24, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
