// WARNING: Portions of this file are autogenerated from qt.idl and /home/student/shared/cs4120-2023sp/project/runtime/src/libQtRho//bindqt.h.in.
// Any changes you make here may be lost!
#include "xiobj.h"

#include <QApplication>
#include <QString>
#include <QPointer>

#include <QPoint>
#include <QSize>

#include <QAction>
#include <QButtonGroup>
#include <QCheckBox>
#include <QColor>
#include <QFont>
#include <QFontMetrics>
#include <QGroupBox>
#include <QIcon>
#include <QInputEvent>
#include <QLabel>
#include <QMainWindow>
#include <QMenu>
#include <QMenuBar>
#include <QPainter>
#include <QPen>
#include <QPushButton>
#include <QRadioButton>
#include <QStyle>
#include <QTimer>
#include <QToolBar>
#include <QWidget>

#include <QDialog>
#include <QLineEdit>
#include <QMessageBox>
#include <QTextEdit>
#include <QAbstractSlider>
#include <QScrollBar>
#include <QSlider>

#include <QLayout>
#include <QBoxLayout>
#include <QStackedLayout>

#include <xiqobjectholder.h>
#include <xiqwrapperfactory.h>
#include <xiqproxywidgets.h>
#include <xiqslot.h>

inline int toXi(const QChar& c) {
    return c.unicode();
}

using namespace Qt;

// We need to do some forward decls ourselves, since makebindings won't
struct XiQString;
struct XiQAction;
struct XiQWidget;
struct XiQPixmap;
struct XiQPushButton;
struct XiQColor;
struct XiQBrush;
struct XiQFont;
struct XiQIcon;
struct XiQWidget;
struct XiQLayout;

struct XiAboutToQuitListener;
struct XiTimerListener;
struct XiClickListener;
struct XiActionListener;
struct XiToggleListener;

typedef QStyle::StandardPixmap StandardIcon;
struct XiStandardIcon;


struct XiQApplication_vtable;
struct XiQApplication: public Xiobj
{
    XiQApplication_vtable* vtable();
    XiQApplication();
    QApplication* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QApplication wrappedType;
    XiQObjectHolder<QApplication> handle;
    XiQApplicationSigs* sig;
    xiqEventListenerList<XiAboutToQuitListener> quitListeners;

    QApplication* getImpl() {
        return handle.get();
    }

    void createImpl() {
        assert(false);
    }

    void setObject(QApplication* a) {
        handle.setObject(a, this);
        sig = new XiQApplicationSigs(this, a);
    }

    ~XiQApplication() {
        delete sig;
    }
    static void exec(XiQApplication* __thisPtr);
    static void quit(XiQApplication* __thisPtr);
    static void closeAllWindows(XiQApplication* __thisPtr);
    static XiQString* styleSheet(XiQApplication* __thisPtr);
    static void setStyleSheet(XiQApplication* __thisPtr, XiQString* sheet);
    static XiQIcon* windowIcon(XiQApplication* __thisPtr);
    static void setWindowIcon(XiQApplication* __thisPtr, XiQIcon* param0);
    static XiQFont* font(XiQApplication* __thisPtr);
    static void setFont(XiQApplication* __thisPtr, XiQFont* param0);
    static void addAboutToQuitListener(XiQApplication* __thisPtr, XiAboutToQuitListener* l);
};

ETA_EXPORT void ETA(QApplication__exec_pr12QApplication)(XiQApplication* self);
ETA_EXPORT void ETA(QApplication__quit_pr12QApplication)(XiQApplication* self);
ETA_EXPORT void ETA(QApplication__closeAllWindows_pr12QApplication)(XiQApplication* self);
ETA_EXPORT XiQString* ETA(QApplication__styleSheet_r7QStringr12QApplication)(XiQApplication* self);
ETA_EXPORT void ETA(QApplication__setStyleSheet_pr12QApplicationr7QString)(XiQApplication* self, XiQString* sheet);
ETA_EXPORT XiQIcon* ETA(QApplication__windowIcon_r5QIconr12QApplication)(XiQApplication* self);
ETA_EXPORT void ETA(QApplication__setWindowIcon_pr12QApplicationr5QIcon)(XiQApplication* self, XiQIcon* param0);
ETA_EXPORT XiQFont* ETA(QApplication__font_r5QFontr12QApplication)(XiQApplication* self);
ETA_EXPORT void ETA(QApplication__setFont_pr12QApplicationr5QFont)(XiQApplication* self, XiQFont* param0);
ETA_EXPORT void ETA(QApplication__addAboutToQuitListener_pr12QApplicationr19AboutToQuitListener)(XiQApplication* self, XiAboutToQuitListener* l);

using XiQApplicationDerived = XiQApplication_vtable;

ETA_EXPORT XiQApplicationDerived* ETA(QApplication__extend_r19QApplicationDerived)();
ETA_EXPORT void ETA(QApplication__downcast_pr12QApplicationr19QApplicationDerived)(XiQApplication* self, XiQApplicationDerived* derived);

ETA_EXPORT void ETA(QApplication__override__exec_pr19QApplicationDerivedai)(XiQApplicationDerived* derived, void* name);
ETA_EXPORT void ETA(QApplication__override__quit_pr19QApplicationDerivedai)(XiQApplicationDerived* derived, void* name);
ETA_EXPORT void ETA(QApplication__override__closeAllWindows_pr19QApplicationDerivedai)(XiQApplicationDerived* derived, void* name);
ETA_EXPORT void ETA(QApplication__override__styleSheet_pr19QApplicationDerivedai)(XiQApplicationDerived* derived, void* name);
ETA_EXPORT void ETA(QApplication__override__setStyleSheet_pr19QApplicationDerivedai)(XiQApplicationDerived* derived, void* name);
ETA_EXPORT void ETA(QApplication__override__windowIcon_pr19QApplicationDerivedai)(XiQApplicationDerived* derived, void* name);
ETA_EXPORT void ETA(QApplication__override__setWindowIcon_pr19QApplicationDerivedai)(XiQApplicationDerived* derived, void* name);
ETA_EXPORT void ETA(QApplication__override__font_pr19QApplicationDerivedai)(XiQApplicationDerived* derived, void* name);
ETA_EXPORT void ETA(QApplication__override__setFont_pr19QApplicationDerivedai)(XiQApplicationDerived* derived, void* name);
ETA_EXPORT void ETA(QApplication__override__addAboutToQuitListener_pr19QApplicationDerivedai)(XiQApplicationDerived* derived, void* name);

ETA_EXPORT XiQApplication* ETA(qapplication__alloc_r12QApplication)();

inline QApplication* fromXi(XiQApplication* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQApplication_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    void (*exec)(XiQApplication*);
    void (*quit)(XiQApplication*);
    void (*closeAllWindows)(XiQApplication*);
    XiQString* (*styleSheet)(XiQApplication*);
    void (*setStyleSheet)(XiQApplication*, XiQString*);
    XiQIcon* (*windowIcon)(XiQApplication*);
    void (*setWindowIcon)(XiQApplication*, XiQIcon*);
    XiQFont* (*font)(XiQApplication*);
    void (*setFont)(XiQApplication*, XiQFont*);
    void (*addAboutToQuitListener)(XiQApplication*, XiAboutToQuitListener*);
};

inline XiQApplication_vtable* XiQApplication::vtable() {
    return static_cast<XiQApplication_vtable*>(vptr);
}

extern XiQApplication_vtable ETA(_vt_QApplication);
extern int ETA(_size_QApplication);
ETA_EXPORT void ETA(_init_QApplication)() __attribute__((constructor));




struct XiAboutToQuitListener_vtable;
struct XiAboutToQuitListener: public Xiobj
{
    XiAboutToQuitListener_vtable* vtable();
    XiAboutToQuitListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiAboutToQuitListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiAboutToQuitListener* me = static_cast<XiAboutToQuitListener*>(mePtr);
        if (me->initialized)
            me->~XiAboutToQuitListener();
    }

    static void aboutToQuit(XiAboutToQuitListener* __thisPtr);
};

ETA_EXPORT void ETA(AboutToQuitListener__aboutToQuit_pr19AboutToQuitListener)(XiAboutToQuitListener* self);

using XiAboutToQuitListenerDerived = XiAboutToQuitListener_vtable;

ETA_EXPORT XiAboutToQuitListenerDerived* ETA(AboutToQuitListener__extend_r26AboutToQuitListenerDerived)();
ETA_EXPORT void ETA(AboutToQuitListener__downcast_pr19AboutToQuitListenerr26AboutToQuitListenerDerived)(XiAboutToQuitListener* self, XiAboutToQuitListenerDerived* derived);

ETA_EXPORT void ETA(AboutToQuitListener__override__aboutToQuit_pr26AboutToQuitListenerDerivedai)(XiAboutToQuitListenerDerived* derived, void* name);

ETA_EXPORT XiAboutToQuitListener* ETA(abouttoquitlistener__alloc_r19AboutToQuitListener)();

struct XiAboutToQuitListener_vtable: public Xivtable
{
    void* reserved;
    void (*aboutToQuit)(XiAboutToQuitListener*);
};

inline XiAboutToQuitListener_vtable* XiAboutToQuitListener::vtable() {
    return static_cast<XiAboutToQuitListener_vtable*>(vptr);
}

extern XiAboutToQuitListener_vtable ETA(_vt_AboutToQuitListener);
extern int ETA(_size_AboutToQuitListener);
ETA_EXPORT void ETA(_init_AboutToQuitListener)() __attribute__((constructor));



ETA_EXPORT XiQApplication* ETA(qapplication_t2r12QApplicationaaiaai)(int64_t** args);


struct XiQString_vtable;
struct XiQString: public Xiobj
{
    XiQString_vtable* vtable();
    XiQString();
    QString value;
    QString* impl() {
        if (!initialized) 
            new (this) XiQString();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQString* me = static_cast<XiQString*>(mePtr);
        if (me->initialized)
            me->~XiQString();
    }

    static void* RhoString(XiQString* __thisPtr);
    static void append(XiQString* __thisPtr, XiQString* other);
    static int at(XiQString* __thisPtr, int pos);
    static void chop(XiQString* __thisPtr, int n);
    static void clear(XiQString* __thisPtr);
    static int compare(XiQString* __thisPtr, XiQString* other);
    static bool contains(XiQString* __thisPtr, XiQString* other);
    static bool containsCI(XiQString* __thisPtr, XiQString* other);
    static int count(XiQString* __thisPtr, XiQString* other);
    static int countCI(XiQString* __thisPtr, XiQString* other);
    static bool endsWith(XiQString* __thisPtr, XiQString* other);
    static int indexOf(XiQString* __thisPtr, XiQString* other, int from);
    static int indexOfCI(XiQString* __thisPtr, XiQString* other, int from);
    static void insert(XiQString* __thisPtr, int pos, XiQString* str);
    static bool isEmpty(XiQString* __thisPtr);
    static XiQString* left(XiQString* __thisPtr, int n);
    static int getLength(XiQString* __thisPtr);
    static XiQString* mid(XiQString* __thisPtr, int pos, int n);
    static void prepend(XiQString* __thisPtr, XiQString* other);
    static void remove(XiQString* __thisPtr, int position, int n);
    static XiQString* repeated(XiQString* __thisPtr, int n);
    static void replace(XiQString* __thisPtr, XiQString* before, XiQString* after);
    static void replaceCI(XiQString* __thisPtr, XiQString* before, XiQString* after);
    static XiQString* right(XiQString* __thisPtr, int n);
    static void setNum(XiQString* __thisPtr, int num);
    static XiQString* simplified(XiQString* __thisPtr);
    static void* split(XiQString* __thisPtr, XiQString* separator);
    static bool startsWith(XiQString* __thisPtr, XiQString* other);
    static XiQString* toLower(XiQString* __thisPtr);
    static XiQString* toUpper(XiQString* __thisPtr);
    static XiQString* trimmed(XiQString* __thisPtr);
    static void truncate(XiQString* __thisPtr, int n);
    static XiQString* plus(XiQString* __thisPtr, XiQString* other);
    static bool equals(XiQString* __thisPtr, XiQString* other);
    static bool neq(XiQString* __thisPtr, XiQString* other);
    static bool less(XiQString* __thisPtr, XiQString* other);
    static bool leq(XiQString* __thisPtr, XiQString* other);
    static bool greater(XiQString* __thisPtr, XiQString* other);
    static bool geq(XiQString* __thisPtr, XiQString* other);
};

ETA_EXPORT void* ETA(QString__RhoString_air7QString)(XiQString* self);
ETA_EXPORT void ETA(QString__append_pr7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT int ETA(QString__at_ir7QStringi)(XiQString* self, int pos);
ETA_EXPORT void ETA(QString__chop_pr7QStringi)(XiQString* self, int n);
ETA_EXPORT void ETA(QString__clear_pr7QString)(XiQString* self);
ETA_EXPORT int ETA(QString__compare_ir7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT bool ETA(QString__contains_br7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT bool ETA(QString__containsCI_br7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT int ETA(QString__count_ir7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT int ETA(QString__countCI_ir7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT bool ETA(QString__endsWith_br7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT int ETA(QString__indexOf_ir7QStringr7QStringi)(XiQString* self, XiQString* other, int from);
ETA_EXPORT int ETA(QString__indexOfCI_ir7QStringr7QStringi)(XiQString* self, XiQString* other, int from);
ETA_EXPORT void ETA(QString__insert_pr7QStringir7QString)(XiQString* self, int pos, XiQString* str);
ETA_EXPORT bool ETA(QString__isEmpty_br7QString)(XiQString* self);
ETA_EXPORT XiQString* ETA(QString__left_r7QStringr7QStringi)(XiQString* self, int n);
ETA_EXPORT int ETA(QString__getLength_ir7QString)(XiQString* self);
ETA_EXPORT XiQString* ETA(QString__mid_r7QStringr7QStringii)(XiQString* self, int pos, int n);
ETA_EXPORT void ETA(QString__prepend_pr7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT void ETA(QString__remove_pr7QStringii)(XiQString* self, int position, int n);
ETA_EXPORT XiQString* ETA(QString__repeated_r7QStringr7QStringi)(XiQString* self, int n);
ETA_EXPORT void ETA(QString__replace_pr7QStringr7QStringr7QString)(XiQString* self, XiQString* before, XiQString* after);
ETA_EXPORT void ETA(QString__replaceCI_pr7QStringr7QStringr7QString)(XiQString* self, XiQString* before, XiQString* after);
ETA_EXPORT XiQString* ETA(QString__right_r7QStringr7QStringi)(XiQString* self, int n);
ETA_EXPORT void ETA(QString__setNum_pr7QStringi)(XiQString* self, int num);
ETA_EXPORT XiQString* ETA(QString__simplified_r7QStringr7QString)(XiQString* self);
ETA_EXPORT void* ETA(QString__split_ar7QStringr7QStringr7QString)(XiQString* self, XiQString* separator);
ETA_EXPORT bool ETA(QString__startsWith_br7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT XiQString* ETA(QString__toLower_r7QStringr7QString)(XiQString* self);
ETA_EXPORT XiQString* ETA(QString__toUpper_r7QStringr7QString)(XiQString* self);
ETA_EXPORT XiQString* ETA(QString__trimmed_r7QStringr7QString)(XiQString* self);
ETA_EXPORT void ETA(QString__truncate_pr7QStringi)(XiQString* self, int n);
ETA_EXPORT XiQString* ETA(QString__plus_r7QStringr7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT bool ETA(QString__equals_br7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT bool ETA(QString__neq_br7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT bool ETA(QString__less_br7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT bool ETA(QString__leq_br7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT bool ETA(QString__greater_br7QStringr7QString)(XiQString* self, XiQString* other);
ETA_EXPORT bool ETA(QString__geq_br7QStringr7QString)(XiQString* self, XiQString* other);

using XiQStringDerived = XiQString_vtable;

ETA_EXPORT XiQStringDerived* ETA(QString__extend_r14QStringDerived)();
ETA_EXPORT void ETA(QString__downcast_pr7QStringr14QStringDerived)(XiQString* self, XiQStringDerived* derived);

ETA_EXPORT void ETA(QString__override__RhoString_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__append_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__at_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__chop_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__clear_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__compare_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__contains_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__containsCI_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__count_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__countCI_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__endsWith_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__indexOf_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__indexOfCI_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__insert_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__isEmpty_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__left_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__getLength_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__mid_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__prepend_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__remove_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__repeated_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__replace_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__replaceCI_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__right_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__setNum_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__simplified_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__split_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__startsWith_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__toLower_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__toUpper_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__trimmed_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__truncate_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__plus_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__equals_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__neq_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__less_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__leq_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__greater_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);
ETA_EXPORT void ETA(QString__override__geq_pr14QStringDerivedai)(XiQStringDerived* derived, void* name);

ETA_EXPORT XiQString* ETA(qstring__alloc_r7QString)();

inline XiQString* toXi(const QString& orig) {
    XiQString* r = gcNew<XiQString>();
    r->value = orig;
    return r;
}

inline QString fromXi(XiQString* wrapped) {
    return *wrapped->impl();
}

struct XiQString_vtable: public Xivtable
{
    void* reserved;
    void* (*RhoString)(XiQString*);
    void (*append)(XiQString*, XiQString*);
    int (*at)(XiQString*, int);
    void (*chop)(XiQString*, int);
    void (*clear)(XiQString*);
    int (*compare)(XiQString*, XiQString*);
    bool (*contains)(XiQString*, XiQString*);
    bool (*containsCI)(XiQString*, XiQString*);
    int (*count)(XiQString*, XiQString*);
    int (*countCI)(XiQString*, XiQString*);
    bool (*endsWith)(XiQString*, XiQString*);
    int (*indexOf)(XiQString*, XiQString*, int);
    int (*indexOfCI)(XiQString*, XiQString*, int);
    void (*insert)(XiQString*, int, XiQString*);
    bool (*isEmpty)(XiQString*);
    XiQString* (*left)(XiQString*, int);
    int (*getLength)(XiQString*);
    XiQString* (*mid)(XiQString*, int, int);
    void (*prepend)(XiQString*, XiQString*);
    void (*remove)(XiQString*, int, int);
    XiQString* (*repeated)(XiQString*, int);
    void (*replace)(XiQString*, XiQString*, XiQString*);
    void (*replaceCI)(XiQString*, XiQString*, XiQString*);
    XiQString* (*right)(XiQString*, int);
    void (*setNum)(XiQString*, int);
    XiQString* (*simplified)(XiQString*);
    void* (*split)(XiQString*, XiQString*);
    bool (*startsWith)(XiQString*, XiQString*);
    XiQString* (*toLower)(XiQString*);
    XiQString* (*toUpper)(XiQString*);
    XiQString* (*trimmed)(XiQString*);
    void (*truncate)(XiQString*, int);
    XiQString* (*plus)(XiQString*, XiQString*);
    bool (*equals)(XiQString*, XiQString*);
    bool (*neq)(XiQString*, XiQString*);
    bool (*less)(XiQString*, XiQString*);
    bool (*leq)(XiQString*, XiQString*);
    bool (*greater)(XiQString*, XiQString*);
    bool (*geq)(XiQString*, XiQString*);
};

inline XiQString_vtable* XiQString::vtable() {
    return static_cast<XiQString_vtable*>(vptr);
}

extern XiQString_vtable ETA(_vt_QString);
extern int ETA(_size_QString);
ETA_EXPORT void ETA(_init_QString)() __attribute__((constructor));


ETA_EXPORT XiQString* ETA(qs_r7QStringai)(void* istr);
ETA_EXPORT XiQString* ETA(qsNum_r7QStringi)(int num);


struct XiQPoint_vtable;
struct XiQPoint: public Xiobj
{
    XiQPoint_vtable* vtable();
    XiQPoint();
    QPoint value;
    QPoint* impl() {
        if (!initialized) 
            new (this) XiQPoint();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQPoint* me = static_cast<XiQPoint*>(mePtr);
        if (me->initialized)
            me->~XiQPoint();
    }

    static int x(XiQPoint* __thisPtr);
    static int y(XiQPoint* __thisPtr);
    static void setX(XiQPoint* __thisPtr, int param0);
    static void setY(XiQPoint* __thisPtr, int param0);
    static XiQPoint* plus(XiQPoint* __thisPtr, XiQPoint* other);
    static XiQPoint* minus(XiQPoint* __thisPtr, XiQPoint* other);
    static bool equals(XiQPoint* __thisPtr, XiQPoint* other);
    static bool neq(XiQPoint* __thisPtr, XiQPoint* other);
};

ETA_EXPORT int ETA(QPoint__x_ir6QPoint)(XiQPoint* self);
ETA_EXPORT int ETA(QPoint__y_ir6QPoint)(XiQPoint* self);
ETA_EXPORT void ETA(QPoint__setX_pr6QPointi)(XiQPoint* self, int param0);
ETA_EXPORT void ETA(QPoint__setY_pr6QPointi)(XiQPoint* self, int param0);
ETA_EXPORT XiQPoint* ETA(QPoint__plus_r6QPointr6QPointr6QPoint)(XiQPoint* self, XiQPoint* other);
ETA_EXPORT XiQPoint* ETA(QPoint__minus_r6QPointr6QPointr6QPoint)(XiQPoint* self, XiQPoint* other);
ETA_EXPORT bool ETA(QPoint__equals_br6QPointr6QPoint)(XiQPoint* self, XiQPoint* other);
ETA_EXPORT bool ETA(QPoint__neq_br6QPointr6QPoint)(XiQPoint* self, XiQPoint* other);

using XiQPointDerived = XiQPoint_vtable;

ETA_EXPORT XiQPointDerived* ETA(QPoint__extend_r13QPointDerived)();
ETA_EXPORT void ETA(QPoint__downcast_pr6QPointr13QPointDerived)(XiQPoint* self, XiQPointDerived* derived);

ETA_EXPORT void ETA(QPoint__override__x_pr13QPointDerivedai)(XiQPointDerived* derived, void* name);
ETA_EXPORT void ETA(QPoint__override__y_pr13QPointDerivedai)(XiQPointDerived* derived, void* name);
ETA_EXPORT void ETA(QPoint__override__setX_pr13QPointDerivedai)(XiQPointDerived* derived, void* name);
ETA_EXPORT void ETA(QPoint__override__setY_pr13QPointDerivedai)(XiQPointDerived* derived, void* name);
ETA_EXPORT void ETA(QPoint__override__plus_pr13QPointDerivedai)(XiQPointDerived* derived, void* name);
ETA_EXPORT void ETA(QPoint__override__minus_pr13QPointDerivedai)(XiQPointDerived* derived, void* name);
ETA_EXPORT void ETA(QPoint__override__equals_pr13QPointDerivedai)(XiQPointDerived* derived, void* name);
ETA_EXPORT void ETA(QPoint__override__neq_pr13QPointDerivedai)(XiQPointDerived* derived, void* name);

ETA_EXPORT XiQPoint* ETA(qpoint__alloc_r6QPoint)();

inline XiQPoint* toXi(const QPoint& orig) {
    XiQPoint* r = gcNew<XiQPoint>();
    r->value = orig;
    return r;
}

inline QPoint fromXi(XiQPoint* wrapped) {
    return *wrapped->impl();
}

struct XiQPoint_vtable: public Xivtable
{
    void* reserved;
    int (*x)(XiQPoint*);
    int (*y)(XiQPoint*);
    void (*setX)(XiQPoint*, int);
    void (*setY)(XiQPoint*, int);
    XiQPoint* (*plus)(XiQPoint*, XiQPoint*);
    XiQPoint* (*minus)(XiQPoint*, XiQPoint*);
    bool (*equals)(XiQPoint*, XiQPoint*);
    bool (*neq)(XiQPoint*, XiQPoint*);
};

inline XiQPoint_vtable* XiQPoint::vtable() {
    return static_cast<XiQPoint_vtable*>(vptr);
}

extern XiQPoint_vtable ETA(_vt_QPoint);
extern int ETA(_size_QPoint);
ETA_EXPORT void ETA(_init_QPoint)() __attribute__((constructor));


ETA_EXPORT XiQPoint* ETA(qpoint_r6QPointii)(int x, int y);


struct XiQSize_vtable;
struct XiQSize: public Xiobj
{
    XiQSize_vtable* vtable();
    XiQSize();
    QSize value;
    QSize* impl() {
        if (!initialized) 
            new (this) XiQSize();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQSize* me = static_cast<XiQSize*>(mePtr);
        if (me->initialized)
            me->~XiQSize();
    }

    static XiQSize* boundedTo(XiQSize* __thisPtr, XiQSize* other);
    static XiQSize* expandedTo(XiQSize* __thisPtr, XiQSize* other);
    static bool isEmpty(XiQSize* __thisPtr);
    static bool isNull(XiQSize* __thisPtr);
    static bool isValid(XiQSize* __thisPtr);
    static void setHeight(XiQSize* __thisPtr, int param0);
    static void setWidth(XiQSize* __thisPtr, int param0);
    static void transpose(XiQSize* __thisPtr);
    static int width(XiQSize* __thisPtr);
    static int height(XiQSize* __thisPtr);
    static XiQSize* plus(XiQSize* __thisPtr, XiQSize* other);
    static XiQSize* minus(XiQSize* __thisPtr, XiQSize* other);
    static bool equals(XiQSize* __thisPtr, XiQSize* other);
    static bool neq(XiQSize* __thisPtr, XiQSize* other);
};

ETA_EXPORT XiQSize* ETA(QSize__boundedTo_r5QSizer5QSizer5QSize)(XiQSize* self, XiQSize* other);
ETA_EXPORT XiQSize* ETA(QSize__expandedTo_r5QSizer5QSizer5QSize)(XiQSize* self, XiQSize* other);
ETA_EXPORT bool ETA(QSize__isEmpty_br5QSize)(XiQSize* self);
ETA_EXPORT bool ETA(QSize__isNull_br5QSize)(XiQSize* self);
ETA_EXPORT bool ETA(QSize__isValid_br5QSize)(XiQSize* self);
ETA_EXPORT void ETA(QSize__setHeight_pr5QSizei)(XiQSize* self, int param0);
ETA_EXPORT void ETA(QSize__setWidth_pr5QSizei)(XiQSize* self, int param0);
ETA_EXPORT void ETA(QSize__transpose_pr5QSize)(XiQSize* self);
ETA_EXPORT int ETA(QSize__width_ir5QSize)(XiQSize* self);
ETA_EXPORT int ETA(QSize__height_ir5QSize)(XiQSize* self);
ETA_EXPORT XiQSize* ETA(QSize__plus_r5QSizer5QSizer5QSize)(XiQSize* self, XiQSize* other);
ETA_EXPORT XiQSize* ETA(QSize__minus_r5QSizer5QSizer5QSize)(XiQSize* self, XiQSize* other);
ETA_EXPORT bool ETA(QSize__equals_br5QSizer5QSize)(XiQSize* self, XiQSize* other);
ETA_EXPORT bool ETA(QSize__neq_br5QSizer5QSize)(XiQSize* self, XiQSize* other);

using XiQSizeDerived = XiQSize_vtable;

ETA_EXPORT XiQSizeDerived* ETA(QSize__extend_r12QSizeDerived)();
ETA_EXPORT void ETA(QSize__downcast_pr5QSizer12QSizeDerived)(XiQSize* self, XiQSizeDerived* derived);

ETA_EXPORT void ETA(QSize__override__boundedTo_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__expandedTo_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__isEmpty_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__isNull_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__isValid_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__setHeight_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__setWidth_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__transpose_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__width_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__height_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__plus_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__minus_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__equals_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);
ETA_EXPORT void ETA(QSize__override__neq_pr12QSizeDerivedai)(XiQSizeDerived* derived, void* name);

ETA_EXPORT XiQSize* ETA(qsize__alloc_r5QSize)();

inline XiQSize* toXi(const QSize& orig) {
    XiQSize* r = gcNew<XiQSize>();
    r->value = orig;
    return r;
}

inline QSize fromXi(XiQSize* wrapped) {
    return *wrapped->impl();
}

struct XiQSize_vtable: public Xivtable
{
    void* reserved;
    XiQSize* (*boundedTo)(XiQSize*, XiQSize*);
    XiQSize* (*expandedTo)(XiQSize*, XiQSize*);
    bool (*isEmpty)(XiQSize*);
    bool (*isNull)(XiQSize*);
    bool (*isValid)(XiQSize*);
    void (*setHeight)(XiQSize*, int);
    void (*setWidth)(XiQSize*, int);
    void (*transpose)(XiQSize*);
    int (*width)(XiQSize*);
    int (*height)(XiQSize*);
    XiQSize* (*plus)(XiQSize*, XiQSize*);
    XiQSize* (*minus)(XiQSize*, XiQSize*);
    bool (*equals)(XiQSize*, XiQSize*);
    bool (*neq)(XiQSize*, XiQSize*);
};

inline XiQSize_vtable* XiQSize::vtable() {
    return static_cast<XiQSize_vtable*>(vptr);
}

extern XiQSize_vtable ETA(_vt_QSize);
extern int ETA(_size_QSize);
ETA_EXPORT void ETA(_init_QSize)() __attribute__((constructor));


ETA_EXPORT XiQSize* ETA(qsize_r5QSizeii)(int w, int h);


struct XiQRect_vtable;
struct XiQRect: public Xiobj
{
    XiQRect_vtable* vtable();
    XiQRect();
    QRect value;
    QRect* impl() {
        if (!initialized) 
            new (this) XiQRect();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQRect* me = static_cast<XiQRect*>(mePtr);
        if (me->initialized)
            me->~XiQRect();
    }

    static void adjust(XiQRect* __thisPtr, int dx1, int dy1, int dx2, int dy2);
    static XiQRect* adjusted(XiQRect* __thisPtr, int dx1, int dy1, int dx2, int dy2);
    static int bottom(XiQRect* __thisPtr);
    static XiQPoint* bottomLeft(XiQRect* __thisPtr);
    static XiQPoint* bottomRight(XiQRect* __thisPtr);
    static XiQPoint* center(XiQRect* __thisPtr);
    static bool contains(XiQRect* __thisPtr, XiQPoint* param0);
    static int height(XiQRect* __thisPtr);
    static XiQRect* intersected(XiQRect* __thisPtr, XiQRect* other);
    static bool intersects(XiQRect* __thisPtr, XiQRect* other);
    static bool isEmpty(XiQRect* __thisPtr);
    static int left(XiQRect* __thisPtr);
    static void moveBottom(XiQRect* __thisPtr, int y);
    static void moveBottomLeft(XiQRect* __thisPtr, XiQPoint* p);
    static void moveBottomRight(XiQRect* __thisPtr, XiQPoint* p);
    static void moveCenter(XiQRect* __thisPtr, XiQPoint* p);
    static void moveLeft(XiQRect* __thisPtr, int x);
    static void moveRight(XiQRect* __thisPtr, int x);
    static void moveTo(XiQRect* __thisPtr, XiQPoint* p);
    static void moveTop(XiQRect* __thisPtr, int y);
    static void moveTopLeft(XiQRect* __thisPtr, XiQPoint* p);
    static void moveTopRight(XiQRect* __thisPtr, XiQPoint* p);
    static XiQRect* normalized(XiQRect* __thisPtr);
    static int right(XiQRect* __thisPtr);
    static void setBottom(XiQRect* __thisPtr, int y);
    static void setBottomLeft(XiQRect* __thisPtr, XiQPoint* p);
    static void setBottomRight(XiQRect* __thisPtr, XiQPoint* p);
    static void setCoords(XiQRect* __thisPtr, int x1, int y1, int x2, int y2);
    static void setHeight(XiQRect* __thisPtr, int h);
    static void setLeft(XiQRect* __thisPtr, int x);
    static void setRect(XiQRect* __thisPtr, int x, int y, int w, int h);
    static void setRight(XiQRect* __thisPtr, int x);
    static void setSize(XiQRect* __thisPtr, XiQSize* size);
    static void setTop(XiQRect* __thisPtr, int y);
    static void setTopLeft(XiQRect* __thisPtr, XiQPoint* p);
    static void setTopRight(XiQRect* __thisPtr, XiQPoint* p);
    static void setWidth(XiQRect* __thisPtr, int w);
    static void setX(XiQRect* __thisPtr, int x);
    static void setY(XiQRect* __thisPtr, int y);
    static XiQSize* size(XiQRect* __thisPtr);
    static int top(XiQRect* __thisPtr);
    static XiQPoint* topLeft(XiQRect* __thisPtr);
    static XiQPoint* topRight(XiQRect* __thisPtr);
    static void translate(XiQRect* __thisPtr, int dx, int y);
    static XiQRect* translated(XiQRect* __thisPtr, int dx, int dy);
    static XiQRect* united(XiQRect* __thisPtr, XiQRect* other);
    static int width(XiQRect* __thisPtr);
    static int x(XiQRect* __thisPtr);
    static int y(XiQRect* __thisPtr);
    static bool equals(XiQRect* __thisPtr, XiQRect* other);
    static bool neq(XiQRect* __thisPtr, XiQRect* other);
};

ETA_EXPORT void ETA(QRect__adjust_pr5QRectiiii)(XiQRect* self, int dx1, int dy1, int dx2, int dy2);
ETA_EXPORT XiQRect* ETA(QRect__adjusted_r5QRectr5QRectiiii)(XiQRect* self, int dx1, int dy1, int dx2, int dy2);
ETA_EXPORT int ETA(QRect__bottom_ir5QRect)(XiQRect* self);
ETA_EXPORT XiQPoint* ETA(QRect__bottomLeft_r6QPointr5QRect)(XiQRect* self);
ETA_EXPORT XiQPoint* ETA(QRect__bottomRight_r6QPointr5QRect)(XiQRect* self);
ETA_EXPORT XiQPoint* ETA(QRect__center_r6QPointr5QRect)(XiQRect* self);
ETA_EXPORT bool ETA(QRect__contains_br5QRectr6QPoint)(XiQRect* self, XiQPoint* param0);
ETA_EXPORT int ETA(QRect__height_ir5QRect)(XiQRect* self);
ETA_EXPORT XiQRect* ETA(QRect__intersected_r5QRectr5QRectr5QRect)(XiQRect* self, XiQRect* other);
ETA_EXPORT bool ETA(QRect__intersects_br5QRectr5QRect)(XiQRect* self, XiQRect* other);
ETA_EXPORT bool ETA(QRect__isEmpty_br5QRect)(XiQRect* self);
ETA_EXPORT int ETA(QRect__left_ir5QRect)(XiQRect* self);
ETA_EXPORT void ETA(QRect__moveBottom_pr5QRecti)(XiQRect* self, int y);
ETA_EXPORT void ETA(QRect__moveBottomLeft_pr5QRectr6QPoint)(XiQRect* self, XiQPoint* p);
ETA_EXPORT void ETA(QRect__moveBottomRight_pr5QRectr6QPoint)(XiQRect* self, XiQPoint* p);
ETA_EXPORT void ETA(QRect__moveCenter_pr5QRectr6QPoint)(XiQRect* self, XiQPoint* p);
ETA_EXPORT void ETA(QRect__moveLeft_pr5QRecti)(XiQRect* self, int x);
ETA_EXPORT void ETA(QRect__moveRight_pr5QRecti)(XiQRect* self, int x);
ETA_EXPORT void ETA(QRect__moveTo_pr5QRectr6QPoint)(XiQRect* self, XiQPoint* p);
ETA_EXPORT void ETA(QRect__moveTop_pr5QRecti)(XiQRect* self, int y);
ETA_EXPORT void ETA(QRect__moveTopLeft_pr5QRectr6QPoint)(XiQRect* self, XiQPoint* p);
ETA_EXPORT void ETA(QRect__moveTopRight_pr5QRectr6QPoint)(XiQRect* self, XiQPoint* p);
ETA_EXPORT XiQRect* ETA(QRect__normalized_r5QRectr5QRect)(XiQRect* self);
ETA_EXPORT int ETA(QRect__right_ir5QRect)(XiQRect* self);
ETA_EXPORT void ETA(QRect__setBottom_pr5QRecti)(XiQRect* self, int y);
ETA_EXPORT void ETA(QRect__setBottomLeft_pr5QRectr6QPoint)(XiQRect* self, XiQPoint* p);
ETA_EXPORT void ETA(QRect__setBottomRight_pr5QRectr6QPoint)(XiQRect* self, XiQPoint* p);
ETA_EXPORT void ETA(QRect__setCoords_pr5QRectiiii)(XiQRect* self, int x1, int y1, int x2, int y2);
ETA_EXPORT void ETA(QRect__setHeight_pr5QRecti)(XiQRect* self, int h);
ETA_EXPORT void ETA(QRect__setLeft_pr5QRecti)(XiQRect* self, int x);
ETA_EXPORT void ETA(QRect__setRect_pr5QRectiiii)(XiQRect* self, int x, int y, int w, int h);
ETA_EXPORT void ETA(QRect__setRight_pr5QRecti)(XiQRect* self, int x);
ETA_EXPORT void ETA(QRect__setSize_pr5QRectr5QSize)(XiQRect* self, XiQSize* size);
ETA_EXPORT void ETA(QRect__setTop_pr5QRecti)(XiQRect* self, int y);
ETA_EXPORT void ETA(QRect__setTopLeft_pr5QRectr6QPoint)(XiQRect* self, XiQPoint* p);
ETA_EXPORT void ETA(QRect__setTopRight_pr5QRectr6QPoint)(XiQRect* self, XiQPoint* p);
ETA_EXPORT void ETA(QRect__setWidth_pr5QRecti)(XiQRect* self, int w);
ETA_EXPORT void ETA(QRect__setX_pr5QRecti)(XiQRect* self, int x);
ETA_EXPORT void ETA(QRect__setY_pr5QRecti)(XiQRect* self, int y);
ETA_EXPORT XiQSize* ETA(QRect__size_r5QSizer5QRect)(XiQRect* self);
ETA_EXPORT int ETA(QRect__top_ir5QRect)(XiQRect* self);
ETA_EXPORT XiQPoint* ETA(QRect__topLeft_r6QPointr5QRect)(XiQRect* self);
ETA_EXPORT XiQPoint* ETA(QRect__topRight_r6QPointr5QRect)(XiQRect* self);
ETA_EXPORT void ETA(QRect__translate_pr5QRectii)(XiQRect* self, int dx, int y);
ETA_EXPORT XiQRect* ETA(QRect__translated_r5QRectr5QRectii)(XiQRect* self, int dx, int dy);
ETA_EXPORT XiQRect* ETA(QRect__united_r5QRectr5QRectr5QRect)(XiQRect* self, XiQRect* other);
ETA_EXPORT int ETA(QRect__width_ir5QRect)(XiQRect* self);
ETA_EXPORT int ETA(QRect__x_ir5QRect)(XiQRect* self);
ETA_EXPORT int ETA(QRect__y_ir5QRect)(XiQRect* self);
ETA_EXPORT bool ETA(QRect__equals_br5QRectr5QRect)(XiQRect* self, XiQRect* other);
ETA_EXPORT bool ETA(QRect__neq_br5QRectr5QRect)(XiQRect* self, XiQRect* other);

using XiQRectDerived = XiQRect_vtable;

ETA_EXPORT XiQRectDerived* ETA(QRect__extend_r12QRectDerived)();
ETA_EXPORT void ETA(QRect__downcast_pr5QRectr12QRectDerived)(XiQRect* self, XiQRectDerived* derived);

ETA_EXPORT void ETA(QRect__override__adjust_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__adjusted_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__bottom_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__bottomLeft_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__bottomRight_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__center_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__contains_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__height_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__intersected_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__intersects_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__isEmpty_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__left_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__moveBottom_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__moveBottomLeft_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__moveBottomRight_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__moveCenter_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__moveLeft_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__moveRight_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__moveTo_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__moveTop_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__moveTopLeft_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__moveTopRight_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__normalized_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__right_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setBottom_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setBottomLeft_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setBottomRight_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setCoords_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setHeight_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setLeft_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setRect_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setRight_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setSize_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setTop_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setTopLeft_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setTopRight_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setWidth_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setX_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__setY_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__size_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__top_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__topLeft_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__topRight_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__translate_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__translated_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__united_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__width_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__x_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__y_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__equals_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);
ETA_EXPORT void ETA(QRect__override__neq_pr12QRectDerivedai)(XiQRectDerived* derived, void* name);

ETA_EXPORT XiQRect* ETA(qrect__alloc_r5QRect)();

inline XiQRect* toXi(const QRect& orig) {
    XiQRect* r = gcNew<XiQRect>();
    r->value = orig;
    return r;
}

inline QRect fromXi(XiQRect* wrapped) {
    return *wrapped->impl();
}

struct XiQRect_vtable: public Xivtable
{
    void* reserved;
    void (*adjust)(XiQRect*, int, int, int, int);
    XiQRect* (*adjusted)(XiQRect*, int, int, int, int);
    int (*bottom)(XiQRect*);
    XiQPoint* (*bottomLeft)(XiQRect*);
    XiQPoint* (*bottomRight)(XiQRect*);
    XiQPoint* (*center)(XiQRect*);
    bool (*contains)(XiQRect*, XiQPoint*);
    int (*height)(XiQRect*);
    XiQRect* (*intersected)(XiQRect*, XiQRect*);
    bool (*intersects)(XiQRect*, XiQRect*);
    bool (*isEmpty)(XiQRect*);
    int (*left)(XiQRect*);
    void (*moveBottom)(XiQRect*, int);
    void (*moveBottomLeft)(XiQRect*, XiQPoint*);
    void (*moveBottomRight)(XiQRect*, XiQPoint*);
    void (*moveCenter)(XiQRect*, XiQPoint*);
    void (*moveLeft)(XiQRect*, int);
    void (*moveRight)(XiQRect*, int);
    void (*moveTo)(XiQRect*, XiQPoint*);
    void (*moveTop)(XiQRect*, int);
    void (*moveTopLeft)(XiQRect*, XiQPoint*);
    void (*moveTopRight)(XiQRect*, XiQPoint*);
    XiQRect* (*normalized)(XiQRect*);
    int (*right)(XiQRect*);
    void (*setBottom)(XiQRect*, int);
    void (*setBottomLeft)(XiQRect*, XiQPoint*);
    void (*setBottomRight)(XiQRect*, XiQPoint*);
    void (*setCoords)(XiQRect*, int, int, int, int);
    void (*setHeight)(XiQRect*, int);
    void (*setLeft)(XiQRect*, int);
    void (*setRect)(XiQRect*, int, int, int, int);
    void (*setRight)(XiQRect*, int);
    void (*setSize)(XiQRect*, XiQSize*);
    void (*setTop)(XiQRect*, int);
    void (*setTopLeft)(XiQRect*, XiQPoint*);
    void (*setTopRight)(XiQRect*, XiQPoint*);
    void (*setWidth)(XiQRect*, int);
    void (*setX)(XiQRect*, int);
    void (*setY)(XiQRect*, int);
    XiQSize* (*size)(XiQRect*);
    int (*top)(XiQRect*);
    XiQPoint* (*topLeft)(XiQRect*);
    XiQPoint* (*topRight)(XiQRect*);
    void (*translate)(XiQRect*, int, int);
    XiQRect* (*translated)(XiQRect*, int, int);
    XiQRect* (*united)(XiQRect*, XiQRect*);
    int (*width)(XiQRect*);
    int (*x)(XiQRect*);
    int (*y)(XiQRect*);
    bool (*equals)(XiQRect*, XiQRect*);
    bool (*neq)(XiQRect*, XiQRect*);
};

inline XiQRect_vtable* XiQRect::vtable() {
    return static_cast<XiQRect_vtable*>(vptr);
}

extern XiQRect_vtable ETA(_vt_QRect);
extern int ETA(_size_QRect);
ETA_EXPORT void ETA(_init_QRect)() __attribute__((constructor));


ETA_EXPORT XiQRect* ETA(qrect_r5QRectiiii)(int x, int y, int w, int h);


struct XiOrientation_vtable;
struct XiOrientation: public Xiobj
{
    XiOrientation_vtable* vtable();
    XiOrientation();
    Orientation value;
    Orientation* impl() {
        if (!initialized) 
            new (this) XiOrientation();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiOrientation* me = static_cast<XiOrientation*>(mePtr);
        if (me->initialized)
            me->~XiOrientation();
    }

};

ETA_EXPORT XiOrientation* ETA(Horizontal_r11Orientation)();
ETA_EXPORT XiOrientation* ETA(Vertical_r11Orientation)();

using XiOrientationDerived = XiOrientation_vtable;

ETA_EXPORT XiOrientationDerived* ETA(Orientation__extend_r18OrientationDerived)();
ETA_EXPORT void ETA(Orientation__downcast_pr11Orientationr18OrientationDerived)(XiOrientation* self, XiOrientationDerived* derived);


ETA_EXPORT XiOrientation* ETA(orientation__alloc_r11Orientation)();

inline XiOrientation* toXi(const Orientation& orig) {
    if (orig == Horizontal)
        return ETA(Horizontal_r11Orientation)();
    if (orig == Vertical)
        return ETA(Vertical_r11Orientation)();
    XiOrientation* r = gcNew<XiOrientation>();
    r->value = orig;
    return r;
}

inline Orientation fromXi(XiOrientation* wrapped) {
    return *wrapped->impl();
}

struct XiOrientation_vtable: public Xivtable
{
    void* reserved;
};

inline XiOrientation_vtable* XiOrientation::vtable() {
    return static_cast<XiOrientation_vtable*>(vptr);
}

extern XiOrientation_vtable ETA(_vt_Orientation);
extern int ETA(_size_Orientation);
ETA_EXPORT void ETA(_init_Orientation)() __attribute__((constructor));


typedef QEvent::Type EventType;


struct XiEventType_vtable;
struct XiEventType: public Xiobj
{
    XiEventType_vtable* vtable();
    XiEventType();
    EventType value;
    EventType* impl() {
        if (!initialized) 
            new (this) XiEventType();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiEventType* me = static_cast<XiEventType*>(mePtr);
        if (me->initialized)
            me->~XiEventType();
    }

};

ETA_EXPORT XiEventType* ETA(ContextMenu_r9EventType)();
ETA_EXPORT XiEventType* ETA(Close_r9EventType)();
ETA_EXPORT XiEventType* ETA(Enter_r9EventType)();
ETA_EXPORT XiEventType* ETA(Hide_r9EventType)();
ETA_EXPORT XiEventType* ETA(KeyPress_r9EventType)();
ETA_EXPORT XiEventType* ETA(KeyRelease_r9EventType)();
ETA_EXPORT XiEventType* ETA(Leave_r9EventType)();
ETA_EXPORT XiEventType* ETA(MouseButtonDblClick_r9EventType)();
ETA_EXPORT XiEventType* ETA(MouseButtonPress_r9EventType)();
ETA_EXPORT XiEventType* ETA(MouseButtonRelease_r9EventType)();
ETA_EXPORT XiEventType* ETA(MouseMove_r9EventType)();
ETA_EXPORT XiEventType* ETA(Paint_r9EventType)();
ETA_EXPORT XiEventType* ETA(Resize_r9EventType)();
ETA_EXPORT XiEventType* ETA(Show_r9EventType)();
ETA_EXPORT XiEventType* ETA(Wheel_r9EventType)();

using XiEventTypeDerived = XiEventType_vtable;

ETA_EXPORT XiEventTypeDerived* ETA(EventType__extend_r16EventTypeDerived)();
ETA_EXPORT void ETA(EventType__downcast_pr9EventTyper16EventTypeDerived)(XiEventType* self, XiEventTypeDerived* derived);


ETA_EXPORT XiEventType* ETA(eventtype__alloc_r9EventType)();

inline XiEventType* toXi(const EventType& orig) {
    if (orig == QEvent::ContextMenu)
        return ETA(ContextMenu_r9EventType)();
    if (orig == QEvent::Close)
        return ETA(Close_r9EventType)();
    if (orig == QEvent::Enter)
        return ETA(Enter_r9EventType)();
    if (orig == QEvent::Hide)
        return ETA(Hide_r9EventType)();
    if (orig == QEvent::KeyPress)
        return ETA(KeyPress_r9EventType)();
    if (orig == QEvent::KeyRelease)
        return ETA(KeyRelease_r9EventType)();
    if (orig == QEvent::Leave)
        return ETA(Leave_r9EventType)();
    if (orig == QEvent::MouseButtonDblClick)
        return ETA(MouseButtonDblClick_r9EventType)();
    if (orig == QEvent::MouseButtonPress)
        return ETA(MouseButtonPress_r9EventType)();
    if (orig == QEvent::MouseButtonRelease)
        return ETA(MouseButtonRelease_r9EventType)();
    if (orig == QEvent::MouseMove)
        return ETA(MouseMove_r9EventType)();
    if (orig == QEvent::Paint)
        return ETA(Paint_r9EventType)();
    if (orig == QEvent::Resize)
        return ETA(Resize_r9EventType)();
    if (orig == QEvent::Show)
        return ETA(Show_r9EventType)();
    if (orig == QEvent::Wheel)
        return ETA(Wheel_r9EventType)();
    XiEventType* r = gcNew<XiEventType>();
    r->value = orig;
    return r;
}

inline EventType fromXi(XiEventType* wrapped) {
    return *wrapped->impl();
}

struct XiEventType_vtable: public Xivtable
{
    void* reserved;
};

inline XiEventType_vtable* XiEventType::vtable() {
    return static_cast<XiEventType_vtable*>(vptr);
}

extern XiEventType_vtable ETA(_vt_EventType);
extern int ETA(_size_EventType);
ETA_EXPORT void ETA(_init_EventType)() __attribute__((constructor));




struct XiQEvent_vtable;
struct XiQEvent: public Xiobj
{
    XiQEvent_vtable* vtable();
    XiQEvent();
    QEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QEvent wrappedType;
    QEvent* e;
    QEvent* getImpl() {
        return e;
    }

    void createImpl() {
        assert(false);
    }
    static XiEventType* type(XiQEvent* __thisPtr);
    static void accept(XiQEvent* __thisPtr);
    static void ignore(XiQEvent* __thisPtr);
    static bool isAccepted(XiQEvent* __thisPtr);
};

ETA_EXPORT XiEventType* ETA(QEvent__type_r9EventTyper6QEvent)(XiQEvent* self);
ETA_EXPORT void ETA(QEvent__accept_pr6QEvent)(XiQEvent* self);
ETA_EXPORT void ETA(QEvent__ignore_pr6QEvent)(XiQEvent* self);
ETA_EXPORT bool ETA(QEvent__isAccepted_br6QEvent)(XiQEvent* self);

using XiQEventDerived = XiQEvent_vtable;

ETA_EXPORT XiQEventDerived* ETA(QEvent__extend_r13QEventDerived)();
ETA_EXPORT void ETA(QEvent__downcast_pr6QEventr13QEventDerived)(XiQEvent* self, XiQEventDerived* derived);

ETA_EXPORT void ETA(QEvent__override__type_pr13QEventDerivedai)(XiQEventDerived* derived, void* name);
ETA_EXPORT void ETA(QEvent__override__accept_pr13QEventDerivedai)(XiQEventDerived* derived, void* name);
ETA_EXPORT void ETA(QEvent__override__ignore_pr13QEventDerivedai)(XiQEventDerived* derived, void* name);
ETA_EXPORT void ETA(QEvent__override__isAccepted_pr13QEventDerivedai)(XiQEventDerived* derived, void* name);

ETA_EXPORT XiQEvent* ETA(qevent__alloc_r6QEvent)();

inline QEvent* fromXi(XiQEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQEvent_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    XiEventType* (*type)(XiQEvent*);
    void (*accept)(XiQEvent*);
    void (*ignore)(XiQEvent*);
    bool (*isAccepted)(XiQEvent*);
};

inline XiQEvent_vtable* XiQEvent::vtable() {
    return static_cast<XiQEvent_vtable*>(vptr);
}

extern XiQEvent_vtable ETA(_vt_QEvent);
extern int ETA(_size_QEvent);
ETA_EXPORT void ETA(_init_QEvent)() __attribute__((constructor));




struct XiQInputEvent_vtable;
struct XiQInputEvent: public XiQEvent
{
    XiQInputEvent_vtable* vtable();
    XiQInputEvent();
    QInputEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QInputEvent wrappedType;
    QInputEvent* getImpl() {
        return static_cast<QInputEvent*>(e);
    }
    static bool shift(XiQInputEvent* __thisPtr);
    static bool ctrl(XiQInputEvent* __thisPtr);
    static bool alt(XiQInputEvent* __thisPtr);
    static bool meta(XiQInputEvent* __thisPtr);
};

ETA_EXPORT XiQEvent* ETA(QInputEvent__to__QEvent_r6QEventr11QInputEvent)(XiQInputEvent* self);
ETA_EXPORT bool ETA(QInputEvent__shift_br11QInputEvent)(XiQInputEvent* self);
ETA_EXPORT bool ETA(QInputEvent__ctrl_br11QInputEvent)(XiQInputEvent* self);
ETA_EXPORT bool ETA(QInputEvent__alt_br11QInputEvent)(XiQInputEvent* self);
ETA_EXPORT bool ETA(QInputEvent__meta_br11QInputEvent)(XiQInputEvent* self);
ETA_EXPORT XiEventType* ETA(QInputEvent__type_r9EventTyper11QInputEvent)(XiQInputEvent* self);
ETA_EXPORT void ETA(QInputEvent__accept_pr11QInputEvent)(XiQInputEvent* self);
ETA_EXPORT void ETA(QInputEvent__ignore_pr11QInputEvent)(XiQInputEvent* self);
ETA_EXPORT bool ETA(QInputEvent__isAccepted_br11QInputEvent)(XiQInputEvent* self);

using XiQInputEventDerived = XiQInputEvent_vtable;

ETA_EXPORT XiQInputEventDerived* ETA(QInputEvent__extend_r18QInputEventDerived)();
ETA_EXPORT void ETA(QInputEvent__downcast_pr11QInputEventr18QInputEventDerived)(XiQInputEvent* self, XiQInputEventDerived* derived);

ETA_EXPORT void ETA(QInputEvent__override__shift_pr18QInputEventDerivedai)(XiQInputEventDerived* derived, void* name);
ETA_EXPORT void ETA(QInputEvent__override__ctrl_pr18QInputEventDerivedai)(XiQInputEventDerived* derived, void* name);
ETA_EXPORT void ETA(QInputEvent__override__alt_pr18QInputEventDerivedai)(XiQInputEventDerived* derived, void* name);
ETA_EXPORT void ETA(QInputEvent__override__meta_pr18QInputEventDerivedai)(XiQInputEventDerived* derived, void* name);
ETA_EXPORT void ETA(QInputEvent__override__type_pr18QInputEventDerivedai)(XiQInputEventDerived* derived, void* name);
ETA_EXPORT void ETA(QInputEvent__override__accept_pr18QInputEventDerivedai)(XiQInputEventDerived* derived, void* name);
ETA_EXPORT void ETA(QInputEvent__override__ignore_pr18QInputEventDerivedai)(XiQInputEventDerived* derived, void* name);
ETA_EXPORT void ETA(QInputEvent__override__isAccepted_pr18QInputEventDerivedai)(XiQInputEventDerived* derived, void* name);

ETA_EXPORT XiQInputEvent* ETA(qinputevent__alloc_r11QInputEvent)();

inline QInputEvent* fromXi(XiQInputEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQInputEvent_vtable: public XiQEvent_vtable
{
    void* reserved;
    bool (*shift)(XiQInputEvent*);
    bool (*ctrl)(XiQInputEvent*);
    bool (*alt)(XiQInputEvent*);
    bool (*meta)(XiQInputEvent*);
};

inline XiQInputEvent_vtable* XiQInputEvent::vtable() {
    return static_cast<XiQInputEvent_vtable*>(vptr);
}

extern XiQInputEvent_vtable ETA(_vt_QInputEvent);
extern int ETA(_size_QInputEvent);
ETA_EXPORT void ETA(_init_QInputEvent)() __attribute__((constructor));




struct XiQContextMenuEvent_vtable;
struct XiQContextMenuEvent: public XiQInputEvent
{
    XiQContextMenuEvent_vtable* vtable();
    XiQContextMenuEvent();
    QContextMenuEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QContextMenuEvent wrappedType;
    QContextMenuEvent* getImpl() {
        return static_cast<QContextMenuEvent*>(e);
    }
    static XiQPoint* globalPos(XiQContextMenuEvent* __thisPtr);
    static XiQPoint* pos(XiQContextMenuEvent* __thisPtr);
};

ETA_EXPORT XiQInputEvent* ETA(QContextMenuEvent__to__QInputEvent_r11QInputEventr17QContextMenuEvent)(XiQContextMenuEvent* self);
ETA_EXPORT XiQEvent* ETA(QContextMenuEvent__to__QEvent_r6QEventr17QContextMenuEvent)(XiQContextMenuEvent* self);
ETA_EXPORT XiQPoint* ETA(QContextMenuEvent__globalPos_r6QPointr17QContextMenuEvent)(XiQContextMenuEvent* self);
ETA_EXPORT XiQPoint* ETA(QContextMenuEvent__pos_r6QPointr17QContextMenuEvent)(XiQContextMenuEvent* self);
ETA_EXPORT bool ETA(QContextMenuEvent__shift_br17QContextMenuEvent)(XiQContextMenuEvent* self);
ETA_EXPORT bool ETA(QContextMenuEvent__ctrl_br17QContextMenuEvent)(XiQContextMenuEvent* self);
ETA_EXPORT bool ETA(QContextMenuEvent__alt_br17QContextMenuEvent)(XiQContextMenuEvent* self);
ETA_EXPORT bool ETA(QContextMenuEvent__meta_br17QContextMenuEvent)(XiQContextMenuEvent* self);
ETA_EXPORT XiEventType* ETA(QContextMenuEvent__type_r9EventTyper17QContextMenuEvent)(XiQContextMenuEvent* self);
ETA_EXPORT void ETA(QContextMenuEvent__accept_pr17QContextMenuEvent)(XiQContextMenuEvent* self);
ETA_EXPORT void ETA(QContextMenuEvent__ignore_pr17QContextMenuEvent)(XiQContextMenuEvent* self);
ETA_EXPORT bool ETA(QContextMenuEvent__isAccepted_br17QContextMenuEvent)(XiQContextMenuEvent* self);

using XiQContextMenuEventDerived = XiQContextMenuEvent_vtable;

ETA_EXPORT XiQContextMenuEventDerived* ETA(QContextMenuEvent__extend_r24QContextMenuEventDerived)();
ETA_EXPORT void ETA(QContextMenuEvent__downcast_pr17QContextMenuEventr24QContextMenuEventDerived)(XiQContextMenuEvent* self, XiQContextMenuEventDerived* derived);

ETA_EXPORT void ETA(QContextMenuEvent__override__globalPos_pr24QContextMenuEventDerivedai)(XiQContextMenuEventDerived* derived, void* name);
ETA_EXPORT void ETA(QContextMenuEvent__override__pos_pr24QContextMenuEventDerivedai)(XiQContextMenuEventDerived* derived, void* name);
ETA_EXPORT void ETA(QContextMenuEvent__override__shift_pr24QContextMenuEventDerivedai)(XiQContextMenuEventDerived* derived, void* name);
ETA_EXPORT void ETA(QContextMenuEvent__override__ctrl_pr24QContextMenuEventDerivedai)(XiQContextMenuEventDerived* derived, void* name);
ETA_EXPORT void ETA(QContextMenuEvent__override__alt_pr24QContextMenuEventDerivedai)(XiQContextMenuEventDerived* derived, void* name);
ETA_EXPORT void ETA(QContextMenuEvent__override__meta_pr24QContextMenuEventDerivedai)(XiQContextMenuEventDerived* derived, void* name);
ETA_EXPORT void ETA(QContextMenuEvent__override__type_pr24QContextMenuEventDerivedai)(XiQContextMenuEventDerived* derived, void* name);
ETA_EXPORT void ETA(QContextMenuEvent__override__accept_pr24QContextMenuEventDerivedai)(XiQContextMenuEventDerived* derived, void* name);
ETA_EXPORT void ETA(QContextMenuEvent__override__ignore_pr24QContextMenuEventDerivedai)(XiQContextMenuEventDerived* derived, void* name);
ETA_EXPORT void ETA(QContextMenuEvent__override__isAccepted_pr24QContextMenuEventDerivedai)(XiQContextMenuEventDerived* derived, void* name);

ETA_EXPORT XiQContextMenuEvent* ETA(qcontextmenuevent__alloc_r17QContextMenuEvent)();

inline QContextMenuEvent* fromXi(XiQContextMenuEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQContextMenuEvent_vtable: public XiQInputEvent_vtable
{
    void* reserved;
    XiQPoint* (*globalPos)(XiQContextMenuEvent*);
    XiQPoint* (*pos)(XiQContextMenuEvent*);
};

inline XiQContextMenuEvent_vtable* XiQContextMenuEvent::vtable() {
    return static_cast<XiQContextMenuEvent_vtable*>(vptr);
}

extern XiQContextMenuEvent_vtable ETA(_vt_QContextMenuEvent);
extern int ETA(_size_QContextMenuEvent);
ETA_EXPORT void ETA(_init_QContextMenuEvent)() __attribute__((constructor));




struct XiQKeyEvent_vtable;
struct XiQKeyEvent: public XiQInputEvent
{
    XiQKeyEvent_vtable* vtable();
    XiQKeyEvent();
    QKeyEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QKeyEvent wrappedType;
    QKeyEvent* getImpl() {
        return static_cast<QKeyEvent*>(e);
    }
    static int count(XiQKeyEvent* __thisPtr);
    static XiQString* text(XiQKeyEvent* __thisPtr);
    static bool isAutoRepeat(XiQKeyEvent* __thisPtr);
    static int key(XiQKeyEvent* __thisPtr);
};

ETA_EXPORT XiQInputEvent* ETA(QKeyEvent__to__QInputEvent_r11QInputEventr9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT XiQEvent* ETA(QKeyEvent__to__QEvent_r6QEventr9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT int ETA(QKeyEvent__count_ir9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT XiQString* ETA(QKeyEvent__text_r7QStringr9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT bool ETA(QKeyEvent__isAutoRepeat_br9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT int ETA(QKeyEvent__key_ir9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT bool ETA(QKeyEvent__shift_br9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT bool ETA(QKeyEvent__ctrl_br9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT bool ETA(QKeyEvent__alt_br9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT bool ETA(QKeyEvent__meta_br9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT XiEventType* ETA(QKeyEvent__type_r9EventTyper9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT void ETA(QKeyEvent__accept_pr9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT void ETA(QKeyEvent__ignore_pr9QKeyEvent)(XiQKeyEvent* self);
ETA_EXPORT bool ETA(QKeyEvent__isAccepted_br9QKeyEvent)(XiQKeyEvent* self);

using XiQKeyEventDerived = XiQKeyEvent_vtable;

ETA_EXPORT XiQKeyEventDerived* ETA(QKeyEvent__extend_r16QKeyEventDerived)();
ETA_EXPORT void ETA(QKeyEvent__downcast_pr9QKeyEventr16QKeyEventDerived)(XiQKeyEvent* self, XiQKeyEventDerived* derived);

ETA_EXPORT void ETA(QKeyEvent__override__count_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);
ETA_EXPORT void ETA(QKeyEvent__override__text_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);
ETA_EXPORT void ETA(QKeyEvent__override__isAutoRepeat_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);
ETA_EXPORT void ETA(QKeyEvent__override__key_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);
ETA_EXPORT void ETA(QKeyEvent__override__shift_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);
ETA_EXPORT void ETA(QKeyEvent__override__ctrl_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);
ETA_EXPORT void ETA(QKeyEvent__override__alt_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);
ETA_EXPORT void ETA(QKeyEvent__override__meta_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);
ETA_EXPORT void ETA(QKeyEvent__override__type_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);
ETA_EXPORT void ETA(QKeyEvent__override__accept_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);
ETA_EXPORT void ETA(QKeyEvent__override__ignore_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);
ETA_EXPORT void ETA(QKeyEvent__override__isAccepted_pr16QKeyEventDerivedai)(XiQKeyEventDerived* derived, void* name);

ETA_EXPORT XiQKeyEvent* ETA(qkeyevent__alloc_r9QKeyEvent)();

inline QKeyEvent* fromXi(XiQKeyEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQKeyEvent_vtable: public XiQInputEvent_vtable
{
    void* reserved;
    int (*count)(XiQKeyEvent*);
    XiQString* (*text)(XiQKeyEvent*);
    bool (*isAutoRepeat)(XiQKeyEvent*);
    int (*key)(XiQKeyEvent*);
};

inline XiQKeyEvent_vtable* XiQKeyEvent::vtable() {
    return static_cast<XiQKeyEvent_vtable*>(vptr);
}

extern XiQKeyEvent_vtable ETA(_vt_QKeyEvent);
extern int ETA(_size_QKeyEvent);
ETA_EXPORT void ETA(_init_QKeyEvent)() __attribute__((constructor));




struct XiMouseButton_vtable;
struct XiMouseButton: public Xiobj
{
    XiMouseButton_vtable* vtable();
    XiMouseButton();
    MouseButton value;
    MouseButton* impl() {
        if (!initialized) 
            new (this) XiMouseButton();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiMouseButton* me = static_cast<XiMouseButton*>(mePtr);
        if (me->initialized)
            me->~XiMouseButton();
    }

};

ETA_EXPORT XiMouseButton* ETA(LeftButton_r11MouseButton)();
ETA_EXPORT XiMouseButton* ETA(RightButton_r11MouseButton)();
ETA_EXPORT XiMouseButton* ETA(MidButton_r11MouseButton)();

using XiMouseButtonDerived = XiMouseButton_vtable;

ETA_EXPORT XiMouseButtonDerived* ETA(MouseButton__extend_r18MouseButtonDerived)();
ETA_EXPORT void ETA(MouseButton__downcast_pr11MouseButtonr18MouseButtonDerived)(XiMouseButton* self, XiMouseButtonDerived* derived);


ETA_EXPORT XiMouseButton* ETA(mousebutton__alloc_r11MouseButton)();

inline XiMouseButton* toXi(const MouseButton& orig) {
    if (orig == LeftButton)
        return ETA(LeftButton_r11MouseButton)();
    if (orig == RightButton)
        return ETA(RightButton_r11MouseButton)();
    if (orig == MidButton)
        return ETA(MidButton_r11MouseButton)();
    XiMouseButton* r = gcNew<XiMouseButton>();
    r->value = orig;
    return r;
}

inline MouseButton fromXi(XiMouseButton* wrapped) {
    return *wrapped->impl();
}

struct XiMouseButton_vtable: public Xivtable
{
    void* reserved;
};

inline XiMouseButton_vtable* XiMouseButton::vtable() {
    return static_cast<XiMouseButton_vtable*>(vptr);
}

extern XiMouseButton_vtable ETA(_vt_MouseButton);
extern int ETA(_size_MouseButton);
ETA_EXPORT void ETA(_init_MouseButton)() __attribute__((constructor));




struct XiQMouseEvent_vtable;
struct XiQMouseEvent: public XiQInputEvent
{
    XiQMouseEvent_vtable* vtable();
    XiQMouseEvent();
    QMouseEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QMouseEvent wrappedType;
    QMouseEvent* getImpl() {
        return static_cast<QMouseEvent*>(e);
    }
    static XiQPoint* pos(XiQMouseEvent* __thisPtr);
    static XiQPoint* globalPos(XiQMouseEvent* __thisPtr);
    static XiMouseButton* button(XiQMouseEvent* __thisPtr);
    static bool left(XiQMouseEvent* __thisPtr);
    static bool middle(XiQMouseEvent* __thisPtr);
    static bool right(XiQMouseEvent* __thisPtr);
};

ETA_EXPORT XiQInputEvent* ETA(QMouseEvent__to__QInputEvent_r11QInputEventr11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT XiQEvent* ETA(QMouseEvent__to__QEvent_r6QEventr11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT XiQPoint* ETA(QMouseEvent__pos_r6QPointr11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT XiQPoint* ETA(QMouseEvent__globalPos_r6QPointr11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT XiMouseButton* ETA(QMouseEvent__button_r11MouseButtonr11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT bool ETA(QMouseEvent__left_br11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT bool ETA(QMouseEvent__middle_br11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT bool ETA(QMouseEvent__right_br11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT bool ETA(QMouseEvent__shift_br11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT bool ETA(QMouseEvent__ctrl_br11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT bool ETA(QMouseEvent__alt_br11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT bool ETA(QMouseEvent__meta_br11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT XiEventType* ETA(QMouseEvent__type_r9EventTyper11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT void ETA(QMouseEvent__accept_pr11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT void ETA(QMouseEvent__ignore_pr11QMouseEvent)(XiQMouseEvent* self);
ETA_EXPORT bool ETA(QMouseEvent__isAccepted_br11QMouseEvent)(XiQMouseEvent* self);

using XiQMouseEventDerived = XiQMouseEvent_vtable;

ETA_EXPORT XiQMouseEventDerived* ETA(QMouseEvent__extend_r18QMouseEventDerived)();
ETA_EXPORT void ETA(QMouseEvent__downcast_pr11QMouseEventr18QMouseEventDerived)(XiQMouseEvent* self, XiQMouseEventDerived* derived);

ETA_EXPORT void ETA(QMouseEvent__override__pos_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__globalPos_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__button_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__left_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__middle_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__right_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__shift_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__ctrl_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__alt_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__meta_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__type_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__accept_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__ignore_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);
ETA_EXPORT void ETA(QMouseEvent__override__isAccepted_pr18QMouseEventDerivedai)(XiQMouseEventDerived* derived, void* name);

ETA_EXPORT XiQMouseEvent* ETA(qmouseevent__alloc_r11QMouseEvent)();

inline QMouseEvent* fromXi(XiQMouseEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQMouseEvent_vtable: public XiQInputEvent_vtable
{
    void* reserved;
    XiQPoint* (*pos)(XiQMouseEvent*);
    XiQPoint* (*globalPos)(XiQMouseEvent*);
    XiMouseButton* (*button)(XiQMouseEvent*);
    bool (*left)(XiQMouseEvent*);
    bool (*middle)(XiQMouseEvent*);
    bool (*right)(XiQMouseEvent*);
};

inline XiQMouseEvent_vtable* XiQMouseEvent::vtable() {
    return static_cast<XiQMouseEvent_vtable*>(vptr);
}

extern XiQMouseEvent_vtable ETA(_vt_QMouseEvent);
extern int ETA(_size_QMouseEvent);
ETA_EXPORT void ETA(_init_QMouseEvent)() __attribute__((constructor));




struct XiQPaintEvent_vtable;
struct XiQPaintEvent: public XiQEvent
{
    XiQPaintEvent_vtable* vtable();
    XiQPaintEvent();
    QPaintEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QPaintEvent wrappedType;
    QPaintEvent* getImpl() {
        return static_cast<QPaintEvent*>(e);
    }
    static XiQRect* rect(XiQPaintEvent* __thisPtr);
};

ETA_EXPORT XiQEvent* ETA(QPaintEvent__to__QEvent_r6QEventr11QPaintEvent)(XiQPaintEvent* self);
ETA_EXPORT XiQRect* ETA(QPaintEvent__rect_r5QRectr11QPaintEvent)(XiQPaintEvent* self);
ETA_EXPORT XiEventType* ETA(QPaintEvent__type_r9EventTyper11QPaintEvent)(XiQPaintEvent* self);
ETA_EXPORT void ETA(QPaintEvent__accept_pr11QPaintEvent)(XiQPaintEvent* self);
ETA_EXPORT void ETA(QPaintEvent__ignore_pr11QPaintEvent)(XiQPaintEvent* self);
ETA_EXPORT bool ETA(QPaintEvent__isAccepted_br11QPaintEvent)(XiQPaintEvent* self);

using XiQPaintEventDerived = XiQPaintEvent_vtable;

ETA_EXPORT XiQPaintEventDerived* ETA(QPaintEvent__extend_r18QPaintEventDerived)();
ETA_EXPORT void ETA(QPaintEvent__downcast_pr11QPaintEventr18QPaintEventDerived)(XiQPaintEvent* self, XiQPaintEventDerived* derived);

ETA_EXPORT void ETA(QPaintEvent__override__rect_pr18QPaintEventDerivedai)(XiQPaintEventDerived* derived, void* name);
ETA_EXPORT void ETA(QPaintEvent__override__type_pr18QPaintEventDerivedai)(XiQPaintEventDerived* derived, void* name);
ETA_EXPORT void ETA(QPaintEvent__override__accept_pr18QPaintEventDerivedai)(XiQPaintEventDerived* derived, void* name);
ETA_EXPORT void ETA(QPaintEvent__override__ignore_pr18QPaintEventDerivedai)(XiQPaintEventDerived* derived, void* name);
ETA_EXPORT void ETA(QPaintEvent__override__isAccepted_pr18QPaintEventDerivedai)(XiQPaintEventDerived* derived, void* name);

ETA_EXPORT XiQPaintEvent* ETA(qpaintevent__alloc_r11QPaintEvent)();

inline QPaintEvent* fromXi(XiQPaintEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQPaintEvent_vtable: public XiQEvent_vtable
{
    void* reserved;
    XiQRect* (*rect)(XiQPaintEvent*);
};

inline XiQPaintEvent_vtable* XiQPaintEvent::vtable() {
    return static_cast<XiQPaintEvent_vtable*>(vptr);
}

extern XiQPaintEvent_vtable ETA(_vt_QPaintEvent);
extern int ETA(_size_QPaintEvent);
ETA_EXPORT void ETA(_init_QPaintEvent)() __attribute__((constructor));




struct XiQResizeEvent_vtable;
struct XiQResizeEvent: public XiQEvent
{
    XiQResizeEvent_vtable* vtable();
    XiQResizeEvent();
    QResizeEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QResizeEvent wrappedType;
    QResizeEvent* getImpl() {
        return static_cast<QResizeEvent*>(e);
    }
    static XiQSize* oldSize(XiQResizeEvent* __thisPtr);
    static XiQSize* size(XiQResizeEvent* __thisPtr);
};

ETA_EXPORT XiQEvent* ETA(QResizeEvent__to__QEvent_r6QEventr12QResizeEvent)(XiQResizeEvent* self);
ETA_EXPORT XiQSize* ETA(QResizeEvent__oldSize_r5QSizer12QResizeEvent)(XiQResizeEvent* self);
ETA_EXPORT XiQSize* ETA(QResizeEvent__size_r5QSizer12QResizeEvent)(XiQResizeEvent* self);
ETA_EXPORT XiEventType* ETA(QResizeEvent__type_r9EventTyper12QResizeEvent)(XiQResizeEvent* self);
ETA_EXPORT void ETA(QResizeEvent__accept_pr12QResizeEvent)(XiQResizeEvent* self);
ETA_EXPORT void ETA(QResizeEvent__ignore_pr12QResizeEvent)(XiQResizeEvent* self);
ETA_EXPORT bool ETA(QResizeEvent__isAccepted_br12QResizeEvent)(XiQResizeEvent* self);

using XiQResizeEventDerived = XiQResizeEvent_vtable;

ETA_EXPORT XiQResizeEventDerived* ETA(QResizeEvent__extend_r19QResizeEventDerived)();
ETA_EXPORT void ETA(QResizeEvent__downcast_pr12QResizeEventr19QResizeEventDerived)(XiQResizeEvent* self, XiQResizeEventDerived* derived);

ETA_EXPORT void ETA(QResizeEvent__override__oldSize_pr19QResizeEventDerivedai)(XiQResizeEventDerived* derived, void* name);
ETA_EXPORT void ETA(QResizeEvent__override__size_pr19QResizeEventDerivedai)(XiQResizeEventDerived* derived, void* name);
ETA_EXPORT void ETA(QResizeEvent__override__type_pr19QResizeEventDerivedai)(XiQResizeEventDerived* derived, void* name);
ETA_EXPORT void ETA(QResizeEvent__override__accept_pr19QResizeEventDerivedai)(XiQResizeEventDerived* derived, void* name);
ETA_EXPORT void ETA(QResizeEvent__override__ignore_pr19QResizeEventDerivedai)(XiQResizeEventDerived* derived, void* name);
ETA_EXPORT void ETA(QResizeEvent__override__isAccepted_pr19QResizeEventDerivedai)(XiQResizeEventDerived* derived, void* name);

ETA_EXPORT XiQResizeEvent* ETA(qresizeevent__alloc_r12QResizeEvent)();

inline QResizeEvent* fromXi(XiQResizeEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQResizeEvent_vtable: public XiQEvent_vtable
{
    void* reserved;
    XiQSize* (*oldSize)(XiQResizeEvent*);
    XiQSize* (*size)(XiQResizeEvent*);
};

inline XiQResizeEvent_vtable* XiQResizeEvent::vtable() {
    return static_cast<XiQResizeEvent_vtable*>(vptr);
}

extern XiQResizeEvent_vtable ETA(_vt_QResizeEvent);
extern int ETA(_size_QResizeEvent);
ETA_EXPORT void ETA(_init_QResizeEvent)() __attribute__((constructor));




struct XiQWheelEvent_vtable;
struct XiQWheelEvent: public XiQInputEvent
{
    XiQWheelEvent_vtable* vtable();
    XiQWheelEvent();
    QWheelEvent* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QWheelEvent wrappedType;
    QWheelEvent* getImpl() {
        return static_cast<QWheelEvent*>(e);
    }
    static int delta(XiQWheelEvent* __thisPtr);
    static XiQPoint* pos(XiQWheelEvent* __thisPtr);
    static XiQPoint* globalPos(XiQWheelEvent* __thisPtr);
    static XiOrientation* orientation(XiQWheelEvent* __thisPtr);
};

ETA_EXPORT XiQInputEvent* ETA(QWheelEvent__to__QInputEvent_r11QInputEventr11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT XiQEvent* ETA(QWheelEvent__to__QEvent_r6QEventr11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT int ETA(QWheelEvent__delta_ir11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT XiQPoint* ETA(QWheelEvent__pos_r6QPointr11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT XiQPoint* ETA(QWheelEvent__globalPos_r6QPointr11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT XiOrientation* ETA(QWheelEvent__orientation_r11Orientationr11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT bool ETA(QWheelEvent__shift_br11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT bool ETA(QWheelEvent__ctrl_br11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT bool ETA(QWheelEvent__alt_br11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT bool ETA(QWheelEvent__meta_br11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT XiEventType* ETA(QWheelEvent__type_r9EventTyper11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT void ETA(QWheelEvent__accept_pr11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT void ETA(QWheelEvent__ignore_pr11QWheelEvent)(XiQWheelEvent* self);
ETA_EXPORT bool ETA(QWheelEvent__isAccepted_br11QWheelEvent)(XiQWheelEvent* self);

using XiQWheelEventDerived = XiQWheelEvent_vtable;

ETA_EXPORT XiQWheelEventDerived* ETA(QWheelEvent__extend_r18QWheelEventDerived)();
ETA_EXPORT void ETA(QWheelEvent__downcast_pr11QWheelEventr18QWheelEventDerived)(XiQWheelEvent* self, XiQWheelEventDerived* derived);

ETA_EXPORT void ETA(QWheelEvent__override__delta_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);
ETA_EXPORT void ETA(QWheelEvent__override__pos_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);
ETA_EXPORT void ETA(QWheelEvent__override__globalPos_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);
ETA_EXPORT void ETA(QWheelEvent__override__orientation_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);
ETA_EXPORT void ETA(QWheelEvent__override__shift_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);
ETA_EXPORT void ETA(QWheelEvent__override__ctrl_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);
ETA_EXPORT void ETA(QWheelEvent__override__alt_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);
ETA_EXPORT void ETA(QWheelEvent__override__meta_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);
ETA_EXPORT void ETA(QWheelEvent__override__type_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);
ETA_EXPORT void ETA(QWheelEvent__override__accept_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);
ETA_EXPORT void ETA(QWheelEvent__override__ignore_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);
ETA_EXPORT void ETA(QWheelEvent__override__isAccepted_pr18QWheelEventDerivedai)(XiQWheelEventDerived* derived, void* name);

ETA_EXPORT XiQWheelEvent* ETA(qwheelevent__alloc_r11QWheelEvent)();

inline QWheelEvent* fromXi(XiQWheelEvent* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQWheelEvent_vtable: public XiQInputEvent_vtable
{
    void* reserved;
    int (*delta)(XiQWheelEvent*);
    XiQPoint* (*pos)(XiQWheelEvent*);
    XiQPoint* (*globalPos)(XiQWheelEvent*);
    XiOrientation* (*orientation)(XiQWheelEvent*);
};

inline XiQWheelEvent_vtable* XiQWheelEvent::vtable() {
    return static_cast<XiQWheelEvent_vtable*>(vptr);
}

extern XiQWheelEvent_vtable ETA(_vt_QWheelEvent);
extern int ETA(_size_QWheelEvent);
ETA_EXPORT void ETA(_init_QWheelEvent)() __attribute__((constructor));




struct XiQPaintDevice_vtable;
struct XiQPaintDevice: public Xiobj
{
    XiQPaintDevice_vtable* vtable();
    XiQPaintDevice();
    QPaintDevice* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QPaintDevice wrappedType;
    QPaintDevice* getImpl();
    void createImpl() {
        assert(0);
    }
    static XiQPixmap* toPixmap(XiQPaintDevice* __thisPtr);
    static XiQWidget* toWidget(XiQPaintDevice* __thisPtr);
};

ETA_EXPORT XiQPixmap* ETA(QPaintDevice__toPixmap_r7QPixmapr12QPaintDevice)(XiQPaintDevice* self);
ETA_EXPORT XiQWidget* ETA(QPaintDevice__toWidget_r7QWidgetr12QPaintDevice)(XiQPaintDevice* self);

using XiQPaintDeviceDerived = XiQPaintDevice_vtable;

ETA_EXPORT XiQPaintDeviceDerived* ETA(QPaintDevice__extend_r19QPaintDeviceDerived)();
ETA_EXPORT void ETA(QPaintDevice__downcast_pr12QPaintDevicer19QPaintDeviceDerived)(XiQPaintDevice* self, XiQPaintDeviceDerived* derived);

ETA_EXPORT void ETA(QPaintDevice__override__toPixmap_pr19QPaintDeviceDerivedai)(XiQPaintDeviceDerived* derived, void* name);
ETA_EXPORT void ETA(QPaintDevice__override__toWidget_pr19QPaintDeviceDerivedai)(XiQPaintDeviceDerived* derived, void* name);

ETA_EXPORT XiQPaintDevice* ETA(qpaintdevice__alloc_r12QPaintDevice)();

inline QPaintDevice* fromXi(XiQPaintDevice* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQPaintDevice_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    XiQPixmap* (*toPixmap)(XiQPaintDevice*);
    XiQWidget* (*toWidget)(XiQPaintDevice*);
};

inline XiQPaintDevice_vtable* XiQPaintDevice::vtable() {
    return static_cast<XiQPaintDevice_vtable*>(vptr);
}

extern XiQPaintDevice_vtable ETA(_vt_QPaintDevice);
extern int ETA(_size_QPaintDevice);
ETA_EXPORT void ETA(_init_QPaintDevice)() __attribute__((constructor));




struct XiQPixmap_vtable;
struct XiQPixmap: public XiQPaintDevice
{
    XiQPixmap_vtable* vtable();
    XiQPixmap();
    QPixmap* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QPixmap wrappedType;
    QPixmap* handle;

    QPixmap* getImpl() {
        return handle;
    }

    void createImpl() {
        handle = new QPixmap(); // an empty one
    }

    ~XiQPixmap() {
        delete handle;
    }
    static XiQPixmap* toPixmap(XiQPaintDevice* __thisPtr);
    static void load(XiQPixmap* __thisPtr, XiQString* file);
    static void save(XiQPixmap* __thisPtr, XiQString* file);
    static void fill(XiQPixmap* __thisPtr, XiQColor* c);
    static XiQPixmap* copy(XiQPixmap* __thisPtr, XiQRect* rect);
    static bool isNull(XiQPixmap* __thisPtr);
    static int height(XiQPixmap* __thisPtr);
    static int width(XiQPixmap* __thisPtr);
    static XiQSize* size(XiQPixmap* __thisPtr);
};

ETA_EXPORT XiQPaintDevice* ETA(QPixmap__to__QPaintDevice_r12QPaintDevicer7QPixmap)(XiQPixmap* self);
ETA_EXPORT void ETA(QPixmap__load_pr7QPixmapr7QString)(XiQPixmap* self, XiQString* file);
ETA_EXPORT void ETA(QPixmap__save_pr7QPixmapr7QString)(XiQPixmap* self, XiQString* file);
ETA_EXPORT void ETA(QPixmap__fill_pr7QPixmapr6QColor)(XiQPixmap* self, XiQColor* c);
ETA_EXPORT XiQPixmap* ETA(QPixmap__copy_r7QPixmapr7QPixmapr5QRect)(XiQPixmap* self, XiQRect* rect);
ETA_EXPORT bool ETA(QPixmap__isNull_br7QPixmap)(XiQPixmap* self);
ETA_EXPORT int ETA(QPixmap__height_ir7QPixmap)(XiQPixmap* self);
ETA_EXPORT int ETA(QPixmap__width_ir7QPixmap)(XiQPixmap* self);
ETA_EXPORT XiQSize* ETA(QPixmap__size_r5QSizer7QPixmap)(XiQPixmap* self);
ETA_EXPORT XiQPixmap* ETA(QPixmap__toPixmap_r7QPixmapr7QPixmap)(XiQPixmap* self);
ETA_EXPORT XiQWidget* ETA(QPixmap__toWidget_r7QWidgetr7QPixmap)(XiQPixmap* self);

using XiQPixmapDerived = XiQPixmap_vtable;

ETA_EXPORT XiQPixmapDerived* ETA(QPixmap__extend_r14QPixmapDerived)();
ETA_EXPORT void ETA(QPixmap__downcast_pr7QPixmapr14QPixmapDerived)(XiQPixmap* self, XiQPixmapDerived* derived);

ETA_EXPORT void ETA(QPixmap__override__load_pr14QPixmapDerivedai)(XiQPixmapDerived* derived, void* name);
ETA_EXPORT void ETA(QPixmap__override__save_pr14QPixmapDerivedai)(XiQPixmapDerived* derived, void* name);
ETA_EXPORT void ETA(QPixmap__override__fill_pr14QPixmapDerivedai)(XiQPixmapDerived* derived, void* name);
ETA_EXPORT void ETA(QPixmap__override__copy_pr14QPixmapDerivedai)(XiQPixmapDerived* derived, void* name);
ETA_EXPORT void ETA(QPixmap__override__isNull_pr14QPixmapDerivedai)(XiQPixmapDerived* derived, void* name);
ETA_EXPORT void ETA(QPixmap__override__height_pr14QPixmapDerivedai)(XiQPixmapDerived* derived, void* name);
ETA_EXPORT void ETA(QPixmap__override__width_pr14QPixmapDerivedai)(XiQPixmapDerived* derived, void* name);
ETA_EXPORT void ETA(QPixmap__override__size_pr14QPixmapDerivedai)(XiQPixmapDerived* derived, void* name);
ETA_EXPORT void ETA(QPixmap__override__toPixmap_pr14QPixmapDerivedai)(XiQPixmapDerived* derived, void* name);
ETA_EXPORT void ETA(QPixmap__override__toWidget_pr14QPixmapDerivedai)(XiQPixmapDerived* derived, void* name);

ETA_EXPORT XiQPixmap* ETA(qpixmap__alloc_r7QPixmap)();

inline QPixmap* fromXi(XiQPixmap* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQPixmap_vtable: public XiQPaintDevice_vtable
{
    void* reserved;
    void (*load)(XiQPixmap*, XiQString*);
    void (*save)(XiQPixmap*, XiQString*);
    void (*fill)(XiQPixmap*, XiQColor*);
    XiQPixmap* (*copy)(XiQPixmap*, XiQRect*);
    bool (*isNull)(XiQPixmap*);
    int (*height)(XiQPixmap*);
    int (*width)(XiQPixmap*);
    XiQSize* (*size)(XiQPixmap*);
};

inline XiQPixmap_vtable* XiQPixmap::vtable() {
    return static_cast<XiQPixmap_vtable*>(vptr);
}

extern XiQPixmap_vtable ETA(_vt_QPixmap);
extern int ETA(_size_QPixmap);
ETA_EXPORT void ETA(_init_QPixmap)() __attribute__((constructor));


ETA_EXPORT XiQPixmap* ETA(qpixmap_r7QPixmapii)(int width, int height);
ETA_EXPORT XiQPixmap* ETA(qpixmapFromFile_r7QPixmapr7QString)(XiQString* f);

inline XiQPixmap* toXi(const QPixmap& p) {
    XiQPixmap* ip = gcNew<XiQPixmap>();
    ip->handle = new QPixmap(p);
    return ip;
}


struct XiQColor_vtable;
struct XiQColor: public Xiobj
{
    XiQColor_vtable* vtable();
    XiQColor();
    QColor value;
    QColor* impl() {
        if (!initialized) 
            new (this) XiQColor();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQColor* me = static_cast<XiQColor*>(mePtr);
        if (me->initialized)
            me->~XiQColor();
    }

    static int alpha(XiQColor* __thisPtr);
    static int red(XiQColor* __thisPtr);
    static int green(XiQColor* __thisPtr);
    static int blue(XiQColor* __thisPtr);
    static void setAlpha(XiQColor* __thisPtr, int param0);
    static void setRed(XiQColor* __thisPtr, int param0);
    static void setGreen(XiQColor* __thisPtr, int param0);
    static void setBlue(XiQColor* __thisPtr, int param0);
    static XiQString* name(XiQColor* __thisPtr);
    static void setNamedColor(XiQColor* __thisPtr, XiQString* param0);
    static bool equals(XiQColor* __thisPtr, XiQColor* other);
    static bool neq(XiQColor* __thisPtr, XiQColor* other);
};

ETA_EXPORT int ETA(QColor__alpha_ir6QColor)(XiQColor* self);
ETA_EXPORT int ETA(QColor__red_ir6QColor)(XiQColor* self);
ETA_EXPORT int ETA(QColor__green_ir6QColor)(XiQColor* self);
ETA_EXPORT int ETA(QColor__blue_ir6QColor)(XiQColor* self);
ETA_EXPORT void ETA(QColor__setAlpha_pr6QColori)(XiQColor* self, int param0);
ETA_EXPORT void ETA(QColor__setRed_pr6QColori)(XiQColor* self, int param0);
ETA_EXPORT void ETA(QColor__setGreen_pr6QColori)(XiQColor* self, int param0);
ETA_EXPORT void ETA(QColor__setBlue_pr6QColori)(XiQColor* self, int param0);
ETA_EXPORT XiQString* ETA(QColor__name_r7QStringr6QColor)(XiQColor* self);
ETA_EXPORT void ETA(QColor__setNamedColor_pr6QColorr7QString)(XiQColor* self, XiQString* param0);
ETA_EXPORT bool ETA(QColor__equals_br6QColorr6QColor)(XiQColor* self, XiQColor* other);
ETA_EXPORT bool ETA(QColor__neq_br6QColorr6QColor)(XiQColor* self, XiQColor* other);

using XiQColorDerived = XiQColor_vtable;

ETA_EXPORT XiQColorDerived* ETA(QColor__extend_r13QColorDerived)();
ETA_EXPORT void ETA(QColor__downcast_pr6QColorr13QColorDerived)(XiQColor* self, XiQColorDerived* derived);

ETA_EXPORT void ETA(QColor__override__alpha_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);
ETA_EXPORT void ETA(QColor__override__red_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);
ETA_EXPORT void ETA(QColor__override__green_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);
ETA_EXPORT void ETA(QColor__override__blue_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);
ETA_EXPORT void ETA(QColor__override__setAlpha_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);
ETA_EXPORT void ETA(QColor__override__setRed_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);
ETA_EXPORT void ETA(QColor__override__setGreen_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);
ETA_EXPORT void ETA(QColor__override__setBlue_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);
ETA_EXPORT void ETA(QColor__override__name_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);
ETA_EXPORT void ETA(QColor__override__setNamedColor_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);
ETA_EXPORT void ETA(QColor__override__equals_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);
ETA_EXPORT void ETA(QColor__override__neq_pr13QColorDerivedai)(XiQColorDerived* derived, void* name);

ETA_EXPORT XiQColor* ETA(qcolor__alloc_r6QColor)();

inline XiQColor* toXi(const QColor& orig) {
    XiQColor* r = gcNew<XiQColor>();
    r->value = orig;
    return r;
}

inline QColor fromXi(XiQColor* wrapped) {
    return *wrapped->impl();
}

struct XiQColor_vtable: public Xivtable
{
    void* reserved;
    int (*alpha)(XiQColor*);
    int (*red)(XiQColor*);
    int (*green)(XiQColor*);
    int (*blue)(XiQColor*);
    void (*setAlpha)(XiQColor*, int);
    void (*setRed)(XiQColor*, int);
    void (*setGreen)(XiQColor*, int);
    void (*setBlue)(XiQColor*, int);
    XiQString* (*name)(XiQColor*);
    void (*setNamedColor)(XiQColor*, XiQString*);
    bool (*equals)(XiQColor*, XiQColor*);
    bool (*neq)(XiQColor*, XiQColor*);
};

inline XiQColor_vtable* XiQColor::vtable() {
    return static_cast<XiQColor_vtable*>(vptr);
}

extern XiQColor_vtable ETA(_vt_QColor);
extern int ETA(_size_QColor);
ETA_EXPORT void ETA(_init_QColor)() __attribute__((constructor));


ETA_EXPORT XiQColor* ETA(qcolor_r6QColoriii)(int r, int g, int b);
ETA_EXPORT XiQColor* ETA(qcolorRGBA_r6QColoriiii)(int r, int g, int b, int a);


struct XiPenStyle_vtable;
struct XiPenStyle: public Xiobj
{
    XiPenStyle_vtable* vtable();
    XiPenStyle();
    PenStyle value;
    PenStyle* impl() {
        if (!initialized) 
            new (this) XiPenStyle();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiPenStyle* me = static_cast<XiPenStyle*>(mePtr);
        if (me->initialized)
            me->~XiPenStyle();
    }

};

ETA_EXPORT XiPenStyle* ETA(NoPen_r8PenStyle)();
ETA_EXPORT XiPenStyle* ETA(SolidLine_r8PenStyle)();
ETA_EXPORT XiPenStyle* ETA(DashLine_r8PenStyle)();
ETA_EXPORT XiPenStyle* ETA(DotLine_r8PenStyle)();
ETA_EXPORT XiPenStyle* ETA(DashDotLine_r8PenStyle)();
ETA_EXPORT XiPenStyle* ETA(DashDotDotLine_r8PenStyle)();

using XiPenStyleDerived = XiPenStyle_vtable;

ETA_EXPORT XiPenStyleDerived* ETA(PenStyle__extend_r15PenStyleDerived)();
ETA_EXPORT void ETA(PenStyle__downcast_pr8PenStyler15PenStyleDerived)(XiPenStyle* self, XiPenStyleDerived* derived);


ETA_EXPORT XiPenStyle* ETA(penstyle__alloc_r8PenStyle)();

inline XiPenStyle* toXi(const PenStyle& orig) {
    if (orig == NoPen)
        return ETA(NoPen_r8PenStyle)();
    if (orig == SolidLine)
        return ETA(SolidLine_r8PenStyle)();
    if (orig == DashLine)
        return ETA(DashLine_r8PenStyle)();
    if (orig == DotLine)
        return ETA(DotLine_r8PenStyle)();
    if (orig == DashDotLine)
        return ETA(DashDotLine_r8PenStyle)();
    if (orig == DashDotDotLine)
        return ETA(DashDotDotLine_r8PenStyle)();
    XiPenStyle* r = gcNew<XiPenStyle>();
    r->value = orig;
    return r;
}

inline PenStyle fromXi(XiPenStyle* wrapped) {
    return *wrapped->impl();
}

struct XiPenStyle_vtable: public Xivtable
{
    void* reserved;
};

inline XiPenStyle_vtable* XiPenStyle::vtable() {
    return static_cast<XiPenStyle_vtable*>(vptr);
}

extern XiPenStyle_vtable ETA(_vt_PenStyle);
extern int ETA(_size_PenStyle);
ETA_EXPORT void ETA(_init_PenStyle)() __attribute__((constructor));




struct XiPenCapStyle_vtable;
struct XiPenCapStyle: public Xiobj
{
    XiPenCapStyle_vtable* vtable();
    XiPenCapStyle();
    PenCapStyle value;
    PenCapStyle* impl() {
        if (!initialized) 
            new (this) XiPenCapStyle();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiPenCapStyle* me = static_cast<XiPenCapStyle*>(mePtr);
        if (me->initialized)
            me->~XiPenCapStyle();
    }

};

ETA_EXPORT XiPenCapStyle* ETA(FlatCap_r11PenCapStyle)();
ETA_EXPORT XiPenCapStyle* ETA(SquareCap_r11PenCapStyle)();
ETA_EXPORT XiPenCapStyle* ETA(RoundCap_r11PenCapStyle)();

using XiPenCapStyleDerived = XiPenCapStyle_vtable;

ETA_EXPORT XiPenCapStyleDerived* ETA(PenCapStyle__extend_r18PenCapStyleDerived)();
ETA_EXPORT void ETA(PenCapStyle__downcast_pr11PenCapStyler18PenCapStyleDerived)(XiPenCapStyle* self, XiPenCapStyleDerived* derived);


ETA_EXPORT XiPenCapStyle* ETA(pencapstyle__alloc_r11PenCapStyle)();

inline XiPenCapStyle* toXi(const PenCapStyle& orig) {
    if (orig == FlatCap)
        return ETA(FlatCap_r11PenCapStyle)();
    if (orig == SquareCap)
        return ETA(SquareCap_r11PenCapStyle)();
    if (orig == RoundCap)
        return ETA(RoundCap_r11PenCapStyle)();
    XiPenCapStyle* r = gcNew<XiPenCapStyle>();
    r->value = orig;
    return r;
}

inline PenCapStyle fromXi(XiPenCapStyle* wrapped) {
    return *wrapped->impl();
}

struct XiPenCapStyle_vtable: public Xivtable
{
    void* reserved;
};

inline XiPenCapStyle_vtable* XiPenCapStyle::vtable() {
    return static_cast<XiPenCapStyle_vtable*>(vptr);
}

extern XiPenCapStyle_vtable ETA(_vt_PenCapStyle);
extern int ETA(_size_PenCapStyle);
ETA_EXPORT void ETA(_init_PenCapStyle)() __attribute__((constructor));




struct XiPenJoinStyle_vtable;
struct XiPenJoinStyle: public Xiobj
{
    XiPenJoinStyle_vtable* vtable();
    XiPenJoinStyle();
    PenJoinStyle value;
    PenJoinStyle* impl() {
        if (!initialized) 
            new (this) XiPenJoinStyle();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiPenJoinStyle* me = static_cast<XiPenJoinStyle*>(mePtr);
        if (me->initialized)
            me->~XiPenJoinStyle();
    }

};

ETA_EXPORT XiPenJoinStyle* ETA(MiterJoin_r12PenJoinStyle)();
ETA_EXPORT XiPenJoinStyle* ETA(BevelJoin_r12PenJoinStyle)();
ETA_EXPORT XiPenJoinStyle* ETA(RoundJoin_r12PenJoinStyle)();
ETA_EXPORT XiPenJoinStyle* ETA(SvgMiterJoin_r12PenJoinStyle)();

using XiPenJoinStyleDerived = XiPenJoinStyle_vtable;

ETA_EXPORT XiPenJoinStyleDerived* ETA(PenJoinStyle__extend_r19PenJoinStyleDerived)();
ETA_EXPORT void ETA(PenJoinStyle__downcast_pr12PenJoinStyler19PenJoinStyleDerived)(XiPenJoinStyle* self, XiPenJoinStyleDerived* derived);


ETA_EXPORT XiPenJoinStyle* ETA(penjoinstyle__alloc_r12PenJoinStyle)();

inline XiPenJoinStyle* toXi(const PenJoinStyle& orig) {
    if (orig == MiterJoin)
        return ETA(MiterJoin_r12PenJoinStyle)();
    if (orig == BevelJoin)
        return ETA(BevelJoin_r12PenJoinStyle)();
    if (orig == RoundJoin)
        return ETA(RoundJoin_r12PenJoinStyle)();
    if (orig == SvgMiterJoin)
        return ETA(SvgMiterJoin_r12PenJoinStyle)();
    XiPenJoinStyle* r = gcNew<XiPenJoinStyle>();
    r->value = orig;
    return r;
}

inline PenJoinStyle fromXi(XiPenJoinStyle* wrapped) {
    return *wrapped->impl();
}

struct XiPenJoinStyle_vtable: public Xivtable
{
    void* reserved;
};

inline XiPenJoinStyle_vtable* XiPenJoinStyle::vtable() {
    return static_cast<XiPenJoinStyle_vtable*>(vptr);
}

extern XiPenJoinStyle_vtable ETA(_vt_PenJoinStyle);
extern int ETA(_size_PenJoinStyle);
ETA_EXPORT void ETA(_init_PenJoinStyle)() __attribute__((constructor));




struct XiQPen_vtable;
struct XiQPen: public Xiobj
{
    XiQPen_vtable* vtable();
    XiQPen();
    QPen value;
    QPen* impl() {
        if (!initialized) 
            new (this) XiQPen();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQPen* me = static_cast<XiQPen*>(mePtr);
        if (me->initialized)
            me->~XiQPen();
    }

    static XiQBrush* brush(XiQPen* __thisPtr);
    static XiPenCapStyle* capStyle(XiQPen* __thisPtr);
    static XiQColor* color(XiQPen* __thisPtr);
    static bool isCosmetic(XiQPen* __thisPtr);
    static bool isSolid(XiQPen* __thisPtr);
    static XiPenJoinStyle* joinStyle(XiQPen* __thisPtr);
    static void setBrush(XiQPen* __thisPtr, XiQBrush* param0);
    static void setCapStyle(XiQPen* __thisPtr, XiPenCapStyle* param0);
    static void setColor(XiQPen* __thisPtr, XiQColor* param0);
    static void setCosmetic(XiQPen* __thisPtr, bool param0);
    static void setJoinStyle(XiQPen* __thisPtr, XiPenJoinStyle* param0);
    static void setStyle(XiQPen* __thisPtr, XiPenStyle* param0);
    static void setWidth(XiQPen* __thisPtr, int param0);
    static XiPenStyle* style(XiQPen* __thisPtr);
    static int width(XiQPen* __thisPtr);
    static bool equals(XiQPen* __thisPtr, XiQPen* other);
    static bool neq(XiQPen* __thisPtr, XiQPen* other);
};

ETA_EXPORT XiQBrush* ETA(QPen__brush_r6QBrushr4QPen)(XiQPen* self);
ETA_EXPORT XiPenCapStyle* ETA(QPen__capStyle_r11PenCapStyler4QPen)(XiQPen* self);
ETA_EXPORT XiQColor* ETA(QPen__color_r6QColorr4QPen)(XiQPen* self);
ETA_EXPORT bool ETA(QPen__isCosmetic_br4QPen)(XiQPen* self);
ETA_EXPORT bool ETA(QPen__isSolid_br4QPen)(XiQPen* self);
ETA_EXPORT XiPenJoinStyle* ETA(QPen__joinStyle_r12PenJoinStyler4QPen)(XiQPen* self);
ETA_EXPORT void ETA(QPen__setBrush_pr4QPenr6QBrush)(XiQPen* self, XiQBrush* param0);
ETA_EXPORT void ETA(QPen__setCapStyle_pr4QPenr11PenCapStyle)(XiQPen* self, XiPenCapStyle* param0);
ETA_EXPORT void ETA(QPen__setColor_pr4QPenr6QColor)(XiQPen* self, XiQColor* param0);
ETA_EXPORT void ETA(QPen__setCosmetic_pr4QPenb)(XiQPen* self, bool param0);
ETA_EXPORT void ETA(QPen__setJoinStyle_pr4QPenr12PenJoinStyle)(XiQPen* self, XiPenJoinStyle* param0);
ETA_EXPORT void ETA(QPen__setStyle_pr4QPenr8PenStyle)(XiQPen* self, XiPenStyle* param0);
ETA_EXPORT void ETA(QPen__setWidth_pr4QPeni)(XiQPen* self, int param0);
ETA_EXPORT XiPenStyle* ETA(QPen__style_r8PenStyler4QPen)(XiQPen* self);
ETA_EXPORT int ETA(QPen__width_ir4QPen)(XiQPen* self);
ETA_EXPORT bool ETA(QPen__equals_br4QPenr4QPen)(XiQPen* self, XiQPen* other);
ETA_EXPORT bool ETA(QPen__neq_br4QPenr4QPen)(XiQPen* self, XiQPen* other);

using XiQPenDerived = XiQPen_vtable;

ETA_EXPORT XiQPenDerived* ETA(QPen__extend_r11QPenDerived)();
ETA_EXPORT void ETA(QPen__downcast_pr4QPenr11QPenDerived)(XiQPen* self, XiQPenDerived* derived);

ETA_EXPORT void ETA(QPen__override__brush_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__capStyle_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__color_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__isCosmetic_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__isSolid_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__joinStyle_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__setBrush_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__setCapStyle_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__setColor_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__setCosmetic_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__setJoinStyle_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__setStyle_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__setWidth_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__style_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__width_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__equals_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);
ETA_EXPORT void ETA(QPen__override__neq_pr11QPenDerivedai)(XiQPenDerived* derived, void* name);

ETA_EXPORT XiQPen* ETA(qpen__alloc_r4QPen)();

inline XiQPen* toXi(const QPen& orig) {
    XiQPen* r = gcNew<XiQPen>();
    r->value = orig;
    return r;
}

inline QPen fromXi(XiQPen* wrapped) {
    return *wrapped->impl();
}

struct XiQPen_vtable: public Xivtable
{
    void* reserved;
    XiQBrush* (*brush)(XiQPen*);
    XiPenCapStyle* (*capStyle)(XiQPen*);
    XiQColor* (*color)(XiQPen*);
    bool (*isCosmetic)(XiQPen*);
    bool (*isSolid)(XiQPen*);
    XiPenJoinStyle* (*joinStyle)(XiQPen*);
    void (*setBrush)(XiQPen*, XiQBrush*);
    void (*setCapStyle)(XiQPen*, XiPenCapStyle*);
    void (*setColor)(XiQPen*, XiQColor*);
    void (*setCosmetic)(XiQPen*, bool);
    void (*setJoinStyle)(XiQPen*, XiPenJoinStyle*);
    void (*setStyle)(XiQPen*, XiPenStyle*);
    void (*setWidth)(XiQPen*, int);
    XiPenStyle* (*style)(XiQPen*);
    int (*width)(XiQPen*);
    bool (*equals)(XiQPen*, XiQPen*);
    bool (*neq)(XiQPen*, XiQPen*);
};

inline XiQPen_vtable* XiQPen::vtable() {
    return static_cast<XiQPen_vtable*>(vptr);
}

extern XiQPen_vtable ETA(_vt_QPen);
extern int ETA(_size_QPen);
ETA_EXPORT void ETA(_init_QPen)() __attribute__((constructor));


ETA_EXPORT XiQPen* ETA(qpen_r4QPenr6QColor)(XiQColor* c);


struct XiQBrush_vtable;
struct XiQBrush: public Xiobj
{
    XiQBrush_vtable* vtable();
    XiQBrush();
    QBrush value;
    QBrush* impl() {
        if (!initialized) 
            new (this) XiQBrush();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQBrush* me = static_cast<XiQBrush*>(mePtr);
        if (me->initialized)
            me->~XiQBrush();
    }

    static XiQColor* color(XiQBrush* __thisPtr);
    static XiQPixmap* texture(XiQBrush* __thisPtr);
    static void setColor(XiQBrush* __thisPtr, XiQColor* c);
    static void setTexture(XiQBrush* __thisPtr, XiQPixmap* p);
};

ETA_EXPORT XiQColor* ETA(QBrush__color_r6QColorr6QBrush)(XiQBrush* self);
ETA_EXPORT XiQPixmap* ETA(QBrush__texture_r7QPixmapr6QBrush)(XiQBrush* self);
ETA_EXPORT void ETA(QBrush__setColor_pr6QBrushr6QColor)(XiQBrush* self, XiQColor* c);
ETA_EXPORT void ETA(QBrush__setTexture_pr6QBrushr7QPixmap)(XiQBrush* self, XiQPixmap* p);

using XiQBrushDerived = XiQBrush_vtable;

ETA_EXPORT XiQBrushDerived* ETA(QBrush__extend_r13QBrushDerived)();
ETA_EXPORT void ETA(QBrush__downcast_pr6QBrushr13QBrushDerived)(XiQBrush* self, XiQBrushDerived* derived);

ETA_EXPORT void ETA(QBrush__override__color_pr13QBrushDerivedai)(XiQBrushDerived* derived, void* name);
ETA_EXPORT void ETA(QBrush__override__texture_pr13QBrushDerivedai)(XiQBrushDerived* derived, void* name);
ETA_EXPORT void ETA(QBrush__override__setColor_pr13QBrushDerivedai)(XiQBrushDerived* derived, void* name);
ETA_EXPORT void ETA(QBrush__override__setTexture_pr13QBrushDerivedai)(XiQBrushDerived* derived, void* name);

ETA_EXPORT XiQBrush* ETA(qbrush__alloc_r6QBrush)();

inline XiQBrush* toXi(const QBrush& orig) {
    XiQBrush* r = gcNew<XiQBrush>();
    r->value = orig;
    return r;
}

inline QBrush fromXi(XiQBrush* wrapped) {
    return *wrapped->impl();
}

struct XiQBrush_vtable: public Xivtable
{
    void* reserved;
    XiQColor* (*color)(XiQBrush*);
    XiQPixmap* (*texture)(XiQBrush*);
    void (*setColor)(XiQBrush*, XiQColor*);
    void (*setTexture)(XiQBrush*, XiQPixmap*);
};

inline XiQBrush_vtable* XiQBrush::vtable() {
    return static_cast<XiQBrush_vtable*>(vptr);
}

extern XiQBrush_vtable ETA(_vt_QBrush);
extern int ETA(_size_QBrush);
ETA_EXPORT void ETA(_init_QBrush)() __attribute__((constructor));


ETA_EXPORT XiQBrush* ETA(qbrush_r6QBrushr6QColor)(XiQColor* c);
ETA_EXPORT XiQBrush* ETA(qtextureBrush_r6QBrushr7QPixmap)(XiQPixmap* p);
typedef QFont::Style FontStyle;


struct XiFontStyle_vtable;
struct XiFontStyle: public Xiobj
{
    XiFontStyle_vtable* vtable();
    XiFontStyle();
    FontStyle value;
    FontStyle* impl() {
        if (!initialized) 
            new (this) XiFontStyle();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiFontStyle* me = static_cast<XiFontStyle*>(mePtr);
        if (me->initialized)
            me->~XiFontStyle();
    }

};

ETA_EXPORT XiFontStyle* ETA(StyleNormal_r9FontStyle)();
ETA_EXPORT XiFontStyle* ETA(StyleItalic_r9FontStyle)();
ETA_EXPORT XiFontStyle* ETA(StyleOblique_r9FontStyle)();

using XiFontStyleDerived = XiFontStyle_vtable;

ETA_EXPORT XiFontStyleDerived* ETA(FontStyle__extend_r16FontStyleDerived)();
ETA_EXPORT void ETA(FontStyle__downcast_pr9FontStyler16FontStyleDerived)(XiFontStyle* self, XiFontStyleDerived* derived);


ETA_EXPORT XiFontStyle* ETA(fontstyle__alloc_r9FontStyle)();

inline XiFontStyle* toXi(const FontStyle& orig) {
    if (orig == QFont::StyleNormal)
        return ETA(StyleNormal_r9FontStyle)();
    if (orig == QFont::StyleItalic)
        return ETA(StyleItalic_r9FontStyle)();
    if (orig == QFont::StyleOblique)
        return ETA(StyleOblique_r9FontStyle)();
    XiFontStyle* r = gcNew<XiFontStyle>();
    r->value = orig;
    return r;
}

inline FontStyle fromXi(XiFontStyle* wrapped) {
    return *wrapped->impl();
}

struct XiFontStyle_vtable: public Xivtable
{
    void* reserved;
};

inline XiFontStyle_vtable* XiFontStyle::vtable() {
    return static_cast<XiFontStyle_vtable*>(vptr);
}

extern XiFontStyle_vtable ETA(_vt_FontStyle);
extern int ETA(_size_FontStyle);
ETA_EXPORT void ETA(_init_FontStyle)() __attribute__((constructor));




struct XiQFont_vtable;
struct XiQFont: public Xiobj
{
    XiQFont_vtable* vtable();
    XiQFont();
    QFont value;
    QFont* impl() {
        if (!initialized) 
            new (this) XiQFont();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQFont* me = static_cast<XiQFont*>(mePtr);
        if (me->initialized)
            me->~XiQFont();
    }

    static bool bold(XiQFont* __thisPtr);
    static void setBold(XiQFont* __thisPtr, bool param0);
    static bool italic(XiQFont* __thisPtr);
    static void setItalic(XiQFont* __thisPtr, bool param0);
    static XiQString* family(XiQFont* __thisPtr);
    static void setFamily(XiQFont* __thisPtr, XiQString* param0);
    static bool fixedPitch(XiQFont* __thisPtr);
    static void setFixedPitch(XiQFont* __thisPtr, bool param0);
    static bool kerning(XiQFont* __thisPtr);
    static void setKerning(XiQFont* __thisPtr, bool param0);
    static int pixelSize(XiQFont* __thisPtr);
    static void setPixelSize(XiQFont* __thisPtr, int param0);
    static int pointSize(XiQFont* __thisPtr);
    static void setPointSize(XiQFont* __thisPtr, int param0);
    static bool overline(XiQFont* __thisPtr);
    static bool underline(XiQFont* __thisPtr);
    static bool strikeOut(XiQFont* __thisPtr);
    static void setOverline(XiQFont* __thisPtr, bool param0);
    static void setUnderline(XiQFont* __thisPtr, bool param0);
    static void setStrikeOut(XiQFont* __thisPtr, bool param0);
    static XiQString* toString(XiQFont* __thisPtr);
};

ETA_EXPORT bool ETA(QFont__bold_br5QFont)(XiQFont* self);
ETA_EXPORT void ETA(QFont__setBold_pr5QFontb)(XiQFont* self, bool param0);
ETA_EXPORT bool ETA(QFont__italic_br5QFont)(XiQFont* self);
ETA_EXPORT void ETA(QFont__setItalic_pr5QFontb)(XiQFont* self, bool param0);
ETA_EXPORT XiQString* ETA(QFont__family_r7QStringr5QFont)(XiQFont* self);
ETA_EXPORT void ETA(QFont__setFamily_pr5QFontr7QString)(XiQFont* self, XiQString* param0);
ETA_EXPORT bool ETA(QFont__fixedPitch_br5QFont)(XiQFont* self);
ETA_EXPORT void ETA(QFont__setFixedPitch_pr5QFontb)(XiQFont* self, bool param0);
ETA_EXPORT bool ETA(QFont__kerning_br5QFont)(XiQFont* self);
ETA_EXPORT void ETA(QFont__setKerning_pr5QFontb)(XiQFont* self, bool param0);
ETA_EXPORT int ETA(QFont__pixelSize_ir5QFont)(XiQFont* self);
ETA_EXPORT void ETA(QFont__setPixelSize_pr5QFonti)(XiQFont* self, int param0);
ETA_EXPORT int ETA(QFont__pointSize_ir5QFont)(XiQFont* self);
ETA_EXPORT void ETA(QFont__setPointSize_pr5QFonti)(XiQFont* self, int param0);
ETA_EXPORT bool ETA(QFont__overline_br5QFont)(XiQFont* self);
ETA_EXPORT bool ETA(QFont__underline_br5QFont)(XiQFont* self);
ETA_EXPORT bool ETA(QFont__strikeOut_br5QFont)(XiQFont* self);
ETA_EXPORT void ETA(QFont__setOverline_pr5QFontb)(XiQFont* self, bool param0);
ETA_EXPORT void ETA(QFont__setUnderline_pr5QFontb)(XiQFont* self, bool param0);
ETA_EXPORT void ETA(QFont__setStrikeOut_pr5QFontb)(XiQFont* self, bool param0);
ETA_EXPORT XiQString* ETA(QFont__toString_r7QStringr5QFont)(XiQFont* self);

using XiQFontDerived = XiQFont_vtable;

ETA_EXPORT XiQFontDerived* ETA(QFont__extend_r12QFontDerived)();
ETA_EXPORT void ETA(QFont__downcast_pr5QFontr12QFontDerived)(XiQFont* self, XiQFontDerived* derived);

ETA_EXPORT void ETA(QFont__override__bold_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__setBold_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__italic_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__setItalic_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__family_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__setFamily_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__fixedPitch_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__setFixedPitch_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__kerning_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__setKerning_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__pixelSize_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__setPixelSize_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__pointSize_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__setPointSize_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__overline_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__underline_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__strikeOut_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__setOverline_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__setUnderline_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__setStrikeOut_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);
ETA_EXPORT void ETA(QFont__override__toString_pr12QFontDerivedai)(XiQFontDerived* derived, void* name);

ETA_EXPORT XiQFont* ETA(qfont__alloc_r5QFont)();

inline XiQFont* toXi(const QFont& orig) {
    XiQFont* r = gcNew<XiQFont>();
    r->value = orig;
    return r;
}

inline QFont fromXi(XiQFont* wrapped) {
    return *wrapped->impl();
}

struct XiQFont_vtable: public Xivtable
{
    void* reserved;
    bool (*bold)(XiQFont*);
    void (*setBold)(XiQFont*, bool);
    bool (*italic)(XiQFont*);
    void (*setItalic)(XiQFont*, bool);
    XiQString* (*family)(XiQFont*);
    void (*setFamily)(XiQFont*, XiQString*);
    bool (*fixedPitch)(XiQFont*);
    void (*setFixedPitch)(XiQFont*, bool);
    bool (*kerning)(XiQFont*);
    void (*setKerning)(XiQFont*, bool);
    int (*pixelSize)(XiQFont*);
    void (*setPixelSize)(XiQFont*, int);
    int (*pointSize)(XiQFont*);
    void (*setPointSize)(XiQFont*, int);
    bool (*overline)(XiQFont*);
    bool (*underline)(XiQFont*);
    bool (*strikeOut)(XiQFont*);
    void (*setOverline)(XiQFont*, bool);
    void (*setUnderline)(XiQFont*, bool);
    void (*setStrikeOut)(XiQFont*, bool);
    XiQString* (*toString)(XiQFont*);
};

inline XiQFont_vtable* XiQFont::vtable() {
    return static_cast<XiQFont_vtable*>(vptr);
}

extern XiQFont_vtable ETA(_vt_QFont);
extern int ETA(_size_QFont);
ETA_EXPORT void ETA(_init_QFont)() __attribute__((constructor));


ETA_EXPORT XiQFont* ETA(qfont_r5QFont)();


struct XiTextElideMode_vtable;
struct XiTextElideMode: public Xiobj
{
    XiTextElideMode_vtable* vtable();
    XiTextElideMode();
    TextElideMode value;
    TextElideMode* impl() {
        if (!initialized) 
            new (this) XiTextElideMode();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiTextElideMode* me = static_cast<XiTextElideMode*>(mePtr);
        if (me->initialized)
            me->~XiTextElideMode();
    }

};

ETA_EXPORT XiTextElideMode* ETA(ElideLeft_r13TextElideMode)();
ETA_EXPORT XiTextElideMode* ETA(ElideRight_r13TextElideMode)();
ETA_EXPORT XiTextElideMode* ETA(ElideMiddle_r13TextElideMode)();
ETA_EXPORT XiTextElideMode* ETA(ElideNone_r13TextElideMode)();

using XiTextElideModeDerived = XiTextElideMode_vtable;

ETA_EXPORT XiTextElideModeDerived* ETA(TextElideMode__extend_r20TextElideModeDerived)();
ETA_EXPORT void ETA(TextElideMode__downcast_pr13TextElideModer20TextElideModeDerived)(XiTextElideMode* self, XiTextElideModeDerived* derived);


ETA_EXPORT XiTextElideMode* ETA(textelidemode__alloc_r13TextElideMode)();

inline XiTextElideMode* toXi(const TextElideMode& orig) {
    if (orig == ElideLeft)
        return ETA(ElideLeft_r13TextElideMode)();
    if (orig == ElideRight)
        return ETA(ElideRight_r13TextElideMode)();
    if (orig == ElideMiddle)
        return ETA(ElideMiddle_r13TextElideMode)();
    if (orig == ElideNone)
        return ETA(ElideNone_r13TextElideMode)();
    XiTextElideMode* r = gcNew<XiTextElideMode>();
    r->value = orig;
    return r;
}

inline TextElideMode fromXi(XiTextElideMode* wrapped) {
    return *wrapped->impl();
}

struct XiTextElideMode_vtable: public Xivtable
{
    void* reserved;
};

inline XiTextElideMode_vtable* XiTextElideMode::vtable() {
    return static_cast<XiTextElideMode_vtable*>(vptr);
}

extern XiTextElideMode_vtable ETA(_vt_TextElideMode);
extern int ETA(_size_TextElideMode);
ETA_EXPORT void ETA(_init_TextElideMode)() __attribute__((constructor));




struct XiQFontMetrics_vtable;
struct XiQFontMetrics: public Xiobj
{
    XiQFontMetrics_vtable* vtable();
    XiQFontMetrics();
    QFontMetrics* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QFontMetrics wrappedType;
    QFontMetrics* handle;
    QFontMetrics* getImpl() {
        return handle;
    }

    void createImpl() {
        assert(false);
    }
    static int ascent(XiQFontMetrics* __thisPtr);
    static int descent(XiQFontMetrics* __thisPtr);
    static int height(XiQFontMetrics* __thisPtr);
    static int leading(XiQFontMetrics* __thisPtr);
    static int lineSpacing(XiQFontMetrics* __thisPtr);
    static int xHeight(XiQFontMetrics* __thisPtr);
    static int averageCharWidth(XiQFontMetrics* __thisPtr);
    static int maxWidth(XiQFontMetrics* __thisPtr);
    static bool inFont(XiQFontMetrics* __thisPtr, int ch);
    static int leftBearing(XiQFontMetrics* __thisPtr, int ch);
    static int minLeftBearing(XiQFontMetrics* __thisPtr);
    static int rightBearing(XiQFontMetrics* __thisPtr, int ch);
    static int minRightBearing(XiQFontMetrics* __thisPtr);
    static int lineWidth(XiQFontMetrics* __thisPtr);
    static int overlinePos(XiQFontMetrics* __thisPtr);
    static int strikeOutPos(XiQFontMetrics* __thisPtr);
    static int underlinePos(XiQFontMetrics* __thisPtr);
    static XiQRect* boundingRect(XiQFontMetrics* __thisPtr, XiQString* param0);
    static XiQRect* tightBoundingRect(XiQFontMetrics* __thisPtr, XiQString* param0);
    static int width(XiQFontMetrics* __thisPtr, XiQString* param0);
    static XiQString* elidedText(XiQFontMetrics* __thisPtr, XiQString* text, XiTextElideMode* mode, int w);
};

ETA_EXPORT int ETA(QFontMetrics__ascent_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__descent_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__height_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__leading_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__lineSpacing_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__xHeight_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__averageCharWidth_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__maxWidth_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT bool ETA(QFontMetrics__inFont_br12QFontMetricsi)(XiQFontMetrics* self, int ch);
ETA_EXPORT int ETA(QFontMetrics__leftBearing_ir12QFontMetricsi)(XiQFontMetrics* self, int ch);
ETA_EXPORT int ETA(QFontMetrics__minLeftBearing_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__rightBearing_ir12QFontMetricsi)(XiQFontMetrics* self, int ch);
ETA_EXPORT int ETA(QFontMetrics__minRightBearing_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__lineWidth_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__overlinePos_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__strikeOutPos_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT int ETA(QFontMetrics__underlinePos_ir12QFontMetrics)(XiQFontMetrics* self);
ETA_EXPORT XiQRect* ETA(QFontMetrics__boundingRect_r5QRectr12QFontMetricsr7QString)(XiQFontMetrics* self, XiQString* param0);
ETA_EXPORT XiQRect* ETA(QFontMetrics__tightBoundingRect_r5QRectr12QFontMetricsr7QString)(XiQFontMetrics* self, XiQString* param0);
ETA_EXPORT int ETA(QFontMetrics__width_ir12QFontMetricsr7QString)(XiQFontMetrics* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QFontMetrics__elidedText_r7QStringr12QFontMetricsr7QStringr13TextElideModei)(XiQFontMetrics* self, XiQString* text, XiTextElideMode* mode, int w);

using XiQFontMetricsDerived = XiQFontMetrics_vtable;

ETA_EXPORT XiQFontMetricsDerived* ETA(QFontMetrics__extend_r19QFontMetricsDerived)();
ETA_EXPORT void ETA(QFontMetrics__downcast_pr12QFontMetricsr19QFontMetricsDerived)(XiQFontMetrics* self, XiQFontMetricsDerived* derived);

ETA_EXPORT void ETA(QFontMetrics__override__ascent_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__descent_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__height_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__leading_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__lineSpacing_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__xHeight_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__averageCharWidth_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__maxWidth_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__inFont_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__leftBearing_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__minLeftBearing_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__rightBearing_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__minRightBearing_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__lineWidth_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__overlinePos_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__strikeOutPos_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__underlinePos_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__boundingRect_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__tightBoundingRect_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__width_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);
ETA_EXPORT void ETA(QFontMetrics__override__elidedText_pr19QFontMetricsDerivedai)(XiQFontMetricsDerived* derived, void* name);

ETA_EXPORT XiQFontMetrics* ETA(qfontmetrics__alloc_r12QFontMetrics)();

inline QFontMetrics* fromXi(XiQFontMetrics* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQFontMetrics_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    int (*ascent)(XiQFontMetrics*);
    int (*descent)(XiQFontMetrics*);
    int (*height)(XiQFontMetrics*);
    int (*leading)(XiQFontMetrics*);
    int (*lineSpacing)(XiQFontMetrics*);
    int (*xHeight)(XiQFontMetrics*);
    int (*averageCharWidth)(XiQFontMetrics*);
    int (*maxWidth)(XiQFontMetrics*);
    bool (*inFont)(XiQFontMetrics*, int);
    int (*leftBearing)(XiQFontMetrics*, int);
    int (*minLeftBearing)(XiQFontMetrics*);
    int (*rightBearing)(XiQFontMetrics*, int);
    int (*minRightBearing)(XiQFontMetrics*);
    int (*lineWidth)(XiQFontMetrics*);
    int (*overlinePos)(XiQFontMetrics*);
    int (*strikeOutPos)(XiQFontMetrics*);
    int (*underlinePos)(XiQFontMetrics*);
    XiQRect* (*boundingRect)(XiQFontMetrics*, XiQString*);
    XiQRect* (*tightBoundingRect)(XiQFontMetrics*, XiQString*);
    int (*width)(XiQFontMetrics*, XiQString*);
    XiQString* (*elidedText)(XiQFontMetrics*, XiQString*, XiTextElideMode*, int);
};

inline XiQFontMetrics_vtable* XiQFontMetrics::vtable() {
    return static_cast<XiQFontMetrics_vtable*>(vptr);
}

extern XiQFontMetrics_vtable ETA(_vt_QFontMetrics);
extern int ETA(_size_QFontMetrics);
ETA_EXPORT void ETA(_init_QFontMetrics)() __attribute__((constructor));


ETA_EXPORT XiQFontMetrics* ETA(qfontMetrics_r12QFontMetricsr5QFont)(XiQFont* f);


struct XiQPainter_vtable;
struct XiQPainter: public Xiobj
{
    XiQPainter_vtable* vtable();
    XiQPainter();
    QPainter* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QPainter wrappedType;
    QPainter* handle;
    QPainter* getImpl() {
        return handle;
    }

    void createImpl() {
        handle = new QPainter();
    }
    static void begin(XiQPainter* __thisPtr, XiQPaintDevice* param0);
    static void end(XiQPainter* __thisPtr);
    static bool isActive(XiQPainter* __thisPtr);
    static void setHighQuality(XiQPainter* __thisPtr, bool on);
    static void save(XiQPainter* __thisPtr);
    static void restore(XiQPainter* __thisPtr);
    static XiQPoint* brushOrigin(XiQPainter* __thisPtr);
    static void setBrushOrigin(XiQPainter* __thisPtr, XiQPoint* param0);
    static XiQFont* font(XiQPainter* __thisPtr);
    static void setFont(XiQPainter* __thisPtr, XiQFont* f);
    static int opacity(XiQPainter* __thisPtr);
    static void setOpacity(XiQPainter* __thisPtr, int o);
    static XiQPen* pen(XiQPainter* __thisPtr);
    static void setPen(XiQPainter* __thisPtr, XiQPen* param0);
    static XiQBrush* brush(XiQPainter* __thisPtr);
    static void setBrush(XiQPainter* __thisPtr, XiQBrush* param0);
    static void drawArc(XiQPainter* __thisPtr, XiQRect* rect, int starAngle, int spanAngle);
    static void drawChord(XiQPainter* __thisPtr, XiQRect* rect, int starAngle, int spanAngle);
    static void drawEllipse(XiQPainter* __thisPtr, XiQRect* rect);
    static void drawPie(XiQPainter* __thisPtr, XiQRect* rect, int starAngle, int spanAngle);
    static void drawConvexPolygon(XiQPainter* __thisPtr, void* points);
    static void drawPolygon(XiQPainter* __thisPtr, void* points);
    static void drawRect(XiQPainter* __thisPtr, XiQRect* r);
    static void eraseRect(XiQPainter* __thisPtr, XiQRect* r);
    static void fillRect(XiQPainter* __thisPtr, XiQRect* r, XiQBrush* b);
    static void drawPixmap(XiQPainter* __thisPtr, XiQPoint* p, XiQPixmap* pm);
    static void drawPixmapPortion(XiQPainter* __thisPtr, XiQPoint* p, XiQPixmap* pm, XiQRect* portion);
    static void drawScaledPixmapPortion(XiQPainter* __thisPtr, XiQRect* d, XiQPixmap* pm, XiQRect* portion);
    static void drawTiledPixmap(XiQPainter* __thisPtr, XiQRect* d, XiQPixmap* p);
    static void drawTiledOffsetPixmap(XiQPainter* __thisPtr, XiQRect* d, XiQPixmap* p, XiQPoint* origin);
    static void drawPoint(XiQPainter* __thisPtr, XiQPoint* p);
    static void drawLine(XiQPainter* __thisPtr, XiQPoint* p1, XiQPoint* p2);
    static void drawText(XiQPainter* __thisPtr, XiQPoint* p, XiQString* text);
};

ETA_EXPORT void ETA(QPainter__begin_pr8QPainterr12QPaintDevice)(XiQPainter* self, XiQPaintDevice* param0);
ETA_EXPORT void ETA(QPainter__end_pr8QPainter)(XiQPainter* self);
ETA_EXPORT bool ETA(QPainter__isActive_br8QPainter)(XiQPainter* self);
ETA_EXPORT void ETA(QPainter__setHighQuality_pr8QPainterb)(XiQPainter* self, bool on);
ETA_EXPORT void ETA(QPainter__save_pr8QPainter)(XiQPainter* self);
ETA_EXPORT void ETA(QPainter__restore_pr8QPainter)(XiQPainter* self);
ETA_EXPORT XiQPoint* ETA(QPainter__brushOrigin_r6QPointr8QPainter)(XiQPainter* self);
ETA_EXPORT void ETA(QPainter__setBrushOrigin_pr8QPainterr6QPoint)(XiQPainter* self, XiQPoint* param0);
ETA_EXPORT XiQFont* ETA(QPainter__font_r5QFontr8QPainter)(XiQPainter* self);
ETA_EXPORT void ETA(QPainter__setFont_pr8QPainterr5QFont)(XiQPainter* self, XiQFont* f);
ETA_EXPORT int ETA(QPainter__opacity_ir8QPainter)(XiQPainter* self);
ETA_EXPORT void ETA(QPainter__setOpacity_pr8QPainteri)(XiQPainter* self, int o);
ETA_EXPORT XiQPen* ETA(QPainter__pen_r4QPenr8QPainter)(XiQPainter* self);
ETA_EXPORT void ETA(QPainter__setPen_pr8QPainterr4QPen)(XiQPainter* self, XiQPen* param0);
ETA_EXPORT XiQBrush* ETA(QPainter__brush_r6QBrushr8QPainter)(XiQPainter* self);
ETA_EXPORT void ETA(QPainter__setBrush_pr8QPainterr6QBrush)(XiQPainter* self, XiQBrush* param0);
ETA_EXPORT void ETA(QPainter__drawArc_pr8QPainterr5QRectii)(XiQPainter* self, XiQRect* rect, int starAngle, int spanAngle);
ETA_EXPORT void ETA(QPainter__drawChord_pr8QPainterr5QRectii)(XiQPainter* self, XiQRect* rect, int starAngle, int spanAngle);
ETA_EXPORT void ETA(QPainter__drawEllipse_pr8QPainterr5QRect)(XiQPainter* self, XiQRect* rect);
ETA_EXPORT void ETA(QPainter__drawPie_pr8QPainterr5QRectii)(XiQPainter* self, XiQRect* rect, int starAngle, int spanAngle);
ETA_EXPORT void ETA(QPainter__drawConvexPolygon_pr8QPainterar6QPoint)(XiQPainter* self, void* points);
ETA_EXPORT void ETA(QPainter__drawPolygon_pr8QPainterar6QPoint)(XiQPainter* self, void* points);
ETA_EXPORT void ETA(QPainter__drawRect_pr8QPainterr5QRect)(XiQPainter* self, XiQRect* r);
ETA_EXPORT void ETA(QPainter__eraseRect_pr8QPainterr5QRect)(XiQPainter* self, XiQRect* r);
ETA_EXPORT void ETA(QPainter__fillRect_pr8QPainterr5QRectr6QBrush)(XiQPainter* self, XiQRect* r, XiQBrush* b);
ETA_EXPORT void ETA(QPainter__drawPixmap_pr8QPainterr6QPointr7QPixmap)(XiQPainter* self, XiQPoint* p, XiQPixmap* pm);
ETA_EXPORT void ETA(QPainter__drawPixmapPortion_pr8QPainterr6QPointr7QPixmapr5QRect)(XiQPainter* self, XiQPoint* p, XiQPixmap* pm, XiQRect* portion);
ETA_EXPORT void ETA(QPainter__drawScaledPixmapPortion_pr8QPainterr5QRectr7QPixmapr5QRect)(XiQPainter* self, XiQRect* d, XiQPixmap* pm, XiQRect* portion);
ETA_EXPORT void ETA(QPainter__drawTiledPixmap_pr8QPainterr5QRectr7QPixmap)(XiQPainter* self, XiQRect* d, XiQPixmap* p);
ETA_EXPORT void ETA(QPainter__drawTiledOffsetPixmap_pr8QPainterr5QRectr7QPixmapr6QPoint)(XiQPainter* self, XiQRect* d, XiQPixmap* p, XiQPoint* origin);
ETA_EXPORT void ETA(QPainter__drawPoint_pr8QPainterr6QPoint)(XiQPainter* self, XiQPoint* p);
ETA_EXPORT void ETA(QPainter__drawLine_pr8QPainterr6QPointr6QPoint)(XiQPainter* self, XiQPoint* p1, XiQPoint* p2);
ETA_EXPORT void ETA(QPainter__drawText_pr8QPainterr6QPointr7QString)(XiQPainter* self, XiQPoint* p, XiQString* text);

using XiQPainterDerived = XiQPainter_vtable;

ETA_EXPORT XiQPainterDerived* ETA(QPainter__extend_r15QPainterDerived)();
ETA_EXPORT void ETA(QPainter__downcast_pr8QPainterr15QPainterDerived)(XiQPainter* self, XiQPainterDerived* derived);

ETA_EXPORT void ETA(QPainter__override__begin_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__end_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__isActive_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__setHighQuality_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__save_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__restore_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__brushOrigin_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__setBrushOrigin_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__font_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__setFont_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__opacity_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__setOpacity_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__pen_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__setPen_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__brush_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__setBrush_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawArc_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawChord_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawEllipse_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawPie_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawConvexPolygon_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawPolygon_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawRect_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__eraseRect_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__fillRect_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawPixmap_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawPixmapPortion_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawScaledPixmapPortion_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawTiledPixmap_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawTiledOffsetPixmap_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawPoint_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawLine_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);
ETA_EXPORT void ETA(QPainter__override__drawText_pr15QPainterDerivedai)(XiQPainterDerived* derived, void* name);

ETA_EXPORT XiQPainter* ETA(qpainter__alloc_r8QPainter)();

inline QPainter* fromXi(XiQPainter* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQPainter_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    void (*begin)(XiQPainter*, XiQPaintDevice*);
    void (*end)(XiQPainter*);
    bool (*isActive)(XiQPainter*);
    void (*setHighQuality)(XiQPainter*, bool);
    void (*save)(XiQPainter*);
    void (*restore)(XiQPainter*);
    XiQPoint* (*brushOrigin)(XiQPainter*);
    void (*setBrushOrigin)(XiQPainter*, XiQPoint*);
    XiQFont* (*font)(XiQPainter*);
    void (*setFont)(XiQPainter*, XiQFont*);
    int (*opacity)(XiQPainter*);
    void (*setOpacity)(XiQPainter*, int);
    XiQPen* (*pen)(XiQPainter*);
    void (*setPen)(XiQPainter*, XiQPen*);
    XiQBrush* (*brush)(XiQPainter*);
    void (*setBrush)(XiQPainter*, XiQBrush*);
    void (*drawArc)(XiQPainter*, XiQRect*, int, int);
    void (*drawChord)(XiQPainter*, XiQRect*, int, int);
    void (*drawEllipse)(XiQPainter*, XiQRect*);
    void (*drawPie)(XiQPainter*, XiQRect*, int, int);
    void (*drawConvexPolygon)(XiQPainter*, void*);
    void (*drawPolygon)(XiQPainter*, void*);
    void (*drawRect)(XiQPainter*, XiQRect*);
    void (*eraseRect)(XiQPainter*, XiQRect*);
    void (*fillRect)(XiQPainter*, XiQRect*, XiQBrush*);
    void (*drawPixmap)(XiQPainter*, XiQPoint*, XiQPixmap*);
    void (*drawPixmapPortion)(XiQPainter*, XiQPoint*, XiQPixmap*, XiQRect*);
    void (*drawScaledPixmapPortion)(XiQPainter*, XiQRect*, XiQPixmap*, XiQRect*);
    void (*drawTiledPixmap)(XiQPainter*, XiQRect*, XiQPixmap*);
    void (*drawTiledOffsetPixmap)(XiQPainter*, XiQRect*, XiQPixmap*, XiQPoint*);
    void (*drawPoint)(XiQPainter*, XiQPoint*);
    void (*drawLine)(XiQPainter*, XiQPoint*, XiQPoint*);
    void (*drawText)(XiQPainter*, XiQPoint*, XiQString*);
};

inline XiQPainter_vtable* XiQPainter::vtable() {
    return static_cast<XiQPainter_vtable*>(vptr);
}

extern XiQPainter_vtable ETA(_vt_QPainter);
extern int ETA(_size_QPainter);
ETA_EXPORT void ETA(_init_QPainter)() __attribute__((constructor));


ETA_EXPORT XiQPainter* ETA(qpainter_r8QPainterr12QPaintDevice)(XiQPaintDevice* target);


struct XiQLayout_vtable;
struct XiQLayout: public Xiobj
{
    XiQLayout_vtable* vtable();
    XiQLayout();
    QLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QLayout wrappedType;
    XiQObjectHolder<QLayout> handle;
    QLayout* getImpl() {
        return handle.get();
    }

    void createImpl() {
        assert(false);
    }

    void setObject(QLayout* l) {
        handle.setObject(l, this);
    }
    static void removeWidget(XiQLayout* __thisPtr, XiQWidget* iw);
};

ETA_EXPORT void ETA(QLayout__removeWidget_pr7QLayoutr7QWidget)(XiQLayout* self, XiQWidget* iw);

using XiQLayoutDerived = XiQLayout_vtable;

ETA_EXPORT XiQLayoutDerived* ETA(QLayout__extend_r14QLayoutDerived)();
ETA_EXPORT void ETA(QLayout__downcast_pr7QLayoutr14QLayoutDerived)(XiQLayout* self, XiQLayoutDerived* derived);

ETA_EXPORT void ETA(QLayout__override__removeWidget_pr14QLayoutDerivedai)(XiQLayoutDerived* derived, void* name);

ETA_EXPORT XiQLayout* ETA(qlayout__alloc_r7QLayout)();

inline QLayout* fromXi(XiQLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQLayout_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    void (*removeWidget)(XiQLayout*, XiQWidget*);
};

inline XiQLayout_vtable* XiQLayout::vtable() {
    return static_cast<XiQLayout_vtable*>(vptr);
}

extern XiQLayout_vtable ETA(_vt_QLayout);
extern int ETA(_size_QLayout);
ETA_EXPORT void ETA(_init_QLayout)() __attribute__((constructor));


typedef QBoxLayout::Direction BoxLayoutDirection;


struct XiBoxLayoutDirection_vtable;
struct XiBoxLayoutDirection: public Xiobj
{
    XiBoxLayoutDirection_vtable* vtable();
    XiBoxLayoutDirection();
    BoxLayoutDirection value;
    BoxLayoutDirection* impl() {
        if (!initialized) 
            new (this) XiBoxLayoutDirection();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiBoxLayoutDirection* me = static_cast<XiBoxLayoutDirection*>(mePtr);
        if (me->initialized)
            me->~XiBoxLayoutDirection();
    }

};

ETA_EXPORT XiBoxLayoutDirection* ETA(LeftToRight_r18BoxLayoutDirection)();
ETA_EXPORT XiBoxLayoutDirection* ETA(RightToLeft_r18BoxLayoutDirection)();
ETA_EXPORT XiBoxLayoutDirection* ETA(TopToBottom_r18BoxLayoutDirection)();
ETA_EXPORT XiBoxLayoutDirection* ETA(BottomToTop_r18BoxLayoutDirection)();

using XiBoxLayoutDirectionDerived = XiBoxLayoutDirection_vtable;

ETA_EXPORT XiBoxLayoutDirectionDerived* ETA(BoxLayoutDirection__extend_r25BoxLayoutDirectionDerived)();
ETA_EXPORT void ETA(BoxLayoutDirection__downcast_pr18BoxLayoutDirectionr25BoxLayoutDirectionDerived)(XiBoxLayoutDirection* self, XiBoxLayoutDirectionDerived* derived);


ETA_EXPORT XiBoxLayoutDirection* ETA(boxlayoutdirection__alloc_r18BoxLayoutDirection)();

inline XiBoxLayoutDirection* toXi(const BoxLayoutDirection& orig) {
    if (orig == QBoxLayout::LeftToRight)
        return ETA(LeftToRight_r18BoxLayoutDirection)();
    if (orig == QBoxLayout::RightToLeft)
        return ETA(RightToLeft_r18BoxLayoutDirection)();
    if (orig == QBoxLayout::TopToBottom)
        return ETA(TopToBottom_r18BoxLayoutDirection)();
    if (orig == QBoxLayout::BottomToTop)
        return ETA(BottomToTop_r18BoxLayoutDirection)();
    XiBoxLayoutDirection* r = gcNew<XiBoxLayoutDirection>();
    r->value = orig;
    return r;
}

inline BoxLayoutDirection fromXi(XiBoxLayoutDirection* wrapped) {
    return *wrapped->impl();
}

struct XiBoxLayoutDirection_vtable: public Xivtable
{
    void* reserved;
};

inline XiBoxLayoutDirection_vtable* XiBoxLayoutDirection::vtable() {
    return static_cast<XiBoxLayoutDirection_vtable*>(vptr);
}

extern XiBoxLayoutDirection_vtable ETA(_vt_BoxLayoutDirection);
extern int ETA(_size_BoxLayoutDirection);
ETA_EXPORT void ETA(_init_BoxLayoutDirection)() __attribute__((constructor));




struct XiQBoxLayout_vtable;
struct XiQBoxLayout: public XiQLayout
{
    XiQBoxLayout_vtable* vtable();
    XiQBoxLayout();
    QBoxLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QBoxLayout wrappedType;
    QBoxLayout* getImpl() {
        return static_cast<QBoxLayout*>(XiQLayout::getImpl());
    }

    void createImpl() {
        setObject(new QBoxLayout(QBoxLayout::TopToBottom));
    }
    static XiBoxLayoutDirection* direction(XiQBoxLayout* __thisPtr);
    static void setDirection(XiQBoxLayout* __thisPtr, XiBoxLayoutDirection* d);
    static void addLayout(XiQBoxLayout* __thisPtr, XiQLayout* child);
    static void addStretch(XiQBoxLayout* __thisPtr);
    static void addWidget(XiQBoxLayout* __thisPtr, XiQWidget* w);
    static void insertLayout(XiQBoxLayout* __thisPtr, int idx, XiQLayout* l);
    static void insertStretch(XiQBoxLayout* __thisPtr, int idx);
    static void insertWidget(XiQBoxLayout* __thisPtr, int idx, XiQWidget* w);
    static void addSpacing(XiQBoxLayout* __thisPtr, int param0);
    static int lastIdx(XiQBoxLayout* __thisPtr);
    static void setStretch(XiQBoxLayout* __thisPtr, int idx, int stretch);
};

ETA_EXPORT XiQLayout* ETA(QBoxLayout__to__QLayout_r7QLayoutr10QBoxLayout)(XiQBoxLayout* self);
ETA_EXPORT XiBoxLayoutDirection* ETA(QBoxLayout__direction_r18BoxLayoutDirectionr10QBoxLayout)(XiQBoxLayout* self);
ETA_EXPORT void ETA(QBoxLayout__setDirection_pr10QBoxLayoutr18BoxLayoutDirection)(XiQBoxLayout* self, XiBoxLayoutDirection* d);
ETA_EXPORT void ETA(QBoxLayout__addLayout_pr10QBoxLayoutr7QLayout)(XiQBoxLayout* self, XiQLayout* child);
ETA_EXPORT void ETA(QBoxLayout__addStretch_pr10QBoxLayout)(XiQBoxLayout* self);
ETA_EXPORT void ETA(QBoxLayout__addWidget_pr10QBoxLayoutr7QWidget)(XiQBoxLayout* self, XiQWidget* w);
ETA_EXPORT void ETA(QBoxLayout__insertLayout_pr10QBoxLayoutir7QLayout)(XiQBoxLayout* self, int idx, XiQLayout* l);
ETA_EXPORT void ETA(QBoxLayout__insertStretch_pr10QBoxLayouti)(XiQBoxLayout* self, int idx);
ETA_EXPORT void ETA(QBoxLayout__insertWidget_pr10QBoxLayoutir7QWidget)(XiQBoxLayout* self, int idx, XiQWidget* w);
ETA_EXPORT void ETA(QBoxLayout__addSpacing_pr10QBoxLayouti)(XiQBoxLayout* self, int param0);
ETA_EXPORT int ETA(QBoxLayout__lastIdx_ir10QBoxLayout)(XiQBoxLayout* self);
ETA_EXPORT void ETA(QBoxLayout__setStretch_pr10QBoxLayoutii)(XiQBoxLayout* self, int idx, int stretch);
ETA_EXPORT void ETA(QBoxLayout__removeWidget_pr10QBoxLayoutr7QWidget)(XiQBoxLayout* self, XiQWidget* iw);

using XiQBoxLayoutDerived = XiQBoxLayout_vtable;

ETA_EXPORT XiQBoxLayoutDerived* ETA(QBoxLayout__extend_r17QBoxLayoutDerived)();
ETA_EXPORT void ETA(QBoxLayout__downcast_pr10QBoxLayoutr17QBoxLayoutDerived)(XiQBoxLayout* self, XiQBoxLayoutDerived* derived);

ETA_EXPORT void ETA(QBoxLayout__override__direction_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QBoxLayout__override__setDirection_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QBoxLayout__override__addLayout_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QBoxLayout__override__addStretch_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QBoxLayout__override__addWidget_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QBoxLayout__override__insertLayout_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QBoxLayout__override__insertStretch_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QBoxLayout__override__insertWidget_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QBoxLayout__override__addSpacing_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QBoxLayout__override__lastIdx_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QBoxLayout__override__setStretch_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QBoxLayout__override__removeWidget_pr17QBoxLayoutDerivedai)(XiQBoxLayoutDerived* derived, void* name);

ETA_EXPORT XiQBoxLayout* ETA(qboxlayout__alloc_r10QBoxLayout)();

inline QBoxLayout* fromXi(XiQBoxLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQBoxLayout_vtable: public XiQLayout_vtable
{
    void* reserved;
    XiBoxLayoutDirection* (*direction)(XiQBoxLayout*);
    void (*setDirection)(XiQBoxLayout*, XiBoxLayoutDirection*);
    void (*addLayout)(XiQBoxLayout*, XiQLayout*);
    void (*addStretch)(XiQBoxLayout*);
    void (*addWidget)(XiQBoxLayout*, XiQWidget*);
    void (*insertLayout)(XiQBoxLayout*, int, XiQLayout*);
    void (*insertStretch)(XiQBoxLayout*, int);
    void (*insertWidget)(XiQBoxLayout*, int, XiQWidget*);
    void (*addSpacing)(XiQBoxLayout*, int);
    int (*lastIdx)(XiQBoxLayout*);
    void (*setStretch)(XiQBoxLayout*, int, int);
};

inline XiQBoxLayout_vtable* XiQBoxLayout::vtable() {
    return static_cast<XiQBoxLayout_vtable*>(vptr);
}

extern XiQBoxLayout_vtable ETA(_vt_QBoxLayout);
extern int ETA(_size_QBoxLayout);
ETA_EXPORT void ETA(_init_QBoxLayout)() __attribute__((constructor));




struct XiQHBoxLayout_vtable;
struct XiQHBoxLayout: public XiQBoxLayout
{
    XiQHBoxLayout_vtable* vtable();
    XiQHBoxLayout();
    QHBoxLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QHBoxLayout wrappedType;
    void createImpl() {
        setObject(new QHBoxLayout());
    }

    QHBoxLayout* getImpl() {
        return static_cast<QHBoxLayout*>(XiQBoxLayout::getImpl());
    }
};

ETA_EXPORT XiQBoxLayout* ETA(QHBoxLayout__to__QBoxLayout_r10QBoxLayoutr11QHBoxLayout)(XiQHBoxLayout* self);
ETA_EXPORT XiQLayout* ETA(QHBoxLayout__to__QLayout_r7QLayoutr11QHBoxLayout)(XiQHBoxLayout* self);
ETA_EXPORT XiBoxLayoutDirection* ETA(QHBoxLayout__direction_r18BoxLayoutDirectionr11QHBoxLayout)(XiQHBoxLayout* self);
ETA_EXPORT void ETA(QHBoxLayout__setDirection_pr11QHBoxLayoutr18BoxLayoutDirection)(XiQHBoxLayout* self, XiBoxLayoutDirection* d);
ETA_EXPORT void ETA(QHBoxLayout__addLayout_pr11QHBoxLayoutr7QLayout)(XiQHBoxLayout* self, XiQLayout* child);
ETA_EXPORT void ETA(QHBoxLayout__addStretch_pr11QHBoxLayout)(XiQHBoxLayout* self);
ETA_EXPORT void ETA(QHBoxLayout__addWidget_pr11QHBoxLayoutr7QWidget)(XiQHBoxLayout* self, XiQWidget* w);
ETA_EXPORT void ETA(QHBoxLayout__insertLayout_pr11QHBoxLayoutir7QLayout)(XiQHBoxLayout* self, int idx, XiQLayout* l);
ETA_EXPORT void ETA(QHBoxLayout__insertStretch_pr11QHBoxLayouti)(XiQHBoxLayout* self, int idx);
ETA_EXPORT void ETA(QHBoxLayout__insertWidget_pr11QHBoxLayoutir7QWidget)(XiQHBoxLayout* self, int idx, XiQWidget* w);
ETA_EXPORT void ETA(QHBoxLayout__addSpacing_pr11QHBoxLayouti)(XiQHBoxLayout* self, int param0);
ETA_EXPORT int ETA(QHBoxLayout__lastIdx_ir11QHBoxLayout)(XiQHBoxLayout* self);
ETA_EXPORT void ETA(QHBoxLayout__setStretch_pr11QHBoxLayoutii)(XiQHBoxLayout* self, int idx, int stretch);
ETA_EXPORT void ETA(QHBoxLayout__removeWidget_pr11QHBoxLayoutr7QWidget)(XiQHBoxLayout* self, XiQWidget* iw);

using XiQHBoxLayoutDerived = XiQHBoxLayout_vtable;

ETA_EXPORT XiQHBoxLayoutDerived* ETA(QHBoxLayout__extend_r18QHBoxLayoutDerived)();
ETA_EXPORT void ETA(QHBoxLayout__downcast_pr11QHBoxLayoutr18QHBoxLayoutDerived)(XiQHBoxLayout* self, XiQHBoxLayoutDerived* derived);

ETA_EXPORT void ETA(QHBoxLayout__override__direction_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QHBoxLayout__override__setDirection_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QHBoxLayout__override__addLayout_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QHBoxLayout__override__addStretch_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QHBoxLayout__override__addWidget_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QHBoxLayout__override__insertLayout_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QHBoxLayout__override__insertStretch_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QHBoxLayout__override__insertWidget_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QHBoxLayout__override__addSpacing_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QHBoxLayout__override__lastIdx_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QHBoxLayout__override__setStretch_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QHBoxLayout__override__removeWidget_pr18QHBoxLayoutDerivedai)(XiQHBoxLayoutDerived* derived, void* name);

ETA_EXPORT XiQHBoxLayout* ETA(qhboxlayout__alloc_r11QHBoxLayout)();

inline QHBoxLayout* fromXi(XiQHBoxLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQHBoxLayout_vtable: public XiQBoxLayout_vtable
{
    void* reserved;
};

inline XiQHBoxLayout_vtable* XiQHBoxLayout::vtable() {
    return static_cast<XiQHBoxLayout_vtable*>(vptr);
}

extern XiQHBoxLayout_vtable ETA(_vt_QHBoxLayout);
extern int ETA(_size_QHBoxLayout);
ETA_EXPORT void ETA(_init_QHBoxLayout)() __attribute__((constructor));


ETA_EXPORT XiQHBoxLayout* ETA(qhboxLayout_r11QHBoxLayout)();


struct XiQVBoxLayout_vtable;
struct XiQVBoxLayout: public XiQBoxLayout
{
    XiQVBoxLayout_vtable* vtable();
    XiQVBoxLayout();
    QVBoxLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QVBoxLayout wrappedType;
    void createImpl() {
        setObject(new QVBoxLayout());
    }

    QVBoxLayout* getImpl() {
        return static_cast<QVBoxLayout*>(XiQBoxLayout::getImpl());
    }
};

ETA_EXPORT XiQBoxLayout* ETA(QVBoxLayout__to__QBoxLayout_r10QBoxLayoutr11QVBoxLayout)(XiQVBoxLayout* self);
ETA_EXPORT XiQLayout* ETA(QVBoxLayout__to__QLayout_r7QLayoutr11QVBoxLayout)(XiQVBoxLayout* self);
ETA_EXPORT XiBoxLayoutDirection* ETA(QVBoxLayout__direction_r18BoxLayoutDirectionr11QVBoxLayout)(XiQVBoxLayout* self);
ETA_EXPORT void ETA(QVBoxLayout__setDirection_pr11QVBoxLayoutr18BoxLayoutDirection)(XiQVBoxLayout* self, XiBoxLayoutDirection* d);
ETA_EXPORT void ETA(QVBoxLayout__addLayout_pr11QVBoxLayoutr7QLayout)(XiQVBoxLayout* self, XiQLayout* child);
ETA_EXPORT void ETA(QVBoxLayout__addStretch_pr11QVBoxLayout)(XiQVBoxLayout* self);
ETA_EXPORT void ETA(QVBoxLayout__addWidget_pr11QVBoxLayoutr7QWidget)(XiQVBoxLayout* self, XiQWidget* w);
ETA_EXPORT void ETA(QVBoxLayout__insertLayout_pr11QVBoxLayoutir7QLayout)(XiQVBoxLayout* self, int idx, XiQLayout* l);
ETA_EXPORT void ETA(QVBoxLayout__insertStretch_pr11QVBoxLayouti)(XiQVBoxLayout* self, int idx);
ETA_EXPORT void ETA(QVBoxLayout__insertWidget_pr11QVBoxLayoutir7QWidget)(XiQVBoxLayout* self, int idx, XiQWidget* w);
ETA_EXPORT void ETA(QVBoxLayout__addSpacing_pr11QVBoxLayouti)(XiQVBoxLayout* self, int param0);
ETA_EXPORT int ETA(QVBoxLayout__lastIdx_ir11QVBoxLayout)(XiQVBoxLayout* self);
ETA_EXPORT void ETA(QVBoxLayout__setStretch_pr11QVBoxLayoutii)(XiQVBoxLayout* self, int idx, int stretch);
ETA_EXPORT void ETA(QVBoxLayout__removeWidget_pr11QVBoxLayoutr7QWidget)(XiQVBoxLayout* self, XiQWidget* iw);

using XiQVBoxLayoutDerived = XiQVBoxLayout_vtable;

ETA_EXPORT XiQVBoxLayoutDerived* ETA(QVBoxLayout__extend_r18QVBoxLayoutDerived)();
ETA_EXPORT void ETA(QVBoxLayout__downcast_pr11QVBoxLayoutr18QVBoxLayoutDerived)(XiQVBoxLayout* self, XiQVBoxLayoutDerived* derived);

ETA_EXPORT void ETA(QVBoxLayout__override__direction_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QVBoxLayout__override__setDirection_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QVBoxLayout__override__addLayout_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QVBoxLayout__override__addStretch_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QVBoxLayout__override__addWidget_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QVBoxLayout__override__insertLayout_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QVBoxLayout__override__insertStretch_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QVBoxLayout__override__insertWidget_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QVBoxLayout__override__addSpacing_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QVBoxLayout__override__lastIdx_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QVBoxLayout__override__setStretch_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QVBoxLayout__override__removeWidget_pr18QVBoxLayoutDerivedai)(XiQVBoxLayoutDerived* derived, void* name);

ETA_EXPORT XiQVBoxLayout* ETA(qvboxlayout__alloc_r11QVBoxLayout)();

inline QVBoxLayout* fromXi(XiQVBoxLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQVBoxLayout_vtable: public XiQBoxLayout_vtable
{
    void* reserved;
};

inline XiQVBoxLayout_vtable* XiQVBoxLayout::vtable() {
    return static_cast<XiQVBoxLayout_vtable*>(vptr);
}

extern XiQVBoxLayout_vtable ETA(_vt_QVBoxLayout);
extern int ETA(_size_QVBoxLayout);
ETA_EXPORT void ETA(_init_QVBoxLayout)() __attribute__((constructor));


ETA_EXPORT XiQVBoxLayout* ETA(qvboxLayout_r11QVBoxLayout)();


struct XiQGridLayout_vtable;
struct XiQGridLayout: public XiQLayout
{
    XiQGridLayout_vtable* vtable();
    XiQGridLayout();
    QGridLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QGridLayout wrappedType;
    QGridLayout* getImpl() {
        return static_cast<QGridLayout*>(XiQLayout::getImpl());
    }

    void createImpl() {
        setObject(new QGridLayout());
    }
    static void addLayout(XiQGridLayout* __thisPtr, XiQLayout* l, int row, int col);
    static void addWidget(XiQGridLayout* __thisPtr, XiQWidget* w, int row, int col);
    static XiQRect* cellRect(XiQGridLayout* __thisPtr, int row, int col);
    static int columnCount(XiQGridLayout* __thisPtr);
    static int columnMinimumWidth(XiQGridLayout* __thisPtr, int col);
    static void setColumnMinimumWidth(XiQGridLayout* __thisPtr, int col, int m);
    static int columnStretch(XiQGridLayout* __thisPtr, int col);
    static void setColumnStretch(XiQGridLayout* __thisPtr, int col, int s);
    static int rowCount(XiQGridLayout* __thisPtr);
    static int rowMinimumHeight(XiQGridLayout* __thisPtr, int row);
    static void setRowMinimumHeight(XiQGridLayout* __thisPtr, int row, int m);
    static int rowStretch(XiQGridLayout* __thisPtr, int row);
    static void setRowStretch(XiQGridLayout* __thisPtr, int row, int s);
    static int horizontalSpacing(XiQGridLayout* __thisPtr);
    static void setHorizontalSpacing(XiQGridLayout* __thisPtr, int s);
    static int spacing(XiQGridLayout* __thisPtr);
    static void setSpacing(XiQGridLayout* __thisPtr, int s);
    static void setVerticalSpacing(XiQGridLayout* __thisPtr, int s);
    static int verticalSpacing(XiQGridLayout* __thisPtr);
};

ETA_EXPORT XiQLayout* ETA(QGridLayout__to__QLayout_r7QLayoutr11QGridLayout)(XiQGridLayout* self);
ETA_EXPORT void ETA(QGridLayout__addLayout_pr11QGridLayoutr7QLayoutii)(XiQGridLayout* self, XiQLayout* l, int row, int col);
ETA_EXPORT void ETA(QGridLayout__addWidget_pr11QGridLayoutr7QWidgetii)(XiQGridLayout* self, XiQWidget* w, int row, int col);
ETA_EXPORT XiQRect* ETA(QGridLayout__cellRect_r5QRectr11QGridLayoutii)(XiQGridLayout* self, int row, int col);
ETA_EXPORT int ETA(QGridLayout__columnCount_ir11QGridLayout)(XiQGridLayout* self);
ETA_EXPORT int ETA(QGridLayout__columnMinimumWidth_ir11QGridLayouti)(XiQGridLayout* self, int col);
ETA_EXPORT void ETA(QGridLayout__setColumnMinimumWidth_pr11QGridLayoutii)(XiQGridLayout* self, int col, int m);
ETA_EXPORT int ETA(QGridLayout__columnStretch_ir11QGridLayouti)(XiQGridLayout* self, int col);
ETA_EXPORT void ETA(QGridLayout__setColumnStretch_pr11QGridLayoutii)(XiQGridLayout* self, int col, int s);
ETA_EXPORT int ETA(QGridLayout__rowCount_ir11QGridLayout)(XiQGridLayout* self);
ETA_EXPORT int ETA(QGridLayout__rowMinimumHeight_ir11QGridLayouti)(XiQGridLayout* self, int row);
ETA_EXPORT void ETA(QGridLayout__setRowMinimumHeight_pr11QGridLayoutii)(XiQGridLayout* self, int row, int m);
ETA_EXPORT int ETA(QGridLayout__rowStretch_ir11QGridLayouti)(XiQGridLayout* self, int row);
ETA_EXPORT void ETA(QGridLayout__setRowStretch_pr11QGridLayoutii)(XiQGridLayout* self, int row, int s);
ETA_EXPORT int ETA(QGridLayout__horizontalSpacing_ir11QGridLayout)(XiQGridLayout* self);
ETA_EXPORT void ETA(QGridLayout__setHorizontalSpacing_pr11QGridLayouti)(XiQGridLayout* self, int s);
ETA_EXPORT int ETA(QGridLayout__spacing_ir11QGridLayout)(XiQGridLayout* self);
ETA_EXPORT void ETA(QGridLayout__setSpacing_pr11QGridLayouti)(XiQGridLayout* self, int s);
ETA_EXPORT void ETA(QGridLayout__setVerticalSpacing_pr11QGridLayouti)(XiQGridLayout* self, int s);
ETA_EXPORT int ETA(QGridLayout__verticalSpacing_ir11QGridLayout)(XiQGridLayout* self);
ETA_EXPORT void ETA(QGridLayout__removeWidget_pr11QGridLayoutr7QWidget)(XiQGridLayout* self, XiQWidget* iw);

using XiQGridLayoutDerived = XiQGridLayout_vtable;

ETA_EXPORT XiQGridLayoutDerived* ETA(QGridLayout__extend_r18QGridLayoutDerived)();
ETA_EXPORT void ETA(QGridLayout__downcast_pr11QGridLayoutr18QGridLayoutDerived)(XiQGridLayout* self, XiQGridLayoutDerived* derived);

ETA_EXPORT void ETA(QGridLayout__override__addLayout_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__addWidget_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__cellRect_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__columnCount_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__columnMinimumWidth_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__setColumnMinimumWidth_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__columnStretch_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__setColumnStretch_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__rowCount_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__rowMinimumHeight_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__setRowMinimumHeight_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__rowStretch_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__setRowStretch_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__horizontalSpacing_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__setHorizontalSpacing_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__spacing_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__setSpacing_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__setVerticalSpacing_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__verticalSpacing_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QGridLayout__override__removeWidget_pr18QGridLayoutDerivedai)(XiQGridLayoutDerived* derived, void* name);

ETA_EXPORT XiQGridLayout* ETA(qgridlayout__alloc_r11QGridLayout)();

inline QGridLayout* fromXi(XiQGridLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQGridLayout_vtable: public XiQLayout_vtable
{
    void* reserved;
    void (*addLayout)(XiQGridLayout*, XiQLayout*, int, int);
    void (*addWidget)(XiQGridLayout*, XiQWidget*, int, int);
    XiQRect* (*cellRect)(XiQGridLayout*, int, int);
    int (*columnCount)(XiQGridLayout*);
    int (*columnMinimumWidth)(XiQGridLayout*, int);
    void (*setColumnMinimumWidth)(XiQGridLayout*, int, int);
    int (*columnStretch)(XiQGridLayout*, int);
    void (*setColumnStretch)(XiQGridLayout*, int, int);
    int (*rowCount)(XiQGridLayout*);
    int (*rowMinimumHeight)(XiQGridLayout*, int);
    void (*setRowMinimumHeight)(XiQGridLayout*, int, int);
    int (*rowStretch)(XiQGridLayout*, int);
    void (*setRowStretch)(XiQGridLayout*, int, int);
    int (*horizontalSpacing)(XiQGridLayout*);
    void (*setHorizontalSpacing)(XiQGridLayout*, int);
    int (*spacing)(XiQGridLayout*);
    void (*setSpacing)(XiQGridLayout*, int);
    void (*setVerticalSpacing)(XiQGridLayout*, int);
    int (*verticalSpacing)(XiQGridLayout*);
};

inline XiQGridLayout_vtable* XiQGridLayout::vtable() {
    return static_cast<XiQGridLayout_vtable*>(vptr);
}

extern XiQGridLayout_vtable ETA(_vt_QGridLayout);
extern int ETA(_size_QGridLayout);
ETA_EXPORT void ETA(_init_QGridLayout)() __attribute__((constructor));


ETA_EXPORT XiQGridLayout* ETA(qgridLayout_r11QGridLayout)();


struct XiQStackedLayout_vtable;
struct XiQStackedLayout: public XiQLayout
{
    XiQStackedLayout_vtable* vtable();
    XiQStackedLayout();
    QStackedLayout* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QStackedLayout wrappedType;
    QStackedLayout* getImpl() {
        return static_cast<QStackedLayout*>(XiQLayout::getImpl());
    }

    void createImpl() {
        setObject(new QStackedLayout());
    }
    static int addWidget(XiQStackedLayout* __thisPtr, XiQWidget* w);
    static int insertWidget(XiQStackedLayout* __thisPtr, int idx, XiQWidget* w);
    static int currentIndex(XiQStackedLayout* __thisPtr);
    static void setCurrentIndex(XiQStackedLayout* __thisPtr, int param0);
    static void setCurrentWidget(XiQStackedLayout* __thisPtr, XiQWidget* w);
    static XiQWidget* currentWidget(XiQStackedLayout* __thisPtr);
};

ETA_EXPORT XiQLayout* ETA(QStackedLayout__to__QLayout_r7QLayoutr14QStackedLayout)(XiQStackedLayout* self);
ETA_EXPORT int ETA(QStackedLayout__addWidget_ir14QStackedLayoutr7QWidget)(XiQStackedLayout* self, XiQWidget* w);
ETA_EXPORT int ETA(QStackedLayout__insertWidget_ir14QStackedLayoutir7QWidget)(XiQStackedLayout* self, int idx, XiQWidget* w);
ETA_EXPORT int ETA(QStackedLayout__currentIndex_ir14QStackedLayout)(XiQStackedLayout* self);
ETA_EXPORT void ETA(QStackedLayout__setCurrentIndex_pr14QStackedLayouti)(XiQStackedLayout* self, int param0);
ETA_EXPORT void ETA(QStackedLayout__setCurrentWidget_pr14QStackedLayoutr7QWidget)(XiQStackedLayout* self, XiQWidget* w);
ETA_EXPORT XiQWidget* ETA(QStackedLayout__currentWidget_r7QWidgetr14QStackedLayout)(XiQStackedLayout* self);
ETA_EXPORT void ETA(QStackedLayout__removeWidget_pr14QStackedLayoutr7QWidget)(XiQStackedLayout* self, XiQWidget* iw);

using XiQStackedLayoutDerived = XiQStackedLayout_vtable;

ETA_EXPORT XiQStackedLayoutDerived* ETA(QStackedLayout__extend_r21QStackedLayoutDerived)();
ETA_EXPORT void ETA(QStackedLayout__downcast_pr14QStackedLayoutr21QStackedLayoutDerived)(XiQStackedLayout* self, XiQStackedLayoutDerived* derived);

ETA_EXPORT void ETA(QStackedLayout__override__addWidget_pr21QStackedLayoutDerivedai)(XiQStackedLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QStackedLayout__override__insertWidget_pr21QStackedLayoutDerivedai)(XiQStackedLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QStackedLayout__override__currentIndex_pr21QStackedLayoutDerivedai)(XiQStackedLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QStackedLayout__override__setCurrentIndex_pr21QStackedLayoutDerivedai)(XiQStackedLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QStackedLayout__override__setCurrentWidget_pr21QStackedLayoutDerivedai)(XiQStackedLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QStackedLayout__override__currentWidget_pr21QStackedLayoutDerivedai)(XiQStackedLayoutDerived* derived, void* name);
ETA_EXPORT void ETA(QStackedLayout__override__removeWidget_pr21QStackedLayoutDerivedai)(XiQStackedLayoutDerived* derived, void* name);

ETA_EXPORT XiQStackedLayout* ETA(qstackedlayout__alloc_r14QStackedLayout)();

inline QStackedLayout* fromXi(XiQStackedLayout* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQStackedLayout_vtable: public XiQLayout_vtable
{
    void* reserved;
    int (*addWidget)(XiQStackedLayout*, XiQWidget*);
    int (*insertWidget)(XiQStackedLayout*, int, XiQWidget*);
    int (*currentIndex)(XiQStackedLayout*);
    void (*setCurrentIndex)(XiQStackedLayout*, int);
    void (*setCurrentWidget)(XiQStackedLayout*, XiQWidget*);
    XiQWidget* (*currentWidget)(XiQStackedLayout*);
};

inline XiQStackedLayout_vtable* XiQStackedLayout::vtable() {
    return static_cast<XiQStackedLayout_vtable*>(vptr);
}

extern XiQStackedLayout_vtable ETA(_vt_QStackedLayout);
extern int ETA(_size_QStackedLayout);
ETA_EXPORT void ETA(_init_QStackedLayout)() __attribute__((constructor));


ETA_EXPORT XiQStackedLayout* ETA(qstackedLayout_r14QStackedLayout)();


struct XiQTimer_vtable;
struct XiQTimer: public Xiobj
{
    XiQTimer_vtable* vtable();
    XiQTimer();
    QTimer* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QTimer wrappedType;
    XiQObjectHolder<QTimer> handle;
    xiqEventListenerList<XiTimerListener> timerListeners;
    XiQTimerSigs* sig;

    QTimer* getImpl() {
        return handle.get();
    }

    void createImpl() {
        setObject(new QTimer);
    }

    void setObject(QTimer* w) {
        handle.setObject(w, this);
        sig = new XiQTimerSigs(this, w);
    }

    ~XiQTimer() {
        delete sig;
    }
    static int interval(XiQTimer* __thisPtr);
    static bool isActive(XiQTimer* __thisPtr);
    static bool isSingleShot(XiQTimer* __thisPtr);
    static void setInterval(XiQTimer* __thisPtr, int param0);
    static void setSingleShot(XiQTimer* __thisPtr, bool param0);
    static void start(XiQTimer* __thisPtr);
    static void stop(XiQTimer* __thisPtr);
    static void timeout(XiQTimer* __thisPtr);
    static void addTimerListener(XiQTimer* __thisPtr, XiTimerListener* tl);
};

ETA_EXPORT int ETA(QTimer__interval_ir6QTimer)(XiQTimer* self);
ETA_EXPORT bool ETA(QTimer__isActive_br6QTimer)(XiQTimer* self);
ETA_EXPORT bool ETA(QTimer__isSingleShot_br6QTimer)(XiQTimer* self);
ETA_EXPORT void ETA(QTimer__setInterval_pr6QTimeri)(XiQTimer* self, int param0);
ETA_EXPORT void ETA(QTimer__setSingleShot_pr6QTimerb)(XiQTimer* self, bool param0);
ETA_EXPORT void ETA(QTimer__start_pr6QTimer)(XiQTimer* self);
ETA_EXPORT void ETA(QTimer__stop_pr6QTimer)(XiQTimer* self);
ETA_EXPORT void ETA(QTimer__timeout_pr6QTimer)(XiQTimer* self);
ETA_EXPORT void ETA(QTimer__addTimerListener_pr6QTimerr13TimerListener)(XiQTimer* self, XiTimerListener* tl);

using XiQTimerDerived = XiQTimer_vtable;

ETA_EXPORT XiQTimerDerived* ETA(QTimer__extend_r13QTimerDerived)();
ETA_EXPORT void ETA(QTimer__downcast_pr6QTimerr13QTimerDerived)(XiQTimer* self, XiQTimerDerived* derived);

ETA_EXPORT void ETA(QTimer__override__interval_pr13QTimerDerivedai)(XiQTimerDerived* derived, void* name);
ETA_EXPORT void ETA(QTimer__override__isActive_pr13QTimerDerivedai)(XiQTimerDerived* derived, void* name);
ETA_EXPORT void ETA(QTimer__override__isSingleShot_pr13QTimerDerivedai)(XiQTimerDerived* derived, void* name);
ETA_EXPORT void ETA(QTimer__override__setInterval_pr13QTimerDerivedai)(XiQTimerDerived* derived, void* name);
ETA_EXPORT void ETA(QTimer__override__setSingleShot_pr13QTimerDerivedai)(XiQTimerDerived* derived, void* name);
ETA_EXPORT void ETA(QTimer__override__start_pr13QTimerDerivedai)(XiQTimerDerived* derived, void* name);
ETA_EXPORT void ETA(QTimer__override__stop_pr13QTimerDerivedai)(XiQTimerDerived* derived, void* name);
ETA_EXPORT void ETA(QTimer__override__timeout_pr13QTimerDerivedai)(XiQTimerDerived* derived, void* name);
ETA_EXPORT void ETA(QTimer__override__addTimerListener_pr13QTimerDerivedai)(XiQTimerDerived* derived, void* name);

ETA_EXPORT XiQTimer* ETA(qtimer__alloc_r6QTimer)();

inline QTimer* fromXi(XiQTimer* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQTimer_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    int (*interval)(XiQTimer*);
    bool (*isActive)(XiQTimer*);
    bool (*isSingleShot)(XiQTimer*);
    void (*setInterval)(XiQTimer*, int);
    void (*setSingleShot)(XiQTimer*, bool);
    void (*start)(XiQTimer*);
    void (*stop)(XiQTimer*);
    void (*timeout)(XiQTimer*);
    void (*addTimerListener)(XiQTimer*, XiTimerListener*);
};

inline XiQTimer_vtable* XiQTimer::vtable() {
    return static_cast<XiQTimer_vtable*>(vptr);
}

extern XiQTimer_vtable ETA(_vt_QTimer);
extern int ETA(_size_QTimer);
ETA_EXPORT void ETA(_init_QTimer)() __attribute__((constructor));


ETA_EXPORT XiQTimer* ETA(qtimer_r6QTimer)();


struct XiTimerListener_vtable;
struct XiTimerListener: public Xiobj
{
    XiTimerListener_vtable* vtable();
    XiTimerListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiTimerListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiTimerListener* me = static_cast<XiTimerListener*>(mePtr);
        if (me->initialized)
            me->~XiTimerListener();
    }

    static void timeout(XiTimerListener* __thisPtr, XiQTimer* timer);
};

ETA_EXPORT void ETA(TimerListener__timeout_pr13TimerListenerr6QTimer)(XiTimerListener* self, XiQTimer* timer);

using XiTimerListenerDerived = XiTimerListener_vtable;

ETA_EXPORT XiTimerListenerDerived* ETA(TimerListener__extend_r20TimerListenerDerived)();
ETA_EXPORT void ETA(TimerListener__downcast_pr13TimerListenerr20TimerListenerDerived)(XiTimerListener* self, XiTimerListenerDerived* derived);

ETA_EXPORT void ETA(TimerListener__override__timeout_pr20TimerListenerDerivedai)(XiTimerListenerDerived* derived, void* name);

ETA_EXPORT XiTimerListener* ETA(timerlistener__alloc_r13TimerListener)();

struct XiTimerListener_vtable: public Xivtable
{
    void* reserved;
    void (*timeout)(XiTimerListener*, XiQTimer*);
};

inline XiTimerListener_vtable* XiTimerListener::vtable() {
    return static_cast<XiTimerListener_vtable*>(vptr);
}

extern XiTimerListener_vtable ETA(_vt_TimerListener);
extern int ETA(_size_TimerListener);
ETA_EXPORT void ETA(_init_TimerListener)() __attribute__((constructor));




struct XiQAction_vtable;
struct XiQAction: public Xiobj
{
    XiQAction_vtable* vtable();
    XiQAction();
    QAction* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QAction wrappedType;
    XiQObjectHolder<QAction> handle;
    xiqEventListenerList<XiActionListener> actionListeners;
    XiQActionSigs* sig;

    QAction* getImpl() {
        return handle.get();
    }

    void createImpl() {
        setObject(new QAction(0));
    }

    void setObject(QAction* action) {
        handle.setObject(action, this);
        sig = new XiQActionSigs(this, action);
    }

    ~XiQAction() {
        delete sig;
    }
    static bool isCheckable(XiQAction* __thisPtr);
    static void setCheckable(XiQAction* __thisPtr, bool param0);
    static bool isChecked(XiQAction* __thisPtr);
    static void setChecked(XiQAction* __thisPtr, bool param0);
    static bool isEnabled(XiQAction* __thisPtr);
    static void setEnabled(XiQAction* __thisPtr, bool param0);
    static XiQFont* font(XiQAction* __thisPtr);
    static void setFont(XiQAction* __thisPtr, XiQFont* param0);
    static XiQIcon* icon(XiQAction* __thisPtr);
    static void setIcon(XiQAction* __thisPtr, XiQIcon* param0);
    static XiQString* text(XiQAction* __thisPtr);
    static void setText(XiQAction* __thisPtr, XiQString* param0);
    static XiQString* toolTip(XiQAction* __thisPtr);
    static void setToolTip(XiQAction* __thisPtr, XiQString* param0);
    static XiQMenu* menu(XiQAction* __thisPtr);
    static void setMenu(XiQAction* __thisPtr, XiQMenu* param0);
    static void triggered(XiQAction* __thisPtr);
    static void addActionListener(XiQAction* __thisPtr, XiActionListener* l);
};

ETA_EXPORT bool ETA(QAction__isCheckable_br7QAction)(XiQAction* self);
ETA_EXPORT void ETA(QAction__setCheckable_pr7QActionb)(XiQAction* self, bool param0);
ETA_EXPORT bool ETA(QAction__isChecked_br7QAction)(XiQAction* self);
ETA_EXPORT void ETA(QAction__setChecked_pr7QActionb)(XiQAction* self, bool param0);
ETA_EXPORT bool ETA(QAction__isEnabled_br7QAction)(XiQAction* self);
ETA_EXPORT void ETA(QAction__setEnabled_pr7QActionb)(XiQAction* self, bool param0);
ETA_EXPORT XiQFont* ETA(QAction__font_r5QFontr7QAction)(XiQAction* self);
ETA_EXPORT void ETA(QAction__setFont_pr7QActionr5QFont)(XiQAction* self, XiQFont* param0);
ETA_EXPORT XiQIcon* ETA(QAction__icon_r5QIconr7QAction)(XiQAction* self);
ETA_EXPORT void ETA(QAction__setIcon_pr7QActionr5QIcon)(XiQAction* self, XiQIcon* param0);
ETA_EXPORT XiQString* ETA(QAction__text_r7QStringr7QAction)(XiQAction* self);
ETA_EXPORT void ETA(QAction__setText_pr7QActionr7QString)(XiQAction* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QAction__toolTip_r7QStringr7QAction)(XiQAction* self);
ETA_EXPORT void ETA(QAction__setToolTip_pr7QActionr7QString)(XiQAction* self, XiQString* param0);
ETA_EXPORT XiQMenu* ETA(QAction__menu_r5QMenur7QAction)(XiQAction* self);
ETA_EXPORT void ETA(QAction__setMenu_pr7QActionr5QMenu)(XiQAction* self, XiQMenu* param0);
ETA_EXPORT void ETA(QAction__triggered_pr7QAction)(XiQAction* self);
ETA_EXPORT void ETA(QAction__addActionListener_pr7QActionr14ActionListener)(XiQAction* self, XiActionListener* l);

using XiQActionDerived = XiQAction_vtable;

ETA_EXPORT XiQActionDerived* ETA(QAction__extend_r14QActionDerived)();
ETA_EXPORT void ETA(QAction__downcast_pr7QActionr14QActionDerived)(XiQAction* self, XiQActionDerived* derived);

ETA_EXPORT void ETA(QAction__override__isCheckable_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__setCheckable_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__isChecked_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__setChecked_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__isEnabled_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__setEnabled_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__font_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__setFont_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__icon_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__setIcon_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__text_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__setText_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__toolTip_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__setToolTip_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__menu_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__setMenu_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__triggered_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);
ETA_EXPORT void ETA(QAction__override__addActionListener_pr14QActionDerivedai)(XiQActionDerived* derived, void* name);

ETA_EXPORT XiQAction* ETA(qaction__alloc_r7QAction)();

inline QAction* fromXi(XiQAction* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQAction_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    bool (*isCheckable)(XiQAction*);
    void (*setCheckable)(XiQAction*, bool);
    bool (*isChecked)(XiQAction*);
    void (*setChecked)(XiQAction*, bool);
    bool (*isEnabled)(XiQAction*);
    void (*setEnabled)(XiQAction*, bool);
    XiQFont* (*font)(XiQAction*);
    void (*setFont)(XiQAction*, XiQFont*);
    XiQIcon* (*icon)(XiQAction*);
    void (*setIcon)(XiQAction*, XiQIcon*);
    XiQString* (*text)(XiQAction*);
    void (*setText)(XiQAction*, XiQString*);
    XiQString* (*toolTip)(XiQAction*);
    void (*setToolTip)(XiQAction*, XiQString*);
    XiQMenu* (*menu)(XiQAction*);
    void (*setMenu)(XiQAction*, XiQMenu*);
    void (*triggered)(XiQAction*);
    void (*addActionListener)(XiQAction*, XiActionListener*);
};

inline XiQAction_vtable* XiQAction::vtable() {
    return static_cast<XiQAction_vtable*>(vptr);
}

extern XiQAction_vtable ETA(_vt_QAction);
extern int ETA(_size_QAction);
ETA_EXPORT void ETA(_init_QAction)() __attribute__((constructor));


ETA_EXPORT XiQAction* ETA(qaction_r7QActionr7QString)(XiQString* text);


struct XiActionListener_vtable;
struct XiActionListener: public Xiobj
{
    XiActionListener_vtable* vtable();
    XiActionListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiActionListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiActionListener* me = static_cast<XiActionListener*>(mePtr);
        if (me->initialized)
            me->~XiActionListener();
    }

    static void triggered(XiActionListener* __thisPtr, XiQAction* a);
};

ETA_EXPORT void ETA(ActionListener__triggered_pr14ActionListenerr7QAction)(XiActionListener* self, XiQAction* a);

using XiActionListenerDerived = XiActionListener_vtable;

ETA_EXPORT XiActionListenerDerived* ETA(ActionListener__extend_r21ActionListenerDerived)();
ETA_EXPORT void ETA(ActionListener__downcast_pr14ActionListenerr21ActionListenerDerived)(XiActionListener* self, XiActionListenerDerived* derived);

ETA_EXPORT void ETA(ActionListener__override__triggered_pr21ActionListenerDerivedai)(XiActionListenerDerived* derived, void* name);

ETA_EXPORT XiActionListener* ETA(actionlistener__alloc_r14ActionListener)();

struct XiActionListener_vtable: public Xivtable
{
    void* reserved;
    void (*triggered)(XiActionListener*, XiQAction*);
};

inline XiActionListener_vtable* XiActionListener::vtable() {
    return static_cast<XiActionListener_vtable*>(vptr);
}

extern XiActionListener_vtable ETA(_vt_ActionListener);
extern int ETA(_size_ActionListener);
ETA_EXPORT void ETA(_init_ActionListener)() __attribute__((constructor));




struct XiQIcon_vtable;
struct XiQIcon: public Xiobj
{
    XiQIcon_vtable* vtable();
    XiQIcon();
    QIcon value;
    QIcon* impl() {
        if (!initialized) 
            new (this) XiQIcon();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiQIcon* me = static_cast<XiQIcon*>(mePtr);
        if (me->initialized)
            me->~XiQIcon();
    }

};


using XiQIconDerived = XiQIcon_vtable;

ETA_EXPORT XiQIconDerived* ETA(QIcon__extend_r12QIconDerived)();
ETA_EXPORT void ETA(QIcon__downcast_pr5QIconr12QIconDerived)(XiQIcon* self, XiQIconDerived* derived);


ETA_EXPORT XiQIcon* ETA(qicon__alloc_r5QIcon)();

inline XiQIcon* toXi(const QIcon& orig) {
    XiQIcon* r = gcNew<XiQIcon>();
    r->value = orig;
    return r;
}

inline QIcon fromXi(XiQIcon* wrapped) {
    return *wrapped->impl();
}

struct XiQIcon_vtable: public Xivtable
{
    void* reserved;
};

inline XiQIcon_vtable* XiQIcon::vtable() {
    return static_cast<XiQIcon_vtable*>(vptr);
}

extern XiQIcon_vtable ETA(_vt_QIcon);
extern int ETA(_size_QIcon);
ETA_EXPORT void ETA(_init_QIcon)() __attribute__((constructor));


ETA_EXPORT XiQIcon* ETA(qicon_r5QIconr7QString)(XiQString* fname);
ETA_EXPORT XiQIcon* ETA(qiconFromPixmap_r5QIconr7QPixmap)(XiQPixmap* pmap);
ETA_EXPORT XiQIcon* ETA(qiconNull_r5QIcon)();
ETA_EXPORT XiQIcon* ETA(qiconStandard_r5QIconr12StandardIcon)(XiStandardIcon* id);


struct XiFocusPolicy_vtable;
struct XiFocusPolicy: public Xiobj
{
    XiFocusPolicy_vtable* vtable();
    XiFocusPolicy();
    FocusPolicy value;
    FocusPolicy* impl() {
        if (!initialized) 
            new (this) XiFocusPolicy();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiFocusPolicy* me = static_cast<XiFocusPolicy*>(mePtr);
        if (me->initialized)
            me->~XiFocusPolicy();
    }

};

ETA_EXPORT XiFocusPolicy* ETA(TabFocus_r11FocusPolicy)();
ETA_EXPORT XiFocusPolicy* ETA(ClickFocus_r11FocusPolicy)();
ETA_EXPORT XiFocusPolicy* ETA(StrongFocus_r11FocusPolicy)();
ETA_EXPORT XiFocusPolicy* ETA(WheelFocus_r11FocusPolicy)();
ETA_EXPORT XiFocusPolicy* ETA(NoFocus_r11FocusPolicy)();

using XiFocusPolicyDerived = XiFocusPolicy_vtable;

ETA_EXPORT XiFocusPolicyDerived* ETA(FocusPolicy__extend_r18FocusPolicyDerived)();
ETA_EXPORT void ETA(FocusPolicy__downcast_pr11FocusPolicyr18FocusPolicyDerived)(XiFocusPolicy* self, XiFocusPolicyDerived* derived);


ETA_EXPORT XiFocusPolicy* ETA(focuspolicy__alloc_r11FocusPolicy)();

inline XiFocusPolicy* toXi(const FocusPolicy& orig) {
    if (orig == TabFocus)
        return ETA(TabFocus_r11FocusPolicy)();
    if (orig == ClickFocus)
        return ETA(ClickFocus_r11FocusPolicy)();
    if (orig == StrongFocus)
        return ETA(StrongFocus_r11FocusPolicy)();
    if (orig == WheelFocus)
        return ETA(WheelFocus_r11FocusPolicy)();
    if (orig == NoFocus)
        return ETA(NoFocus_r11FocusPolicy)();
    XiFocusPolicy* r = gcNew<XiFocusPolicy>();
    r->value = orig;
    return r;
}

inline FocusPolicy fromXi(XiFocusPolicy* wrapped) {
    return *wrapped->impl();
}

struct XiFocusPolicy_vtable: public Xivtable
{
    void* reserved;
};

inline XiFocusPolicy_vtable* XiFocusPolicy::vtable() {
    return static_cast<XiFocusPolicy_vtable*>(vptr);
}

extern XiFocusPolicy_vtable ETA(_vt_FocusPolicy);
extern int ETA(_size_FocusPolicy);
ETA_EXPORT void ETA(_init_FocusPolicy)() __attribute__((constructor));




struct XiQWidget_vtable;
struct XiQWidget: public XiQPaintDevice
{
    XiQWidget_vtable* vtable();
    XiQWidget();
    QWidget* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QWidget wrappedType;
    XiQObjectHolder<QWidget> handle;
    QWidget* getImpl() {
        return handle.get();
    }

    void createImpl() {
        setObject(new Proxy<QWidget>());
    }

    void setObject(QWidget* w) {
        handle.setObject(w, this);
    }

    // Call this when the parameter ought to be a logical
    // kid of this object in some sense, and hence shouldn't
    // be GC'd independently. If it's a QObject kid, it'll use
    // the kids' qobjectholder to pin it. If not, it will use
    // an intermediary.
    void protectObject(XiQWidget* kid);
    void protectObject(XiQAction* Kid);
    static XiQWidget* toWidget(XiQPaintDevice* __thisPtr);
    static void show(XiQWidget* __thisPtr);
    static void hide(XiQWidget* __thisPtr);
    static void raise(XiQWidget* __thisPtr);
    static void lower(XiQWidget* __thisPtr);
    static void close(XiQWidget* __thisPtr);
    static bool isEnabled(XiQWidget* __thisPtr);
    static void setEnabled(XiQWidget* __thisPtr, bool param0);
    static void setLayout(XiQWidget* __thisPtr, XiQLayout* layout);
    static bool isWindowModified(XiQWidget* __thisPtr);
    static void setWindowModified(XiQWidget* __thisPtr, bool param0);
    static XiQString* windowTitle(XiQWidget* __thisPtr);
    static void setWindowTitle(XiQWidget* __thisPtr, XiQString* param0);
    static XiQIcon* windowIcon(XiQWidget* __thisPtr);
    static void setWindowIcon(XiQWidget* __thisPtr, XiQIcon* param0);
    static bool isActiveWindow(XiQWidget* __thisPtr);
    static void activateWindow(XiQWidget* __thisPtr);
    static bool isMinimized(XiQWidget* __thisPtr);
    static bool isMaximized(XiQWidget* __thisPtr);
    static bool isFullScreen(XiQWidget* __thisPtr);
    static void showMinimized(XiQWidget* __thisPtr);
    static void showMaximized(XiQWidget* __thisPtr);
    static void showFullScreen(XiQWidget* __thisPtr);
    static void showNormal(XiQWidget* __thisPtr);
    static void update(XiQWidget* __thisPtr, XiQRect* r);
    static void repaint(XiQWidget* __thisPtr, XiQRect* r);
    static void setMinimumSize(XiQWidget* __thisPtr, XiQSize* param0);
    static XiQSize* minimumSize(XiQWidget* __thisPtr);
    static void setMaximumSize(XiQWidget* __thisPtr, XiQSize* param0);
    static XiQSize* maximumSize(XiQWidget* __thisPtr);
    static void setFixedSize(XiQWidget* __thisPtr, XiQSize* param0);
    static void resize(XiQWidget* __thisPtr, XiQSize* s);
    static void adjustSize(XiQWidget* __thisPtr);
    static XiQPoint* pos(XiQWidget* __thisPtr);
    static void move(XiQWidget* __thisPtr, XiQPoint* p);
    static XiQSize* sizeHint(XiQWidget* __thisPtr);
    static XiQSize* minimumSizeHint(XiQWidget* __thisPtr);
    static XiQPoint* mapFrom(XiQWidget* __thisPtr, XiQWidget* w, XiQPoint* param1);
    static XiQPoint* mapFromGlobal(XiQWidget* __thisPtr, XiQPoint* param0);
    static XiQPoint* mapFromParent(XiQWidget* __thisPtr, XiQPoint* param0);
    static XiQPoint* mapTo(XiQWidget* __thisPtr, XiQWidget* w, XiQPoint* param1);
    static XiQPoint* mapToGlobal(XiQWidget* __thisPtr, XiQPoint* param0);
    static XiQPoint* mapToParent(XiQWidget* __thisPtr, XiQPoint* param0);
    static void setFont(XiQWidget* __thisPtr, XiQFont* f);
    static XiQFont* font(XiQWidget* __thisPtr);
    static XiQString* styleSheet(XiQWidget* __thisPtr);
    static void setStyleSheet(XiQWidget* __thisPtr, XiQString* param0);
    static XiFocusPolicy* focusPolicy(XiQWidget* __thisPtr);
    static void setFocusPolicy(XiQWidget* __thisPtr, XiFocusPolicy* param0);
    static void setFocus(XiQWidget* __thisPtr);
    static void clearFocus(XiQWidget* __thisPtr);
    static bool hasFocus(XiQWidget* __thisPtr);
    static XiQString* toolTip(XiQWidget* __thisPtr);
    static void setToolTip(XiQWidget* __thisPtr, XiQString* param0);
    static XiQString* whatsThis(XiQWidget* __thisPtr);
    static void setWhatsThis(XiQWidget* __thisPtr, XiQString* param0);
    static bool hasMouseTracking(XiQWidget* __thisPtr);
    static void setMouseTracking(XiQWidget* __thisPtr, bool param0);
    static void addAction(XiQWidget* __thisPtr, XiQAction* action);
    static void paintEvent(XiQWidget* __thisPtr, XiQPaintEvent* pe);
    static void mousePressEvent(XiQWidget* __thisPtr, XiQMouseEvent* e);
    static void mouseReleaseEvent(XiQWidget* __thisPtr, XiQMouseEvent* e);
    static void mouseDoubleClickEvent(XiQWidget* __thisPtr, XiQMouseEvent* e);
    static void mouseMoveEvent(XiQWidget* __thisPtr, XiQMouseEvent* e);
    static void wheelEvent(XiQWidget* __thisPtr, XiQWheelEvent* e);
    static void keyPressEvent(XiQWidget* __thisPtr, XiQKeyEvent* e);
    static void keyReleaseEvent(XiQWidget* __thisPtr, XiQKeyEvent* e);
    static void enterEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void leaveEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void resizeEvent(XiQWidget* __thisPtr, XiQResizeEvent* e);
    static void closeEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void contextMenuEvent(XiQWidget* __thisPtr, XiQContextMenuEvent* e);
    static void showEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void hideEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* pe);
};

ETA_EXPORT XiQPaintDevice* ETA(QWidget__to__QPaintDevice_r12QPaintDevicer7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__show_pr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__hide_pr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__raise_pr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__lower_pr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__close_pr7QWidget)(XiQWidget* self);
ETA_EXPORT bool ETA(QWidget__isEnabled_br7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__setEnabled_pr7QWidgetb)(XiQWidget* self, bool param0);
ETA_EXPORT void ETA(QWidget__setLayout_pr7QWidgetr7QLayout)(XiQWidget* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QWidget__isWindowModified_br7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__setWindowModified_pr7QWidgetb)(XiQWidget* self, bool param0);
ETA_EXPORT XiQString* ETA(QWidget__windowTitle_r7QStringr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__setWindowTitle_pr7QWidgetr7QString)(XiQWidget* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QWidget__windowIcon_r5QIconr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__setWindowIcon_pr7QWidgetr5QIcon)(XiQWidget* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QWidget__isActiveWindow_br7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__activateWindow_pr7QWidget)(XiQWidget* self);
ETA_EXPORT bool ETA(QWidget__isMinimized_br7QWidget)(XiQWidget* self);
ETA_EXPORT bool ETA(QWidget__isMaximized_br7QWidget)(XiQWidget* self);
ETA_EXPORT bool ETA(QWidget__isFullScreen_br7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__showMinimized_pr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__showMaximized_pr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__showFullScreen_pr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__showNormal_pr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__update_pr7QWidgetr5QRect)(XiQWidget* self, XiQRect* r);
ETA_EXPORT void ETA(QWidget__repaint_pr7QWidgetr5QRect)(XiQWidget* self, XiQRect* r);
ETA_EXPORT void ETA(QWidget__setMinimumSize_pr7QWidgetr5QSize)(XiQWidget* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QWidget__minimumSize_r5QSizer7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__setMaximumSize_pr7QWidgetr5QSize)(XiQWidget* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QWidget__maximumSize_r5QSizer7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__setFixedSize_pr7QWidgetr5QSize)(XiQWidget* self, XiQSize* param0);
ETA_EXPORT void ETA(QWidget__resize_pr7QWidgetr5QSize)(XiQWidget* self, XiQSize* s);
ETA_EXPORT void ETA(QWidget__adjustSize_pr7QWidget)(XiQWidget* self);
ETA_EXPORT XiQPoint* ETA(QWidget__pos_r6QPointr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__move_pr7QWidgetr6QPoint)(XiQWidget* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QWidget__sizeHint_r5QSizer7QWidget)(XiQWidget* self);
ETA_EXPORT XiQSize* ETA(QWidget__minimumSizeHint_r5QSizer7QWidget)(XiQWidget* self);
ETA_EXPORT XiQPoint* ETA(QWidget__mapFrom_r6QPointr7QWidgetr7QWidgetr6QPoint)(XiQWidget* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QWidget__mapFromGlobal_r6QPointr7QWidgetr6QPoint)(XiQWidget* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QWidget__mapFromParent_r6QPointr7QWidgetr6QPoint)(XiQWidget* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QWidget__mapTo_r6QPointr7QWidgetr7QWidgetr6QPoint)(XiQWidget* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QWidget__mapToGlobal_r6QPointr7QWidgetr6QPoint)(XiQWidget* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QWidget__mapToParent_r6QPointr7QWidgetr6QPoint)(XiQWidget* self, XiQPoint* param0);
ETA_EXPORT void ETA(QWidget__setFont_pr7QWidgetr5QFont)(XiQWidget* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QWidget__font_r5QFontr7QWidget)(XiQWidget* self);
ETA_EXPORT XiQString* ETA(QWidget__styleSheet_r7QStringr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__setStyleSheet_pr7QWidgetr7QString)(XiQWidget* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QWidget__focusPolicy_r11FocusPolicyr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__setFocusPolicy_pr7QWidgetr11FocusPolicy)(XiQWidget* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QWidget__setFocus_pr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__clearFocus_pr7QWidget)(XiQWidget* self);
ETA_EXPORT bool ETA(QWidget__hasFocus_br7QWidget)(XiQWidget* self);
ETA_EXPORT XiQString* ETA(QWidget__toolTip_r7QStringr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__setToolTip_pr7QWidgetr7QString)(XiQWidget* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QWidget__whatsThis_r7QStringr7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__setWhatsThis_pr7QWidgetr7QString)(XiQWidget* self, XiQString* param0);
ETA_EXPORT bool ETA(QWidget__hasMouseTracking_br7QWidget)(XiQWidget* self);
ETA_EXPORT void ETA(QWidget__setMouseTracking_pr7QWidgetb)(XiQWidget* self, bool param0);
ETA_EXPORT void ETA(QWidget__addAction_pr7QWidgetr7QAction)(XiQWidget* self, XiQAction* action);
ETA_EXPORT void ETA(QWidget__paintEvent_pr7QWidgetr11QPaintEvent)(XiQWidget* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QWidget__mousePressEvent_pr7QWidgetr11QMouseEvent)(XiQWidget* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QWidget__mouseReleaseEvent_pr7QWidgetr11QMouseEvent)(XiQWidget* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QWidget__mouseDoubleClickEvent_pr7QWidgetr11QMouseEvent)(XiQWidget* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QWidget__mouseMoveEvent_pr7QWidgetr11QMouseEvent)(XiQWidget* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QWidget__wheelEvent_pr7QWidgetr11QWheelEvent)(XiQWidget* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QWidget__keyPressEvent_pr7QWidgetr9QKeyEvent)(XiQWidget* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QWidget__keyReleaseEvent_pr7QWidgetr9QKeyEvent)(XiQWidget* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QWidget__enterEvent_pr7QWidgetr6QEvent)(XiQWidget* self, XiQEvent* e);
ETA_EXPORT void ETA(QWidget__leaveEvent_pr7QWidgetr6QEvent)(XiQWidget* self, XiQEvent* e);
ETA_EXPORT void ETA(QWidget__resizeEvent_pr7QWidgetr12QResizeEvent)(XiQWidget* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QWidget__closeEvent_pr7QWidgetr6QEvent)(XiQWidget* self, XiQEvent* e);
ETA_EXPORT void ETA(QWidget__contextMenuEvent_pr7QWidgetr17QContextMenuEvent)(XiQWidget* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QWidget__showEvent_pr7QWidgetr6QEvent)(XiQWidget* self, XiQEvent* e);
ETA_EXPORT void ETA(QWidget__hideEvent_pr7QWidgetr6QEvent)(XiQWidget* self, XiQEvent* e);
ETA_EXPORT void ETA(QWidget__defaultEvent_pr7QWidgetr6QEvent)(XiQWidget* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QWidget__toPixmap_r7QPixmapr7QWidget)(XiQWidget* self);
ETA_EXPORT XiQWidget* ETA(QWidget__toWidget_r7QWidgetr7QWidget)(XiQWidget* self);

using XiQWidgetDerived = XiQWidget_vtable;

ETA_EXPORT XiQWidgetDerived* ETA(QWidget__extend_r14QWidgetDerived)();
ETA_EXPORT void ETA(QWidget__downcast_pr7QWidgetr14QWidgetDerived)(XiQWidget* self, XiQWidgetDerived* derived);

ETA_EXPORT void ETA(QWidget__override__show_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__hide_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__raise_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__lower_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__close_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__isEnabled_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setEnabled_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setLayout_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__isWindowModified_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setWindowModified_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__windowTitle_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setWindowTitle_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__windowIcon_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setWindowIcon_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__isActiveWindow_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__activateWindow_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__isMinimized_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__isMaximized_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__isFullScreen_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__showMinimized_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__showMaximized_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__showFullScreen_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__showNormal_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__update_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__repaint_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setMinimumSize_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__minimumSize_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setMaximumSize_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__maximumSize_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setFixedSize_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__resize_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__adjustSize_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__pos_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__move_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__sizeHint_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__minimumSizeHint_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__mapFrom_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__mapFromGlobal_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__mapFromParent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__mapTo_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__mapToGlobal_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__mapToParent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setFont_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__font_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__styleSheet_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setStyleSheet_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__focusPolicy_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setFocusPolicy_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setFocus_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__clearFocus_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__hasFocus_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__toolTip_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setToolTip_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__whatsThis_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setWhatsThis_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__hasMouseTracking_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__setMouseTracking_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__addAction_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__paintEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__mousePressEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__mouseReleaseEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__mouseDoubleClickEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__mouseMoveEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__wheelEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__keyPressEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__keyReleaseEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__enterEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__leaveEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__resizeEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__closeEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__contextMenuEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__showEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__hideEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__defaultEvent_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__toPixmap_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);
ETA_EXPORT void ETA(QWidget__override__toWidget_pr14QWidgetDerivedai)(XiQWidgetDerived* derived, void* name);

ETA_EXPORT XiQWidget* ETA(qwidget__alloc_r7QWidget)();

inline QWidget* fromXi(XiQWidget* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQWidget_vtable: public XiQPaintDevice_vtable
{
    void* reserved;
    void (*show)(XiQWidget*);
    void (*hide)(XiQWidget*);
    void (*raise)(XiQWidget*);
    void (*lower)(XiQWidget*);
    void (*close)(XiQWidget*);
    bool (*isEnabled)(XiQWidget*);
    void (*setEnabled)(XiQWidget*, bool);
    void (*setLayout)(XiQWidget*, XiQLayout*);
    bool (*isWindowModified)(XiQWidget*);
    void (*setWindowModified)(XiQWidget*, bool);
    XiQString* (*windowTitle)(XiQWidget*);
    void (*setWindowTitle)(XiQWidget*, XiQString*);
    XiQIcon* (*windowIcon)(XiQWidget*);
    void (*setWindowIcon)(XiQWidget*, XiQIcon*);
    bool (*isActiveWindow)(XiQWidget*);
    void (*activateWindow)(XiQWidget*);
    bool (*isMinimized)(XiQWidget*);
    bool (*isMaximized)(XiQWidget*);
    bool (*isFullScreen)(XiQWidget*);
    void (*showMinimized)(XiQWidget*);
    void (*showMaximized)(XiQWidget*);
    void (*showFullScreen)(XiQWidget*);
    void (*showNormal)(XiQWidget*);
    void (*update)(XiQWidget*, XiQRect*);
    void (*repaint)(XiQWidget*, XiQRect*);
    void (*setMinimumSize)(XiQWidget*, XiQSize*);
    XiQSize* (*minimumSize)(XiQWidget*);
    void (*setMaximumSize)(XiQWidget*, XiQSize*);
    XiQSize* (*maximumSize)(XiQWidget*);
    void (*setFixedSize)(XiQWidget*, XiQSize*);
    void (*resize)(XiQWidget*, XiQSize*);
    void (*adjustSize)(XiQWidget*);
    XiQPoint* (*pos)(XiQWidget*);
    void (*move)(XiQWidget*, XiQPoint*);
    XiQSize* (*sizeHint)(XiQWidget*);
    XiQSize* (*minimumSizeHint)(XiQWidget*);
    XiQPoint* (*mapFrom)(XiQWidget*, XiQWidget*, XiQPoint*);
    XiQPoint* (*mapFromGlobal)(XiQWidget*, XiQPoint*);
    XiQPoint* (*mapFromParent)(XiQWidget*, XiQPoint*);
    XiQPoint* (*mapTo)(XiQWidget*, XiQWidget*, XiQPoint*);
    XiQPoint* (*mapToGlobal)(XiQWidget*, XiQPoint*);
    XiQPoint* (*mapToParent)(XiQWidget*, XiQPoint*);
    void (*setFont)(XiQWidget*, XiQFont*);
    XiQFont* (*font)(XiQWidget*);
    XiQString* (*styleSheet)(XiQWidget*);
    void (*setStyleSheet)(XiQWidget*, XiQString*);
    XiFocusPolicy* (*focusPolicy)(XiQWidget*);
    void (*setFocusPolicy)(XiQWidget*, XiFocusPolicy*);
    void (*setFocus)(XiQWidget*);
    void (*clearFocus)(XiQWidget*);
    bool (*hasFocus)(XiQWidget*);
    XiQString* (*toolTip)(XiQWidget*);
    void (*setToolTip)(XiQWidget*, XiQString*);
    XiQString* (*whatsThis)(XiQWidget*);
    void (*setWhatsThis)(XiQWidget*, XiQString*);
    bool (*hasMouseTracking)(XiQWidget*);
    void (*setMouseTracking)(XiQWidget*, bool);
    void (*addAction)(XiQWidget*, XiQAction*);
    void (*paintEvent)(XiQWidget*, XiQPaintEvent*);
    void (*mousePressEvent)(XiQWidget*, XiQMouseEvent*);
    void (*mouseReleaseEvent)(XiQWidget*, XiQMouseEvent*);
    void (*mouseDoubleClickEvent)(XiQWidget*, XiQMouseEvent*);
    void (*mouseMoveEvent)(XiQWidget*, XiQMouseEvent*);
    void (*wheelEvent)(XiQWidget*, XiQWheelEvent*);
    void (*keyPressEvent)(XiQWidget*, XiQKeyEvent*);
    void (*keyReleaseEvent)(XiQWidget*, XiQKeyEvent*);
    void (*enterEvent)(XiQWidget*, XiQEvent*);
    void (*leaveEvent)(XiQWidget*, XiQEvent*);
    void (*resizeEvent)(XiQWidget*, XiQResizeEvent*);
    void (*closeEvent)(XiQWidget*, XiQEvent*);
    void (*contextMenuEvent)(XiQWidget*, XiQContextMenuEvent*);
    void (*showEvent)(XiQWidget*, XiQEvent*);
    void (*hideEvent)(XiQWidget*, XiQEvent*);
    void (*defaultEvent)(XiQWidget*, XiQEvent*);
};

inline XiQWidget_vtable* XiQWidget::vtable() {
    return static_cast<XiQWidget_vtable*>(vptr);
}

extern XiQWidget_vtable ETA(_vt_QWidget);
extern int ETA(_size_QWidget);
ETA_EXPORT void ETA(_init_QWidget)() __attribute__((constructor));




struct XiQPushButton_vtable;
struct XiQPushButton: public XiQWidget
{
    XiQPushButton_vtable* vtable();
    XiQPushButton();
    QPushButton* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QPushButton wrappedType;
    xiqEventListenerList<XiClickListener> clickListeners;
    XiQPushButtonSigs* sig;

    QPushButton* getImpl() {
        return static_cast<QPushButton*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QPushButton>());
    }

    void setObject(QPushButton* b) {
        XiQWidget::setObject(b);
        sig = new XiQPushButtonSigs(this, b);
    }

    ~XiQPushButton() {
        delete sig;
    }
    static XiQIcon* icon(XiQPushButton* __thisPtr);
    static void setIcon(XiQPushButton* __thisPtr, XiQIcon* param0);
    static XiQString* text(XiQPushButton* __thisPtr);
    static void setText(XiQPushButton* __thisPtr, XiQString* param0);
    static XiQMenu* menu(XiQPushButton* __thisPtr);
    static void setMenu(XiQPushButton* __thisPtr, XiQMenu* param0);
    static void showMenu(XiQPushButton* __thisPtr);
    static bool isDefault(XiQPushButton* __thisPtr);
    static void setDefault(XiQPushButton* __thisPtr, bool param0);
    static bool autoDefault(XiQPushButton* __thisPtr);
    static void setAutoDefault(XiQPushButton* __thisPtr, bool param0);
    static bool isFlat(XiQPushButton* __thisPtr);
    static void setFlat(XiQPushButton* __thisPtr, bool param0);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void addClickListener(XiQPushButton* __thisPtr, XiClickListener* cl);
    static void clicked(XiQPushButton* __thisPtr);
};

ETA_EXPORT XiQWidget* ETA(QPushButton__to__QWidget_r7QWidgetr11QPushButton)(XiQPushButton* self);
ETA_EXPORT XiQPaintDevice* ETA(QPushButton__to__QPaintDevice_r12QPaintDevicer11QPushButton)(XiQPushButton* self);
ETA_EXPORT XiQIcon* ETA(QPushButton__icon_r5QIconr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setIcon_pr11QPushButtonr5QIcon)(XiQPushButton* self, XiQIcon* param0);
ETA_EXPORT XiQString* ETA(QPushButton__text_r7QStringr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setText_pr11QPushButtonr7QString)(XiQPushButton* self, XiQString* param0);
ETA_EXPORT XiQMenu* ETA(QPushButton__menu_r5QMenur11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setMenu_pr11QPushButtonr5QMenu)(XiQPushButton* self, XiQMenu* param0);
ETA_EXPORT void ETA(QPushButton__showMenu_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT bool ETA(QPushButton__isDefault_br11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setDefault_pr11QPushButtonb)(XiQPushButton* self, bool param0);
ETA_EXPORT bool ETA(QPushButton__autoDefault_br11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setAutoDefault_pr11QPushButtonb)(XiQPushButton* self, bool param0);
ETA_EXPORT bool ETA(QPushButton__isFlat_br11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setFlat_pr11QPushButtonb)(XiQPushButton* self, bool param0);
ETA_EXPORT void ETA(QPushButton__addClickListener_pr11QPushButtonr13ClickListener)(XiQPushButton* self, XiClickListener* cl);
ETA_EXPORT void ETA(QPushButton__clicked_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__show_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__hide_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__raise_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__lower_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__close_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT bool ETA(QPushButton__isEnabled_br11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setEnabled_pr11QPushButtonb)(XiQPushButton* self, bool param0);
ETA_EXPORT void ETA(QPushButton__setLayout_pr11QPushButtonr7QLayout)(XiQPushButton* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QPushButton__isWindowModified_br11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setWindowModified_pr11QPushButtonb)(XiQPushButton* self, bool param0);
ETA_EXPORT XiQString* ETA(QPushButton__windowTitle_r7QStringr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setWindowTitle_pr11QPushButtonr7QString)(XiQPushButton* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QPushButton__windowIcon_r5QIconr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setWindowIcon_pr11QPushButtonr5QIcon)(XiQPushButton* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QPushButton__isActiveWindow_br11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__activateWindow_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT bool ETA(QPushButton__isMinimized_br11QPushButton)(XiQPushButton* self);
ETA_EXPORT bool ETA(QPushButton__isMaximized_br11QPushButton)(XiQPushButton* self);
ETA_EXPORT bool ETA(QPushButton__isFullScreen_br11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__showMinimized_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__showMaximized_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__showFullScreen_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__showNormal_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__update_pr11QPushButtonr5QRect)(XiQPushButton* self, XiQRect* r);
ETA_EXPORT void ETA(QPushButton__repaint_pr11QPushButtonr5QRect)(XiQPushButton* self, XiQRect* r);
ETA_EXPORT void ETA(QPushButton__setMinimumSize_pr11QPushButtonr5QSize)(XiQPushButton* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QPushButton__minimumSize_r5QSizer11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setMaximumSize_pr11QPushButtonr5QSize)(XiQPushButton* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QPushButton__maximumSize_r5QSizer11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setFixedSize_pr11QPushButtonr5QSize)(XiQPushButton* self, XiQSize* param0);
ETA_EXPORT void ETA(QPushButton__resize_pr11QPushButtonr5QSize)(XiQPushButton* self, XiQSize* s);
ETA_EXPORT void ETA(QPushButton__adjustSize_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT XiQPoint* ETA(QPushButton__pos_r6QPointr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__move_pr11QPushButtonr6QPoint)(XiQPushButton* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QPushButton__sizeHint_r5QSizer11QPushButton)(XiQPushButton* self);
ETA_EXPORT XiQSize* ETA(QPushButton__minimumSizeHint_r5QSizer11QPushButton)(XiQPushButton* self);
ETA_EXPORT XiQPoint* ETA(QPushButton__mapFrom_r6QPointr11QPushButtonr7QWidgetr6QPoint)(XiQPushButton* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QPushButton__mapFromGlobal_r6QPointr11QPushButtonr6QPoint)(XiQPushButton* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QPushButton__mapFromParent_r6QPointr11QPushButtonr6QPoint)(XiQPushButton* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QPushButton__mapTo_r6QPointr11QPushButtonr7QWidgetr6QPoint)(XiQPushButton* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QPushButton__mapToGlobal_r6QPointr11QPushButtonr6QPoint)(XiQPushButton* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QPushButton__mapToParent_r6QPointr11QPushButtonr6QPoint)(XiQPushButton* self, XiQPoint* param0);
ETA_EXPORT void ETA(QPushButton__setFont_pr11QPushButtonr5QFont)(XiQPushButton* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QPushButton__font_r5QFontr11QPushButton)(XiQPushButton* self);
ETA_EXPORT XiQString* ETA(QPushButton__styleSheet_r7QStringr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setStyleSheet_pr11QPushButtonr7QString)(XiQPushButton* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QPushButton__focusPolicy_r11FocusPolicyr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setFocusPolicy_pr11QPushButtonr11FocusPolicy)(XiQPushButton* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QPushButton__setFocus_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__clearFocus_pr11QPushButton)(XiQPushButton* self);
ETA_EXPORT bool ETA(QPushButton__hasFocus_br11QPushButton)(XiQPushButton* self);
ETA_EXPORT XiQString* ETA(QPushButton__toolTip_r7QStringr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setToolTip_pr11QPushButtonr7QString)(XiQPushButton* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QPushButton__whatsThis_r7QStringr11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setWhatsThis_pr11QPushButtonr7QString)(XiQPushButton* self, XiQString* param0);
ETA_EXPORT bool ETA(QPushButton__hasMouseTracking_br11QPushButton)(XiQPushButton* self);
ETA_EXPORT void ETA(QPushButton__setMouseTracking_pr11QPushButtonb)(XiQPushButton* self, bool param0);
ETA_EXPORT void ETA(QPushButton__addAction_pr11QPushButtonr7QAction)(XiQPushButton* self, XiQAction* action);
ETA_EXPORT void ETA(QPushButton__paintEvent_pr11QPushButtonr11QPaintEvent)(XiQPushButton* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QPushButton__mousePressEvent_pr11QPushButtonr11QMouseEvent)(XiQPushButton* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QPushButton__mouseReleaseEvent_pr11QPushButtonr11QMouseEvent)(XiQPushButton* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QPushButton__mouseDoubleClickEvent_pr11QPushButtonr11QMouseEvent)(XiQPushButton* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QPushButton__mouseMoveEvent_pr11QPushButtonr11QMouseEvent)(XiQPushButton* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QPushButton__wheelEvent_pr11QPushButtonr11QWheelEvent)(XiQPushButton* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QPushButton__keyPressEvent_pr11QPushButtonr9QKeyEvent)(XiQPushButton* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QPushButton__keyReleaseEvent_pr11QPushButtonr9QKeyEvent)(XiQPushButton* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QPushButton__enterEvent_pr11QPushButtonr6QEvent)(XiQPushButton* self, XiQEvent* e);
ETA_EXPORT void ETA(QPushButton__leaveEvent_pr11QPushButtonr6QEvent)(XiQPushButton* self, XiQEvent* e);
ETA_EXPORT void ETA(QPushButton__resizeEvent_pr11QPushButtonr12QResizeEvent)(XiQPushButton* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QPushButton__closeEvent_pr11QPushButtonr6QEvent)(XiQPushButton* self, XiQEvent* e);
ETA_EXPORT void ETA(QPushButton__contextMenuEvent_pr11QPushButtonr17QContextMenuEvent)(XiQPushButton* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QPushButton__showEvent_pr11QPushButtonr6QEvent)(XiQPushButton* self, XiQEvent* e);
ETA_EXPORT void ETA(QPushButton__hideEvent_pr11QPushButtonr6QEvent)(XiQPushButton* self, XiQEvent* e);
ETA_EXPORT void ETA(QPushButton__defaultEvent_pr11QPushButtonr6QEvent)(XiQPushButton* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QPushButton__toPixmap_r7QPixmapr11QPushButton)(XiQPushButton* self);
ETA_EXPORT XiQWidget* ETA(QPushButton__toWidget_r7QWidgetr11QPushButton)(XiQPushButton* self);

using XiQPushButtonDerived = XiQPushButton_vtable;

ETA_EXPORT XiQPushButtonDerived* ETA(QPushButton__extend_r18QPushButtonDerived)();
ETA_EXPORT void ETA(QPushButton__downcast_pr11QPushButtonr18QPushButtonDerived)(XiQPushButton* self, XiQPushButtonDerived* derived);

ETA_EXPORT void ETA(QPushButton__override__icon_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setIcon_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__text_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setText_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__menu_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setMenu_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__showMenu_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__isDefault_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setDefault_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__autoDefault_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setAutoDefault_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__isFlat_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setFlat_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__addClickListener_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__clicked_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__show_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__hide_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__raise_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__lower_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__close_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__isEnabled_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setEnabled_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setLayout_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__isWindowModified_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setWindowModified_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__windowTitle_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setWindowTitle_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__windowIcon_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setWindowIcon_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__isActiveWindow_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__activateWindow_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__isMinimized_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__isMaximized_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__isFullScreen_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__showMinimized_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__showMaximized_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__showFullScreen_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__showNormal_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__update_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__repaint_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setMinimumSize_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__minimumSize_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setMaximumSize_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__maximumSize_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setFixedSize_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__resize_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__adjustSize_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__pos_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__move_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__sizeHint_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__minimumSizeHint_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__mapFrom_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__mapFromGlobal_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__mapFromParent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__mapTo_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__mapToGlobal_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__mapToParent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setFont_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__font_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__styleSheet_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setStyleSheet_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__focusPolicy_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setFocusPolicy_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setFocus_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__clearFocus_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__hasFocus_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__toolTip_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setToolTip_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__whatsThis_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setWhatsThis_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__hasMouseTracking_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__setMouseTracking_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__addAction_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__paintEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__mousePressEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__mouseReleaseEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__mouseDoubleClickEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__mouseMoveEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__wheelEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__keyPressEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__keyReleaseEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__enterEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__leaveEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__resizeEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__closeEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__contextMenuEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__showEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__hideEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__defaultEvent_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__toPixmap_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QPushButton__override__toWidget_pr18QPushButtonDerivedai)(XiQPushButtonDerived* derived, void* name);

ETA_EXPORT XiQPushButton* ETA(qpushbutton__alloc_r11QPushButton)();

inline QPushButton* fromXi(XiQPushButton* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQPushButton_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiQIcon* (*icon)(XiQPushButton*);
    void (*setIcon)(XiQPushButton*, XiQIcon*);
    XiQString* (*text)(XiQPushButton*);
    void (*setText)(XiQPushButton*, XiQString*);
    XiQMenu* (*menu)(XiQPushButton*);
    void (*setMenu)(XiQPushButton*, XiQMenu*);
    void (*showMenu)(XiQPushButton*);
    bool (*isDefault)(XiQPushButton*);
    void (*setDefault)(XiQPushButton*, bool);
    bool (*autoDefault)(XiQPushButton*);
    void (*setAutoDefault)(XiQPushButton*, bool);
    bool (*isFlat)(XiQPushButton*);
    void (*setFlat)(XiQPushButton*, bool);
    void (*addClickListener)(XiQPushButton*, XiClickListener*);
    void (*clicked)(XiQPushButton*);
};

inline XiQPushButton_vtable* XiQPushButton::vtable() {
    return static_cast<XiQPushButton_vtable*>(vptr);
}

extern XiQPushButton_vtable ETA(_vt_QPushButton);
extern int ETA(_size_QPushButton);
ETA_EXPORT void ETA(_init_QPushButton)() __attribute__((constructor));


ETA_EXPORT XiQPushButton* ETA(qpushbutton_r11QPushButtonr7QString)(XiQString* label);


struct XiClickListener_vtable;
struct XiClickListener: public Xiobj
{
    XiClickListener_vtable* vtable();
    XiClickListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiClickListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiClickListener* me = static_cast<XiClickListener*>(mePtr);
        if (me->initialized)
            me->~XiClickListener();
    }

    static void clicked(XiClickListener* __thisPtr, XiQPushButton* pb);
};

ETA_EXPORT void ETA(ClickListener__clicked_pr13ClickListenerr11QPushButton)(XiClickListener* self, XiQPushButton* pb);

using XiClickListenerDerived = XiClickListener_vtable;

ETA_EXPORT XiClickListenerDerived* ETA(ClickListener__extend_r20ClickListenerDerived)();
ETA_EXPORT void ETA(ClickListener__downcast_pr13ClickListenerr20ClickListenerDerived)(XiClickListener* self, XiClickListenerDerived* derived);

ETA_EXPORT void ETA(ClickListener__override__clicked_pr20ClickListenerDerivedai)(XiClickListenerDerived* derived, void* name);

ETA_EXPORT XiClickListener* ETA(clicklistener__alloc_r13ClickListener)();

struct XiClickListener_vtable: public Xivtable
{
    void* reserved;
    void (*clicked)(XiClickListener*, XiQPushButton*);
};

inline XiClickListener_vtable* XiClickListener::vtable() {
    return static_cast<XiClickListener_vtable*>(vptr);
}

extern XiClickListener_vtable ETA(_vt_ClickListener);
extern int ETA(_size_ClickListener);
ETA_EXPORT void ETA(_init_ClickListener)() __attribute__((constructor));




struct XiQCheckBox_vtable;
struct XiQCheckBox: public XiQWidget
{
    XiQCheckBox_vtable* vtable();
    XiQCheckBox();
    QCheckBox* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QCheckBox wrappedType;
    xiqEventListenerList<XiToggleListener> listeners;
    XiQCheckBoxSigs* sig;

    QCheckBox* getImpl() {
        return static_cast<QCheckBox*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QCheckBox>());
    }

    void setObject(QCheckBox* b) {
        XiQWidget::setObject(b);
        sig = new XiQCheckBoxSigs(this, b);
    }

    ~XiQCheckBox() {
        delete sig;
    }
    static XiQString* text(XiQCheckBox* __thisPtr);
    static void setText(XiQCheckBox* __thisPtr, XiQString* param0);
    static bool isChecked(XiQCheckBox* __thisPtr);
    static void setChecked(XiQCheckBox* __thisPtr, bool param0);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void addToggleListener(XiQCheckBox* __thisPtr, XiToggleListener* l);
    static void toggled(XiQCheckBox* __thisPtr, bool param0);
};

ETA_EXPORT XiQWidget* ETA(QCheckBox__to__QWidget_r7QWidgetr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT XiQPaintDevice* ETA(QCheckBox__to__QPaintDevice_r12QPaintDevicer9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT XiQString* ETA(QCheckBox__text_r7QStringr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setText_pr9QCheckBoxr7QString)(XiQCheckBox* self, XiQString* param0);
ETA_EXPORT bool ETA(QCheckBox__isChecked_br9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setChecked_pr9QCheckBoxb)(XiQCheckBox* self, bool param0);
ETA_EXPORT void ETA(QCheckBox__addToggleListener_pr9QCheckBoxr14ToggleListener)(XiQCheckBox* self, XiToggleListener* l);
ETA_EXPORT void ETA(QCheckBox__toggled_pr9QCheckBoxb)(XiQCheckBox* self, bool param0);
ETA_EXPORT void ETA(QCheckBox__show_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__hide_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__raise_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__lower_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__close_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT bool ETA(QCheckBox__isEnabled_br9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setEnabled_pr9QCheckBoxb)(XiQCheckBox* self, bool param0);
ETA_EXPORT void ETA(QCheckBox__setLayout_pr9QCheckBoxr7QLayout)(XiQCheckBox* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QCheckBox__isWindowModified_br9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setWindowModified_pr9QCheckBoxb)(XiQCheckBox* self, bool param0);
ETA_EXPORT XiQString* ETA(QCheckBox__windowTitle_r7QStringr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setWindowTitle_pr9QCheckBoxr7QString)(XiQCheckBox* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QCheckBox__windowIcon_r5QIconr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setWindowIcon_pr9QCheckBoxr5QIcon)(XiQCheckBox* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QCheckBox__isActiveWindow_br9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__activateWindow_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT bool ETA(QCheckBox__isMinimized_br9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT bool ETA(QCheckBox__isMaximized_br9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT bool ETA(QCheckBox__isFullScreen_br9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__showMinimized_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__showMaximized_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__showFullScreen_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__showNormal_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__update_pr9QCheckBoxr5QRect)(XiQCheckBox* self, XiQRect* r);
ETA_EXPORT void ETA(QCheckBox__repaint_pr9QCheckBoxr5QRect)(XiQCheckBox* self, XiQRect* r);
ETA_EXPORT void ETA(QCheckBox__setMinimumSize_pr9QCheckBoxr5QSize)(XiQCheckBox* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QCheckBox__minimumSize_r5QSizer9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setMaximumSize_pr9QCheckBoxr5QSize)(XiQCheckBox* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QCheckBox__maximumSize_r5QSizer9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setFixedSize_pr9QCheckBoxr5QSize)(XiQCheckBox* self, XiQSize* param0);
ETA_EXPORT void ETA(QCheckBox__resize_pr9QCheckBoxr5QSize)(XiQCheckBox* self, XiQSize* s);
ETA_EXPORT void ETA(QCheckBox__adjustSize_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT XiQPoint* ETA(QCheckBox__pos_r6QPointr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__move_pr9QCheckBoxr6QPoint)(XiQCheckBox* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QCheckBox__sizeHint_r5QSizer9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT XiQSize* ETA(QCheckBox__minimumSizeHint_r5QSizer9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT XiQPoint* ETA(QCheckBox__mapFrom_r6QPointr9QCheckBoxr7QWidgetr6QPoint)(XiQCheckBox* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QCheckBox__mapFromGlobal_r6QPointr9QCheckBoxr6QPoint)(XiQCheckBox* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QCheckBox__mapFromParent_r6QPointr9QCheckBoxr6QPoint)(XiQCheckBox* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QCheckBox__mapTo_r6QPointr9QCheckBoxr7QWidgetr6QPoint)(XiQCheckBox* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QCheckBox__mapToGlobal_r6QPointr9QCheckBoxr6QPoint)(XiQCheckBox* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QCheckBox__mapToParent_r6QPointr9QCheckBoxr6QPoint)(XiQCheckBox* self, XiQPoint* param0);
ETA_EXPORT void ETA(QCheckBox__setFont_pr9QCheckBoxr5QFont)(XiQCheckBox* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QCheckBox__font_r5QFontr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT XiQString* ETA(QCheckBox__styleSheet_r7QStringr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setStyleSheet_pr9QCheckBoxr7QString)(XiQCheckBox* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QCheckBox__focusPolicy_r11FocusPolicyr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setFocusPolicy_pr9QCheckBoxr11FocusPolicy)(XiQCheckBox* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QCheckBox__setFocus_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__clearFocus_pr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT bool ETA(QCheckBox__hasFocus_br9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT XiQString* ETA(QCheckBox__toolTip_r7QStringr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setToolTip_pr9QCheckBoxr7QString)(XiQCheckBox* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QCheckBox__whatsThis_r7QStringr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setWhatsThis_pr9QCheckBoxr7QString)(XiQCheckBox* self, XiQString* param0);
ETA_EXPORT bool ETA(QCheckBox__hasMouseTracking_br9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT void ETA(QCheckBox__setMouseTracking_pr9QCheckBoxb)(XiQCheckBox* self, bool param0);
ETA_EXPORT void ETA(QCheckBox__addAction_pr9QCheckBoxr7QAction)(XiQCheckBox* self, XiQAction* action);
ETA_EXPORT void ETA(QCheckBox__paintEvent_pr9QCheckBoxr11QPaintEvent)(XiQCheckBox* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QCheckBox__mousePressEvent_pr9QCheckBoxr11QMouseEvent)(XiQCheckBox* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QCheckBox__mouseReleaseEvent_pr9QCheckBoxr11QMouseEvent)(XiQCheckBox* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QCheckBox__mouseDoubleClickEvent_pr9QCheckBoxr11QMouseEvent)(XiQCheckBox* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QCheckBox__mouseMoveEvent_pr9QCheckBoxr11QMouseEvent)(XiQCheckBox* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QCheckBox__wheelEvent_pr9QCheckBoxr11QWheelEvent)(XiQCheckBox* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QCheckBox__keyPressEvent_pr9QCheckBoxr9QKeyEvent)(XiQCheckBox* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QCheckBox__keyReleaseEvent_pr9QCheckBoxr9QKeyEvent)(XiQCheckBox* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QCheckBox__enterEvent_pr9QCheckBoxr6QEvent)(XiQCheckBox* self, XiQEvent* e);
ETA_EXPORT void ETA(QCheckBox__leaveEvent_pr9QCheckBoxr6QEvent)(XiQCheckBox* self, XiQEvent* e);
ETA_EXPORT void ETA(QCheckBox__resizeEvent_pr9QCheckBoxr12QResizeEvent)(XiQCheckBox* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QCheckBox__closeEvent_pr9QCheckBoxr6QEvent)(XiQCheckBox* self, XiQEvent* e);
ETA_EXPORT void ETA(QCheckBox__contextMenuEvent_pr9QCheckBoxr17QContextMenuEvent)(XiQCheckBox* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QCheckBox__showEvent_pr9QCheckBoxr6QEvent)(XiQCheckBox* self, XiQEvent* e);
ETA_EXPORT void ETA(QCheckBox__hideEvent_pr9QCheckBoxr6QEvent)(XiQCheckBox* self, XiQEvent* e);
ETA_EXPORT void ETA(QCheckBox__defaultEvent_pr9QCheckBoxr6QEvent)(XiQCheckBox* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QCheckBox__toPixmap_r7QPixmapr9QCheckBox)(XiQCheckBox* self);
ETA_EXPORT XiQWidget* ETA(QCheckBox__toWidget_r7QWidgetr9QCheckBox)(XiQCheckBox* self);

using XiQCheckBoxDerived = XiQCheckBox_vtable;

ETA_EXPORT XiQCheckBoxDerived* ETA(QCheckBox__extend_r16QCheckBoxDerived)();
ETA_EXPORT void ETA(QCheckBox__downcast_pr9QCheckBoxr16QCheckBoxDerived)(XiQCheckBox* self, XiQCheckBoxDerived* derived);

ETA_EXPORT void ETA(QCheckBox__override__text_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setText_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__isChecked_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setChecked_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__addToggleListener_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__toggled_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__show_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__hide_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__raise_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__lower_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__close_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__isEnabled_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setEnabled_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setLayout_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__isWindowModified_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setWindowModified_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__windowTitle_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setWindowTitle_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__windowIcon_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setWindowIcon_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__isActiveWindow_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__activateWindow_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__isMinimized_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__isMaximized_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__isFullScreen_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__showMinimized_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__showMaximized_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__showFullScreen_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__showNormal_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__update_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__repaint_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setMinimumSize_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__minimumSize_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setMaximumSize_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__maximumSize_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setFixedSize_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__resize_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__adjustSize_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__pos_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__move_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__sizeHint_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__minimumSizeHint_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__mapFrom_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__mapFromGlobal_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__mapFromParent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__mapTo_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__mapToGlobal_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__mapToParent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setFont_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__font_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__styleSheet_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setStyleSheet_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__focusPolicy_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setFocusPolicy_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setFocus_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__clearFocus_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__hasFocus_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__toolTip_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setToolTip_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__whatsThis_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setWhatsThis_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__hasMouseTracking_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__setMouseTracking_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__addAction_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__paintEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__mousePressEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__mouseReleaseEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__mouseDoubleClickEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__mouseMoveEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__wheelEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__keyPressEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__keyReleaseEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__enterEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__leaveEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__resizeEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__closeEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__contextMenuEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__showEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__hideEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__defaultEvent_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__toPixmap_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QCheckBox__override__toWidget_pr16QCheckBoxDerivedai)(XiQCheckBoxDerived* derived, void* name);

ETA_EXPORT XiQCheckBox* ETA(qcheckbox__alloc_r9QCheckBox)();

inline QCheckBox* fromXi(XiQCheckBox* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQCheckBox_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiQString* (*text)(XiQCheckBox*);
    void (*setText)(XiQCheckBox*, XiQString*);
    bool (*isChecked)(XiQCheckBox*);
    void (*setChecked)(XiQCheckBox*, bool);
    void (*addToggleListener)(XiQCheckBox*, XiToggleListener*);
    void (*toggled)(XiQCheckBox*, bool);
};

inline XiQCheckBox_vtable* XiQCheckBox::vtable() {
    return static_cast<XiQCheckBox_vtable*>(vptr);
}

extern XiQCheckBox_vtable ETA(_vt_QCheckBox);
extern int ETA(_size_QCheckBox);
ETA_EXPORT void ETA(_init_QCheckBox)() __attribute__((constructor));


ETA_EXPORT XiQCheckBox* ETA(qcheckbox_r9QCheckBoxr7QString)(XiQString* label);


struct XiToggleListener_vtable;
struct XiToggleListener: public Xiobj
{
    XiToggleListener_vtable* vtable();
    XiToggleListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiToggleListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiToggleListener* me = static_cast<XiToggleListener*>(mePtr);
        if (me->initialized)
            me->~XiToggleListener();
    }

    static void toggled(XiToggleListener* __thisPtr, XiQWidget* widget, bool state);
};

ETA_EXPORT void ETA(ToggleListener__toggled_pr14ToggleListenerr7QWidgetb)(XiToggleListener* self, XiQWidget* widget, bool state);

using XiToggleListenerDerived = XiToggleListener_vtable;

ETA_EXPORT XiToggleListenerDerived* ETA(ToggleListener__extend_r21ToggleListenerDerived)();
ETA_EXPORT void ETA(ToggleListener__downcast_pr14ToggleListenerr21ToggleListenerDerived)(XiToggleListener* self, XiToggleListenerDerived* derived);

ETA_EXPORT void ETA(ToggleListener__override__toggled_pr21ToggleListenerDerivedai)(XiToggleListenerDerived* derived, void* name);

ETA_EXPORT XiToggleListener* ETA(togglelistener__alloc_r14ToggleListener)();

struct XiToggleListener_vtable: public Xivtable
{
    void* reserved;
    void (*toggled)(XiToggleListener*, XiQWidget*, bool);
};

inline XiToggleListener_vtable* XiToggleListener::vtable() {
    return static_cast<XiToggleListener_vtable*>(vptr);
}

extern XiToggleListener_vtable ETA(_vt_ToggleListener);
extern int ETA(_size_ToggleListener);
ETA_EXPORT void ETA(_init_ToggleListener)() __attribute__((constructor));




struct XiQRadioButton_vtable;
struct XiQRadioButton: public XiQWidget
{
    XiQRadioButton_vtable* vtable();
    XiQRadioButton();
    QRadioButton* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QRadioButton wrappedType;
    xiqEventListenerList<XiToggleListener> listeners;
    XiQRadioButtonSigs* sig;

    QRadioButton* getImpl() {
        return static_cast<QRadioButton*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QRadioButton>());
    }

    void setObject(QRadioButton* b) {
        XiQWidget::setObject(b);
        sig = new XiQRadioButtonSigs(this, b);
    }

    ~XiQRadioButton() {
        delete sig;
    }
    static XiQString* text(XiQRadioButton* __thisPtr);
    static void setText(XiQRadioButton* __thisPtr, XiQString* param0);
    static bool isChecked(XiQRadioButton* __thisPtr);
    static void setChecked(XiQRadioButton* __thisPtr, bool param0);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void addToggleListener(XiQRadioButton* __thisPtr, XiToggleListener* l);
    static void toggled(XiQRadioButton* __thisPtr, bool param0);
};

ETA_EXPORT XiQWidget* ETA(QRadioButton__to__QWidget_r7QWidgetr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT XiQPaintDevice* ETA(QRadioButton__to__QPaintDevice_r12QPaintDevicer12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT XiQString* ETA(QRadioButton__text_r7QStringr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setText_pr12QRadioButtonr7QString)(XiQRadioButton* self, XiQString* param0);
ETA_EXPORT bool ETA(QRadioButton__isChecked_br12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setChecked_pr12QRadioButtonb)(XiQRadioButton* self, bool param0);
ETA_EXPORT void ETA(QRadioButton__addToggleListener_pr12QRadioButtonr14ToggleListener)(XiQRadioButton* self, XiToggleListener* l);
ETA_EXPORT void ETA(QRadioButton__toggled_pr12QRadioButtonb)(XiQRadioButton* self, bool param0);
ETA_EXPORT void ETA(QRadioButton__show_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__hide_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__raise_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__lower_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__close_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT bool ETA(QRadioButton__isEnabled_br12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setEnabled_pr12QRadioButtonb)(XiQRadioButton* self, bool param0);
ETA_EXPORT void ETA(QRadioButton__setLayout_pr12QRadioButtonr7QLayout)(XiQRadioButton* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QRadioButton__isWindowModified_br12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setWindowModified_pr12QRadioButtonb)(XiQRadioButton* self, bool param0);
ETA_EXPORT XiQString* ETA(QRadioButton__windowTitle_r7QStringr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setWindowTitle_pr12QRadioButtonr7QString)(XiQRadioButton* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QRadioButton__windowIcon_r5QIconr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setWindowIcon_pr12QRadioButtonr5QIcon)(XiQRadioButton* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QRadioButton__isActiveWindow_br12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__activateWindow_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT bool ETA(QRadioButton__isMinimized_br12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT bool ETA(QRadioButton__isMaximized_br12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT bool ETA(QRadioButton__isFullScreen_br12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__showMinimized_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__showMaximized_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__showFullScreen_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__showNormal_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__update_pr12QRadioButtonr5QRect)(XiQRadioButton* self, XiQRect* r);
ETA_EXPORT void ETA(QRadioButton__repaint_pr12QRadioButtonr5QRect)(XiQRadioButton* self, XiQRect* r);
ETA_EXPORT void ETA(QRadioButton__setMinimumSize_pr12QRadioButtonr5QSize)(XiQRadioButton* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QRadioButton__minimumSize_r5QSizer12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setMaximumSize_pr12QRadioButtonr5QSize)(XiQRadioButton* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QRadioButton__maximumSize_r5QSizer12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setFixedSize_pr12QRadioButtonr5QSize)(XiQRadioButton* self, XiQSize* param0);
ETA_EXPORT void ETA(QRadioButton__resize_pr12QRadioButtonr5QSize)(XiQRadioButton* self, XiQSize* s);
ETA_EXPORT void ETA(QRadioButton__adjustSize_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT XiQPoint* ETA(QRadioButton__pos_r6QPointr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__move_pr12QRadioButtonr6QPoint)(XiQRadioButton* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QRadioButton__sizeHint_r5QSizer12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT XiQSize* ETA(QRadioButton__minimumSizeHint_r5QSizer12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT XiQPoint* ETA(QRadioButton__mapFrom_r6QPointr12QRadioButtonr7QWidgetr6QPoint)(XiQRadioButton* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QRadioButton__mapFromGlobal_r6QPointr12QRadioButtonr6QPoint)(XiQRadioButton* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QRadioButton__mapFromParent_r6QPointr12QRadioButtonr6QPoint)(XiQRadioButton* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QRadioButton__mapTo_r6QPointr12QRadioButtonr7QWidgetr6QPoint)(XiQRadioButton* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QRadioButton__mapToGlobal_r6QPointr12QRadioButtonr6QPoint)(XiQRadioButton* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QRadioButton__mapToParent_r6QPointr12QRadioButtonr6QPoint)(XiQRadioButton* self, XiQPoint* param0);
ETA_EXPORT void ETA(QRadioButton__setFont_pr12QRadioButtonr5QFont)(XiQRadioButton* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QRadioButton__font_r5QFontr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT XiQString* ETA(QRadioButton__styleSheet_r7QStringr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setStyleSheet_pr12QRadioButtonr7QString)(XiQRadioButton* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QRadioButton__focusPolicy_r11FocusPolicyr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setFocusPolicy_pr12QRadioButtonr11FocusPolicy)(XiQRadioButton* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QRadioButton__setFocus_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__clearFocus_pr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT bool ETA(QRadioButton__hasFocus_br12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT XiQString* ETA(QRadioButton__toolTip_r7QStringr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setToolTip_pr12QRadioButtonr7QString)(XiQRadioButton* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QRadioButton__whatsThis_r7QStringr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setWhatsThis_pr12QRadioButtonr7QString)(XiQRadioButton* self, XiQString* param0);
ETA_EXPORT bool ETA(QRadioButton__hasMouseTracking_br12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT void ETA(QRadioButton__setMouseTracking_pr12QRadioButtonb)(XiQRadioButton* self, bool param0);
ETA_EXPORT void ETA(QRadioButton__addAction_pr12QRadioButtonr7QAction)(XiQRadioButton* self, XiQAction* action);
ETA_EXPORT void ETA(QRadioButton__paintEvent_pr12QRadioButtonr11QPaintEvent)(XiQRadioButton* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QRadioButton__mousePressEvent_pr12QRadioButtonr11QMouseEvent)(XiQRadioButton* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QRadioButton__mouseReleaseEvent_pr12QRadioButtonr11QMouseEvent)(XiQRadioButton* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QRadioButton__mouseDoubleClickEvent_pr12QRadioButtonr11QMouseEvent)(XiQRadioButton* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QRadioButton__mouseMoveEvent_pr12QRadioButtonr11QMouseEvent)(XiQRadioButton* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QRadioButton__wheelEvent_pr12QRadioButtonr11QWheelEvent)(XiQRadioButton* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QRadioButton__keyPressEvent_pr12QRadioButtonr9QKeyEvent)(XiQRadioButton* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QRadioButton__keyReleaseEvent_pr12QRadioButtonr9QKeyEvent)(XiQRadioButton* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QRadioButton__enterEvent_pr12QRadioButtonr6QEvent)(XiQRadioButton* self, XiQEvent* e);
ETA_EXPORT void ETA(QRadioButton__leaveEvent_pr12QRadioButtonr6QEvent)(XiQRadioButton* self, XiQEvent* e);
ETA_EXPORT void ETA(QRadioButton__resizeEvent_pr12QRadioButtonr12QResizeEvent)(XiQRadioButton* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QRadioButton__closeEvent_pr12QRadioButtonr6QEvent)(XiQRadioButton* self, XiQEvent* e);
ETA_EXPORT void ETA(QRadioButton__contextMenuEvent_pr12QRadioButtonr17QContextMenuEvent)(XiQRadioButton* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QRadioButton__showEvent_pr12QRadioButtonr6QEvent)(XiQRadioButton* self, XiQEvent* e);
ETA_EXPORT void ETA(QRadioButton__hideEvent_pr12QRadioButtonr6QEvent)(XiQRadioButton* self, XiQEvent* e);
ETA_EXPORT void ETA(QRadioButton__defaultEvent_pr12QRadioButtonr6QEvent)(XiQRadioButton* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QRadioButton__toPixmap_r7QPixmapr12QRadioButton)(XiQRadioButton* self);
ETA_EXPORT XiQWidget* ETA(QRadioButton__toWidget_r7QWidgetr12QRadioButton)(XiQRadioButton* self);

using XiQRadioButtonDerived = XiQRadioButton_vtable;

ETA_EXPORT XiQRadioButtonDerived* ETA(QRadioButton__extend_r19QRadioButtonDerived)();
ETA_EXPORT void ETA(QRadioButton__downcast_pr12QRadioButtonr19QRadioButtonDerived)(XiQRadioButton* self, XiQRadioButtonDerived* derived);

ETA_EXPORT void ETA(QRadioButton__override__text_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setText_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__isChecked_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setChecked_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__addToggleListener_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__toggled_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__show_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__hide_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__raise_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__lower_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__close_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__isEnabled_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setEnabled_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setLayout_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__isWindowModified_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setWindowModified_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__windowTitle_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setWindowTitle_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__windowIcon_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setWindowIcon_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__isActiveWindow_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__activateWindow_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__isMinimized_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__isMaximized_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__isFullScreen_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__showMinimized_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__showMaximized_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__showFullScreen_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__showNormal_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__update_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__repaint_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setMinimumSize_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__minimumSize_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setMaximumSize_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__maximumSize_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setFixedSize_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__resize_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__adjustSize_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__pos_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__move_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__sizeHint_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__minimumSizeHint_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__mapFrom_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__mapFromGlobal_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__mapFromParent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__mapTo_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__mapToGlobal_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__mapToParent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setFont_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__font_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__styleSheet_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setStyleSheet_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__focusPolicy_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setFocusPolicy_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setFocus_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__clearFocus_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__hasFocus_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__toolTip_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setToolTip_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__whatsThis_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setWhatsThis_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__hasMouseTracking_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__setMouseTracking_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__addAction_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__paintEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__mousePressEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__mouseReleaseEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__mouseDoubleClickEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__mouseMoveEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__wheelEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__keyPressEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__keyReleaseEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__enterEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__leaveEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__resizeEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__closeEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__contextMenuEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__showEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__hideEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__defaultEvent_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__toPixmap_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);
ETA_EXPORT void ETA(QRadioButton__override__toWidget_pr19QRadioButtonDerivedai)(XiQRadioButtonDerived* derived, void* name);

ETA_EXPORT XiQRadioButton* ETA(qradiobutton__alloc_r12QRadioButton)();

inline QRadioButton* fromXi(XiQRadioButton* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQRadioButton_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiQString* (*text)(XiQRadioButton*);
    void (*setText)(XiQRadioButton*, XiQString*);
    bool (*isChecked)(XiQRadioButton*);
    void (*setChecked)(XiQRadioButton*, bool);
    void (*addToggleListener)(XiQRadioButton*, XiToggleListener*);
    void (*toggled)(XiQRadioButton*, bool);
};

inline XiQRadioButton_vtable* XiQRadioButton::vtable() {
    return static_cast<XiQRadioButton_vtable*>(vptr);
}

extern XiQRadioButton_vtable ETA(_vt_QRadioButton);
extern int ETA(_size_QRadioButton);
ETA_EXPORT void ETA(_init_QRadioButton)() __attribute__((constructor));


ETA_EXPORT XiQRadioButton* ETA(qradio_r12QRadioButtonr7QString)(XiQString* label);


struct XiQButtonGroup_vtable;
struct XiQButtonGroup: public Xiobj
{
    XiQButtonGroup_vtable* vtable();
    XiQButtonGroup();
    QButtonGroup* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QButtonGroup wrappedType;
    XiQObjectHolder<QButtonGroup> handle;

    // the listener list type is actually a general GC-traceable
    // list... So we (ab)use it to guard the buttons added to us.
    xiqEventListenerList<XiQRadioButton> buttons;

    QButtonGroup* getImpl() {
        return handle.get();
    }

    void createImpl() {
        setObject(new QButtonGroup());
    }

    void setObject(QButtonGroup* a) {
        handle.setObject(a, this);
    }
    static void addButton(XiQButtonGroup* __thisPtr, XiQRadioButton* button);
};

ETA_EXPORT void ETA(QButtonGroup__addButton_pr12QButtonGroupr12QRadioButton)(XiQButtonGroup* self, XiQRadioButton* button);

using XiQButtonGroupDerived = XiQButtonGroup_vtable;

ETA_EXPORT XiQButtonGroupDerived* ETA(QButtonGroup__extend_r19QButtonGroupDerived)();
ETA_EXPORT void ETA(QButtonGroup__downcast_pr12QButtonGroupr19QButtonGroupDerived)(XiQButtonGroup* self, XiQButtonGroupDerived* derived);

ETA_EXPORT void ETA(QButtonGroup__override__addButton_pr19QButtonGroupDerivedai)(XiQButtonGroupDerived* derived, void* name);

ETA_EXPORT XiQButtonGroup* ETA(qbuttongroup__alloc_r12QButtonGroup)();

inline QButtonGroup* fromXi(XiQButtonGroup* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQButtonGroup_vtable: public Xivtable
{
    void (*__classOp)(ClassOp, void*);
    void (*addButton)(XiQButtonGroup*, XiQRadioButton*);
};

inline XiQButtonGroup_vtable* XiQButtonGroup::vtable() {
    return static_cast<XiQButtonGroup_vtable*>(vptr);
}

extern XiQButtonGroup_vtable ETA(_vt_QButtonGroup);
extern int ETA(_size_QButtonGroup);
ETA_EXPORT void ETA(_init_QButtonGroup)() __attribute__((constructor));


ETA_EXPORT XiQButtonGroup* ETA(qbuttongroup_r12QButtonGroup)();


struct XiQMenu_vtable;
struct XiQMenu: public XiQWidget
{
    XiQMenu_vtable* vtable();
    XiQMenu();
    QMenu* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QMenu wrappedType;
    QMenu* getImpl() {
        return static_cast<QMenu*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QMenu>());
    }
    static void addAction(XiQWidget* __thisPtr, XiQAction* a);
    static void addMenu(XiQMenu* __thisPtr, XiQMenu* m);
    static void addSeparator(XiQMenu* __thisPtr);
    static XiQAction* menuAction(XiQMenu* __thisPtr);
    static XiQAction* exec(XiQMenu* __thisPtr, XiQPoint* p);
    static XiQString* title(XiQMenu* __thisPtr);
    static void setTitle(XiQMenu* __thisPtr, XiQString* param0);
    static XiQIcon* icon(XiQMenu* __thisPtr);
    static void setIcon(XiQMenu* __thisPtr, XiQIcon* param0);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
};

ETA_EXPORT XiQWidget* ETA(QMenu__to__QWidget_r7QWidgetr5QMenu)(XiQMenu* self);
ETA_EXPORT XiQPaintDevice* ETA(QMenu__to__QPaintDevice_r12QPaintDevicer5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__addMenu_pr5QMenur5QMenu)(XiQMenu* self, XiQMenu* m);
ETA_EXPORT void ETA(QMenu__addSeparator_pr5QMenu)(XiQMenu* self);
ETA_EXPORT XiQAction* ETA(QMenu__menuAction_r7QActionr5QMenu)(XiQMenu* self);
ETA_EXPORT XiQAction* ETA(QMenu__exec_r7QActionr5QMenur6QPoint)(XiQMenu* self, XiQPoint* p);
ETA_EXPORT XiQString* ETA(QMenu__title_r7QStringr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setTitle_pr5QMenur7QString)(XiQMenu* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QMenu__icon_r5QIconr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setIcon_pr5QMenur5QIcon)(XiQMenu* self, XiQIcon* param0);
ETA_EXPORT void ETA(QMenu__show_pr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__hide_pr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__raise_pr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__lower_pr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__close_pr5QMenu)(XiQMenu* self);
ETA_EXPORT bool ETA(QMenu__isEnabled_br5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setEnabled_pr5QMenub)(XiQMenu* self, bool param0);
ETA_EXPORT void ETA(QMenu__setLayout_pr5QMenur7QLayout)(XiQMenu* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QMenu__isWindowModified_br5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setWindowModified_pr5QMenub)(XiQMenu* self, bool param0);
ETA_EXPORT XiQString* ETA(QMenu__windowTitle_r7QStringr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setWindowTitle_pr5QMenur7QString)(XiQMenu* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QMenu__windowIcon_r5QIconr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setWindowIcon_pr5QMenur5QIcon)(XiQMenu* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QMenu__isActiveWindow_br5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__activateWindow_pr5QMenu)(XiQMenu* self);
ETA_EXPORT bool ETA(QMenu__isMinimized_br5QMenu)(XiQMenu* self);
ETA_EXPORT bool ETA(QMenu__isMaximized_br5QMenu)(XiQMenu* self);
ETA_EXPORT bool ETA(QMenu__isFullScreen_br5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__showMinimized_pr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__showMaximized_pr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__showFullScreen_pr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__showNormal_pr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__update_pr5QMenur5QRect)(XiQMenu* self, XiQRect* r);
ETA_EXPORT void ETA(QMenu__repaint_pr5QMenur5QRect)(XiQMenu* self, XiQRect* r);
ETA_EXPORT void ETA(QMenu__setMinimumSize_pr5QMenur5QSize)(XiQMenu* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QMenu__minimumSize_r5QSizer5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setMaximumSize_pr5QMenur5QSize)(XiQMenu* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QMenu__maximumSize_r5QSizer5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setFixedSize_pr5QMenur5QSize)(XiQMenu* self, XiQSize* param0);
ETA_EXPORT void ETA(QMenu__resize_pr5QMenur5QSize)(XiQMenu* self, XiQSize* s);
ETA_EXPORT void ETA(QMenu__adjustSize_pr5QMenu)(XiQMenu* self);
ETA_EXPORT XiQPoint* ETA(QMenu__pos_r6QPointr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__move_pr5QMenur6QPoint)(XiQMenu* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QMenu__sizeHint_r5QSizer5QMenu)(XiQMenu* self);
ETA_EXPORT XiQSize* ETA(QMenu__minimumSizeHint_r5QSizer5QMenu)(XiQMenu* self);
ETA_EXPORT XiQPoint* ETA(QMenu__mapFrom_r6QPointr5QMenur7QWidgetr6QPoint)(XiQMenu* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QMenu__mapFromGlobal_r6QPointr5QMenur6QPoint)(XiQMenu* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QMenu__mapFromParent_r6QPointr5QMenur6QPoint)(XiQMenu* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QMenu__mapTo_r6QPointr5QMenur7QWidgetr6QPoint)(XiQMenu* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QMenu__mapToGlobal_r6QPointr5QMenur6QPoint)(XiQMenu* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QMenu__mapToParent_r6QPointr5QMenur6QPoint)(XiQMenu* self, XiQPoint* param0);
ETA_EXPORT void ETA(QMenu__setFont_pr5QMenur5QFont)(XiQMenu* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QMenu__font_r5QFontr5QMenu)(XiQMenu* self);
ETA_EXPORT XiQString* ETA(QMenu__styleSheet_r7QStringr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setStyleSheet_pr5QMenur7QString)(XiQMenu* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QMenu__focusPolicy_r11FocusPolicyr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setFocusPolicy_pr5QMenur11FocusPolicy)(XiQMenu* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QMenu__setFocus_pr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__clearFocus_pr5QMenu)(XiQMenu* self);
ETA_EXPORT bool ETA(QMenu__hasFocus_br5QMenu)(XiQMenu* self);
ETA_EXPORT XiQString* ETA(QMenu__toolTip_r7QStringr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setToolTip_pr5QMenur7QString)(XiQMenu* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QMenu__whatsThis_r7QStringr5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setWhatsThis_pr5QMenur7QString)(XiQMenu* self, XiQString* param0);
ETA_EXPORT bool ETA(QMenu__hasMouseTracking_br5QMenu)(XiQMenu* self);
ETA_EXPORT void ETA(QMenu__setMouseTracking_pr5QMenub)(XiQMenu* self, bool param0);
ETA_EXPORT void ETA(QMenu__addAction_pr5QMenur7QAction)(XiQMenu* self, XiQAction* action);
ETA_EXPORT void ETA(QMenu__paintEvent_pr5QMenur11QPaintEvent)(XiQMenu* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QMenu__mousePressEvent_pr5QMenur11QMouseEvent)(XiQMenu* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMenu__mouseReleaseEvent_pr5QMenur11QMouseEvent)(XiQMenu* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMenu__mouseDoubleClickEvent_pr5QMenur11QMouseEvent)(XiQMenu* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMenu__mouseMoveEvent_pr5QMenur11QMouseEvent)(XiQMenu* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMenu__wheelEvent_pr5QMenur11QWheelEvent)(XiQMenu* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QMenu__keyPressEvent_pr5QMenur9QKeyEvent)(XiQMenu* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QMenu__keyReleaseEvent_pr5QMenur9QKeyEvent)(XiQMenu* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QMenu__enterEvent_pr5QMenur6QEvent)(XiQMenu* self, XiQEvent* e);
ETA_EXPORT void ETA(QMenu__leaveEvent_pr5QMenur6QEvent)(XiQMenu* self, XiQEvent* e);
ETA_EXPORT void ETA(QMenu__resizeEvent_pr5QMenur12QResizeEvent)(XiQMenu* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QMenu__closeEvent_pr5QMenur6QEvent)(XiQMenu* self, XiQEvent* e);
ETA_EXPORT void ETA(QMenu__contextMenuEvent_pr5QMenur17QContextMenuEvent)(XiQMenu* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QMenu__showEvent_pr5QMenur6QEvent)(XiQMenu* self, XiQEvent* e);
ETA_EXPORT void ETA(QMenu__hideEvent_pr5QMenur6QEvent)(XiQMenu* self, XiQEvent* e);
ETA_EXPORT void ETA(QMenu__defaultEvent_pr5QMenur6QEvent)(XiQMenu* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QMenu__toPixmap_r7QPixmapr5QMenu)(XiQMenu* self);
ETA_EXPORT XiQWidget* ETA(QMenu__toWidget_r7QWidgetr5QMenu)(XiQMenu* self);

using XiQMenuDerived = XiQMenu_vtable;

ETA_EXPORT XiQMenuDerived* ETA(QMenu__extend_r12QMenuDerived)();
ETA_EXPORT void ETA(QMenu__downcast_pr5QMenur12QMenuDerived)(XiQMenu* self, XiQMenuDerived* derived);

ETA_EXPORT void ETA(QMenu__override__addMenu_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__addSeparator_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__menuAction_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__exec_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__title_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setTitle_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__icon_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setIcon_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__show_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__hide_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__raise_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__lower_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__close_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__isEnabled_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setEnabled_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setLayout_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__isWindowModified_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setWindowModified_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__windowTitle_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setWindowTitle_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__windowIcon_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setWindowIcon_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__isActiveWindow_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__activateWindow_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__isMinimized_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__isMaximized_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__isFullScreen_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__showMinimized_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__showMaximized_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__showFullScreen_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__showNormal_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__update_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__repaint_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setMinimumSize_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__minimumSize_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setMaximumSize_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__maximumSize_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setFixedSize_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__resize_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__adjustSize_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__pos_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__move_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__sizeHint_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__minimumSizeHint_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__mapFrom_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__mapFromGlobal_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__mapFromParent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__mapTo_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__mapToGlobal_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__mapToParent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setFont_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__font_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__styleSheet_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setStyleSheet_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__focusPolicy_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setFocusPolicy_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setFocus_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__clearFocus_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__hasFocus_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__toolTip_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setToolTip_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__whatsThis_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setWhatsThis_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__hasMouseTracking_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__setMouseTracking_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__addAction_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__paintEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__mousePressEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__mouseReleaseEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__mouseDoubleClickEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__mouseMoveEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__wheelEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__keyPressEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__keyReleaseEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__enterEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__leaveEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__resizeEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__closeEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__contextMenuEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__showEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__hideEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__defaultEvent_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__toPixmap_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);
ETA_EXPORT void ETA(QMenu__override__toWidget_pr12QMenuDerivedai)(XiQMenuDerived* derived, void* name);

ETA_EXPORT XiQMenu* ETA(qmenu__alloc_r5QMenu)();

inline QMenu* fromXi(XiQMenu* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQMenu_vtable: public XiQWidget_vtable
{
    void* reserved;
    void (*addMenu)(XiQMenu*, XiQMenu*);
    void (*addSeparator)(XiQMenu*);
    XiQAction* (*menuAction)(XiQMenu*);
    XiQAction* (*exec)(XiQMenu*, XiQPoint*);
    XiQString* (*title)(XiQMenu*);
    void (*setTitle)(XiQMenu*, XiQString*);
    XiQIcon* (*icon)(XiQMenu*);
    void (*setIcon)(XiQMenu*, XiQIcon*);
};

inline XiQMenu_vtable* XiQMenu::vtable() {
    return static_cast<XiQMenu_vtable*>(vptr);
}

extern XiQMenu_vtable ETA(_vt_QMenu);
extern int ETA(_size_QMenu);
ETA_EXPORT void ETA(_init_QMenu)() __attribute__((constructor));


ETA_EXPORT XiQMenu* ETA(qmenu_r5QMenur7QString)(XiQString* title);


struct XiToolButtonStyle_vtable;
struct XiToolButtonStyle: public Xiobj
{
    XiToolButtonStyle_vtable* vtable();
    XiToolButtonStyle();
    ToolButtonStyle value;
    ToolButtonStyle* impl() {
        if (!initialized) 
            new (this) XiToolButtonStyle();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiToolButtonStyle* me = static_cast<XiToolButtonStyle*>(mePtr);
        if (me->initialized)
            me->~XiToolButtonStyle();
    }

};

ETA_EXPORT XiToolButtonStyle* ETA(ToolButtonIconOnly_r15ToolButtonStyle)();
ETA_EXPORT XiToolButtonStyle* ETA(ToolButtonTextOnly_r15ToolButtonStyle)();
ETA_EXPORT XiToolButtonStyle* ETA(ToolButtonTextBesideIcon_r15ToolButtonStyle)();
ETA_EXPORT XiToolButtonStyle* ETA(ToolButtonTextUnderIcon_r15ToolButtonStyle)();

using XiToolButtonStyleDerived = XiToolButtonStyle_vtable;

ETA_EXPORT XiToolButtonStyleDerived* ETA(ToolButtonStyle__extend_r22ToolButtonStyleDerived)();
ETA_EXPORT void ETA(ToolButtonStyle__downcast_pr15ToolButtonStyler22ToolButtonStyleDerived)(XiToolButtonStyle* self, XiToolButtonStyleDerived* derived);


ETA_EXPORT XiToolButtonStyle* ETA(toolbuttonstyle__alloc_r15ToolButtonStyle)();

inline XiToolButtonStyle* toXi(const ToolButtonStyle& orig) {
    if (orig == ToolButtonIconOnly)
        return ETA(ToolButtonIconOnly_r15ToolButtonStyle)();
    if (orig == ToolButtonTextOnly)
        return ETA(ToolButtonTextOnly_r15ToolButtonStyle)();
    if (orig == ToolButtonTextBesideIcon)
        return ETA(ToolButtonTextBesideIcon_r15ToolButtonStyle)();
    if (orig == ToolButtonTextUnderIcon)
        return ETA(ToolButtonTextUnderIcon_r15ToolButtonStyle)();
    XiToolButtonStyle* r = gcNew<XiToolButtonStyle>();
    r->value = orig;
    return r;
}

inline ToolButtonStyle fromXi(XiToolButtonStyle* wrapped) {
    return *wrapped->impl();
}

struct XiToolButtonStyle_vtable: public Xivtable
{
    void* reserved;
};

inline XiToolButtonStyle_vtable* XiToolButtonStyle::vtable() {
    return static_cast<XiToolButtonStyle_vtable*>(vptr);
}

extern XiToolButtonStyle_vtable ETA(_vt_ToolButtonStyle);
extern int ETA(_size_ToolButtonStyle);
ETA_EXPORT void ETA(_init_ToolButtonStyle)() __attribute__((constructor));




struct XiQToolBar_vtable;
struct XiQToolBar: public XiQWidget
{
    XiQToolBar_vtable* vtable();
    XiQToolBar();
    QToolBar* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QToolBar wrappedType;
    QToolBar* getImpl() {
        return static_cast<QToolBar*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QToolBar>());
    }
    static void addAction(XiQWidget* __thisPtr, XiQAction* a);
    static void addSeparator(XiQToolBar* __thisPtr);
    static XiToolButtonStyle* toolButtonStyle(XiQToolBar* __thisPtr);
    static void setToolButtonStyle(XiQToolBar* __thisPtr, XiToolButtonStyle* param0);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
};

ETA_EXPORT XiQWidget* ETA(QToolBar__to__QWidget_r7QWidgetr8QToolBar)(XiQToolBar* self);
ETA_EXPORT XiQPaintDevice* ETA(QToolBar__to__QPaintDevice_r12QPaintDevicer8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__addSeparator_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT XiToolButtonStyle* ETA(QToolBar__toolButtonStyle_r15ToolButtonStyler8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setToolButtonStyle_pr8QToolBarr15ToolButtonStyle)(XiQToolBar* self, XiToolButtonStyle* param0);
ETA_EXPORT void ETA(QToolBar__show_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__hide_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__raise_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__lower_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__close_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT bool ETA(QToolBar__isEnabled_br8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setEnabled_pr8QToolBarb)(XiQToolBar* self, bool param0);
ETA_EXPORT void ETA(QToolBar__setLayout_pr8QToolBarr7QLayout)(XiQToolBar* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QToolBar__isWindowModified_br8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setWindowModified_pr8QToolBarb)(XiQToolBar* self, bool param0);
ETA_EXPORT XiQString* ETA(QToolBar__windowTitle_r7QStringr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setWindowTitle_pr8QToolBarr7QString)(XiQToolBar* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QToolBar__windowIcon_r5QIconr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setWindowIcon_pr8QToolBarr5QIcon)(XiQToolBar* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QToolBar__isActiveWindow_br8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__activateWindow_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT bool ETA(QToolBar__isMinimized_br8QToolBar)(XiQToolBar* self);
ETA_EXPORT bool ETA(QToolBar__isMaximized_br8QToolBar)(XiQToolBar* self);
ETA_EXPORT bool ETA(QToolBar__isFullScreen_br8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__showMinimized_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__showMaximized_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__showFullScreen_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__showNormal_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__update_pr8QToolBarr5QRect)(XiQToolBar* self, XiQRect* r);
ETA_EXPORT void ETA(QToolBar__repaint_pr8QToolBarr5QRect)(XiQToolBar* self, XiQRect* r);
ETA_EXPORT void ETA(QToolBar__setMinimumSize_pr8QToolBarr5QSize)(XiQToolBar* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QToolBar__minimumSize_r5QSizer8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setMaximumSize_pr8QToolBarr5QSize)(XiQToolBar* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QToolBar__maximumSize_r5QSizer8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setFixedSize_pr8QToolBarr5QSize)(XiQToolBar* self, XiQSize* param0);
ETA_EXPORT void ETA(QToolBar__resize_pr8QToolBarr5QSize)(XiQToolBar* self, XiQSize* s);
ETA_EXPORT void ETA(QToolBar__adjustSize_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT XiQPoint* ETA(QToolBar__pos_r6QPointr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__move_pr8QToolBarr6QPoint)(XiQToolBar* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QToolBar__sizeHint_r5QSizer8QToolBar)(XiQToolBar* self);
ETA_EXPORT XiQSize* ETA(QToolBar__minimumSizeHint_r5QSizer8QToolBar)(XiQToolBar* self);
ETA_EXPORT XiQPoint* ETA(QToolBar__mapFrom_r6QPointr8QToolBarr7QWidgetr6QPoint)(XiQToolBar* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QToolBar__mapFromGlobal_r6QPointr8QToolBarr6QPoint)(XiQToolBar* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QToolBar__mapFromParent_r6QPointr8QToolBarr6QPoint)(XiQToolBar* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QToolBar__mapTo_r6QPointr8QToolBarr7QWidgetr6QPoint)(XiQToolBar* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QToolBar__mapToGlobal_r6QPointr8QToolBarr6QPoint)(XiQToolBar* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QToolBar__mapToParent_r6QPointr8QToolBarr6QPoint)(XiQToolBar* self, XiQPoint* param0);
ETA_EXPORT void ETA(QToolBar__setFont_pr8QToolBarr5QFont)(XiQToolBar* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QToolBar__font_r5QFontr8QToolBar)(XiQToolBar* self);
ETA_EXPORT XiQString* ETA(QToolBar__styleSheet_r7QStringr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setStyleSheet_pr8QToolBarr7QString)(XiQToolBar* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QToolBar__focusPolicy_r11FocusPolicyr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setFocusPolicy_pr8QToolBarr11FocusPolicy)(XiQToolBar* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QToolBar__setFocus_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__clearFocus_pr8QToolBar)(XiQToolBar* self);
ETA_EXPORT bool ETA(QToolBar__hasFocus_br8QToolBar)(XiQToolBar* self);
ETA_EXPORT XiQString* ETA(QToolBar__toolTip_r7QStringr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setToolTip_pr8QToolBarr7QString)(XiQToolBar* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QToolBar__whatsThis_r7QStringr8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setWhatsThis_pr8QToolBarr7QString)(XiQToolBar* self, XiQString* param0);
ETA_EXPORT bool ETA(QToolBar__hasMouseTracking_br8QToolBar)(XiQToolBar* self);
ETA_EXPORT void ETA(QToolBar__setMouseTracking_pr8QToolBarb)(XiQToolBar* self, bool param0);
ETA_EXPORT void ETA(QToolBar__addAction_pr8QToolBarr7QAction)(XiQToolBar* self, XiQAction* action);
ETA_EXPORT void ETA(QToolBar__paintEvent_pr8QToolBarr11QPaintEvent)(XiQToolBar* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QToolBar__mousePressEvent_pr8QToolBarr11QMouseEvent)(XiQToolBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QToolBar__mouseReleaseEvent_pr8QToolBarr11QMouseEvent)(XiQToolBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QToolBar__mouseDoubleClickEvent_pr8QToolBarr11QMouseEvent)(XiQToolBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QToolBar__mouseMoveEvent_pr8QToolBarr11QMouseEvent)(XiQToolBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QToolBar__wheelEvent_pr8QToolBarr11QWheelEvent)(XiQToolBar* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QToolBar__keyPressEvent_pr8QToolBarr9QKeyEvent)(XiQToolBar* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QToolBar__keyReleaseEvent_pr8QToolBarr9QKeyEvent)(XiQToolBar* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QToolBar__enterEvent_pr8QToolBarr6QEvent)(XiQToolBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QToolBar__leaveEvent_pr8QToolBarr6QEvent)(XiQToolBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QToolBar__resizeEvent_pr8QToolBarr12QResizeEvent)(XiQToolBar* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QToolBar__closeEvent_pr8QToolBarr6QEvent)(XiQToolBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QToolBar__contextMenuEvent_pr8QToolBarr17QContextMenuEvent)(XiQToolBar* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QToolBar__showEvent_pr8QToolBarr6QEvent)(XiQToolBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QToolBar__hideEvent_pr8QToolBarr6QEvent)(XiQToolBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QToolBar__defaultEvent_pr8QToolBarr6QEvent)(XiQToolBar* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QToolBar__toPixmap_r7QPixmapr8QToolBar)(XiQToolBar* self);
ETA_EXPORT XiQWidget* ETA(QToolBar__toWidget_r7QWidgetr8QToolBar)(XiQToolBar* self);

using XiQToolBarDerived = XiQToolBar_vtable;

ETA_EXPORT XiQToolBarDerived* ETA(QToolBar__extend_r15QToolBarDerived)();
ETA_EXPORT void ETA(QToolBar__downcast_pr8QToolBarr15QToolBarDerived)(XiQToolBar* self, XiQToolBarDerived* derived);

ETA_EXPORT void ETA(QToolBar__override__addSeparator_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__toolButtonStyle_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setToolButtonStyle_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__show_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__hide_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__raise_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__lower_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__close_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__isEnabled_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setEnabled_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setLayout_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__isWindowModified_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setWindowModified_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__windowTitle_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setWindowTitle_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__windowIcon_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setWindowIcon_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__isActiveWindow_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__activateWindow_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__isMinimized_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__isMaximized_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__isFullScreen_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__showMinimized_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__showMaximized_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__showFullScreen_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__showNormal_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__update_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__repaint_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setMinimumSize_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__minimumSize_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setMaximumSize_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__maximumSize_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setFixedSize_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__resize_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__adjustSize_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__pos_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__move_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__sizeHint_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__minimumSizeHint_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__mapFrom_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__mapFromGlobal_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__mapFromParent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__mapTo_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__mapToGlobal_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__mapToParent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setFont_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__font_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__styleSheet_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setStyleSheet_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__focusPolicy_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setFocusPolicy_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setFocus_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__clearFocus_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__hasFocus_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__toolTip_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setToolTip_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__whatsThis_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setWhatsThis_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__hasMouseTracking_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__setMouseTracking_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__addAction_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__paintEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__mousePressEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__mouseReleaseEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__mouseDoubleClickEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__mouseMoveEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__wheelEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__keyPressEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__keyReleaseEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__enterEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__leaveEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__resizeEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__closeEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__contextMenuEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__showEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__hideEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__defaultEvent_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__toPixmap_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);
ETA_EXPORT void ETA(QToolBar__override__toWidget_pr15QToolBarDerivedai)(XiQToolBarDerived* derived, void* name);

ETA_EXPORT XiQToolBar* ETA(qtoolbar__alloc_r8QToolBar)();

inline QToolBar* fromXi(XiQToolBar* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQToolBar_vtable: public XiQWidget_vtable
{
    void* reserved;
    void (*addSeparator)(XiQToolBar*);
    XiToolButtonStyle* (*toolButtonStyle)(XiQToolBar*);
    void (*setToolButtonStyle)(XiQToolBar*, XiToolButtonStyle*);
};

inline XiQToolBar_vtable* XiQToolBar::vtable() {
    return static_cast<XiQToolBar_vtable*>(vptr);
}

extern XiQToolBar_vtable ETA(_vt_QToolBar);
extern int ETA(_size_QToolBar);
ETA_EXPORT void ETA(_init_QToolBar)() __attribute__((constructor));


ETA_EXPORT XiQToolBar* ETA(qtoolbar_r8QToolBar)();


struct XiQMenuBar_vtable;
struct XiQMenuBar: public XiQWidget
{
    XiQMenuBar_vtable* vtable();
    XiQMenuBar();
    QMenuBar* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QMenuBar wrappedType;
    QMenuBar* getImpl() {
        return static_cast<QMenuBar*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<QMenuBar>());
    }
    static void addMenu(XiQMenuBar* __thisPtr, XiQMenu* m);
    static void addSeparator(XiQMenuBar* __thisPtr);
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
};

ETA_EXPORT XiQWidget* ETA(QMenuBar__to__QWidget_r7QWidgetr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT XiQPaintDevice* ETA(QMenuBar__to__QPaintDevice_r12QPaintDevicer8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__addMenu_pr8QMenuBarr5QMenu)(XiQMenuBar* self, XiQMenu* m);
ETA_EXPORT void ETA(QMenuBar__addSeparator_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__show_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__hide_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__raise_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__lower_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__close_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT bool ETA(QMenuBar__isEnabled_br8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__setEnabled_pr8QMenuBarb)(XiQMenuBar* self, bool param0);
ETA_EXPORT void ETA(QMenuBar__setLayout_pr8QMenuBarr7QLayout)(XiQMenuBar* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QMenuBar__isWindowModified_br8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__setWindowModified_pr8QMenuBarb)(XiQMenuBar* self, bool param0);
ETA_EXPORT XiQString* ETA(QMenuBar__windowTitle_r7QStringr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__setWindowTitle_pr8QMenuBarr7QString)(XiQMenuBar* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QMenuBar__windowIcon_r5QIconr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__setWindowIcon_pr8QMenuBarr5QIcon)(XiQMenuBar* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QMenuBar__isActiveWindow_br8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__activateWindow_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT bool ETA(QMenuBar__isMinimized_br8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT bool ETA(QMenuBar__isMaximized_br8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT bool ETA(QMenuBar__isFullScreen_br8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__showMinimized_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__showMaximized_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__showFullScreen_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__showNormal_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__update_pr8QMenuBarr5QRect)(XiQMenuBar* self, XiQRect* r);
ETA_EXPORT void ETA(QMenuBar__repaint_pr8QMenuBarr5QRect)(XiQMenuBar* self, XiQRect* r);
ETA_EXPORT void ETA(QMenuBar__setMinimumSize_pr8QMenuBarr5QSize)(XiQMenuBar* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QMenuBar__minimumSize_r5QSizer8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__setMaximumSize_pr8QMenuBarr5QSize)(XiQMenuBar* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QMenuBar__maximumSize_r5QSizer8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__setFixedSize_pr8QMenuBarr5QSize)(XiQMenuBar* self, XiQSize* param0);
ETA_EXPORT void ETA(QMenuBar__resize_pr8QMenuBarr5QSize)(XiQMenuBar* self, XiQSize* s);
ETA_EXPORT void ETA(QMenuBar__adjustSize_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT XiQPoint* ETA(QMenuBar__pos_r6QPointr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__move_pr8QMenuBarr6QPoint)(XiQMenuBar* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QMenuBar__sizeHint_r5QSizer8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT XiQSize* ETA(QMenuBar__minimumSizeHint_r5QSizer8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT XiQPoint* ETA(QMenuBar__mapFrom_r6QPointr8QMenuBarr7QWidgetr6QPoint)(XiQMenuBar* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QMenuBar__mapFromGlobal_r6QPointr8QMenuBarr6QPoint)(XiQMenuBar* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QMenuBar__mapFromParent_r6QPointr8QMenuBarr6QPoint)(XiQMenuBar* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QMenuBar__mapTo_r6QPointr8QMenuBarr7QWidgetr6QPoint)(XiQMenuBar* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QMenuBar__mapToGlobal_r6QPointr8QMenuBarr6QPoint)(XiQMenuBar* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QMenuBar__mapToParent_r6QPointr8QMenuBarr6QPoint)(XiQMenuBar* self, XiQPoint* param0);
ETA_EXPORT void ETA(QMenuBar__setFont_pr8QMenuBarr5QFont)(XiQMenuBar* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QMenuBar__font_r5QFontr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT XiQString* ETA(QMenuBar__styleSheet_r7QStringr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__setStyleSheet_pr8QMenuBarr7QString)(XiQMenuBar* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QMenuBar__focusPolicy_r11FocusPolicyr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__setFocusPolicy_pr8QMenuBarr11FocusPolicy)(XiQMenuBar* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QMenuBar__setFocus_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__clearFocus_pr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT bool ETA(QMenuBar__hasFocus_br8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT XiQString* ETA(QMenuBar__toolTip_r7QStringr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__setToolTip_pr8QMenuBarr7QString)(XiQMenuBar* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QMenuBar__whatsThis_r7QStringr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__setWhatsThis_pr8QMenuBarr7QString)(XiQMenuBar* self, XiQString* param0);
ETA_EXPORT bool ETA(QMenuBar__hasMouseTracking_br8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT void ETA(QMenuBar__setMouseTracking_pr8QMenuBarb)(XiQMenuBar* self, bool param0);
ETA_EXPORT void ETA(QMenuBar__addAction_pr8QMenuBarr7QAction)(XiQMenuBar* self, XiQAction* action);
ETA_EXPORT void ETA(QMenuBar__paintEvent_pr8QMenuBarr11QPaintEvent)(XiQMenuBar* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QMenuBar__mousePressEvent_pr8QMenuBarr11QMouseEvent)(XiQMenuBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMenuBar__mouseReleaseEvent_pr8QMenuBarr11QMouseEvent)(XiQMenuBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMenuBar__mouseDoubleClickEvent_pr8QMenuBarr11QMouseEvent)(XiQMenuBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMenuBar__mouseMoveEvent_pr8QMenuBarr11QMouseEvent)(XiQMenuBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMenuBar__wheelEvent_pr8QMenuBarr11QWheelEvent)(XiQMenuBar* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QMenuBar__keyPressEvent_pr8QMenuBarr9QKeyEvent)(XiQMenuBar* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QMenuBar__keyReleaseEvent_pr8QMenuBarr9QKeyEvent)(XiQMenuBar* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QMenuBar__enterEvent_pr8QMenuBarr6QEvent)(XiQMenuBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QMenuBar__leaveEvent_pr8QMenuBarr6QEvent)(XiQMenuBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QMenuBar__resizeEvent_pr8QMenuBarr12QResizeEvent)(XiQMenuBar* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QMenuBar__closeEvent_pr8QMenuBarr6QEvent)(XiQMenuBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QMenuBar__contextMenuEvent_pr8QMenuBarr17QContextMenuEvent)(XiQMenuBar* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QMenuBar__showEvent_pr8QMenuBarr6QEvent)(XiQMenuBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QMenuBar__hideEvent_pr8QMenuBarr6QEvent)(XiQMenuBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QMenuBar__defaultEvent_pr8QMenuBarr6QEvent)(XiQMenuBar* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QMenuBar__toPixmap_r7QPixmapr8QMenuBar)(XiQMenuBar* self);
ETA_EXPORT XiQWidget* ETA(QMenuBar__toWidget_r7QWidgetr8QMenuBar)(XiQMenuBar* self);

using XiQMenuBarDerived = XiQMenuBar_vtable;

ETA_EXPORT XiQMenuBarDerived* ETA(QMenuBar__extend_r15QMenuBarDerived)();
ETA_EXPORT void ETA(QMenuBar__downcast_pr8QMenuBarr15QMenuBarDerived)(XiQMenuBar* self, XiQMenuBarDerived* derived);

ETA_EXPORT void ETA(QMenuBar__override__addMenu_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__addSeparator_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__show_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__hide_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__raise_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__lower_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__close_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__isEnabled_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setEnabled_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setLayout_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__isWindowModified_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setWindowModified_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__windowTitle_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setWindowTitle_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__windowIcon_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setWindowIcon_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__isActiveWindow_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__activateWindow_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__isMinimized_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__isMaximized_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__isFullScreen_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__showMinimized_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__showMaximized_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__showFullScreen_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__showNormal_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__update_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__repaint_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setMinimumSize_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__minimumSize_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setMaximumSize_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__maximumSize_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setFixedSize_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__resize_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__adjustSize_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__pos_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__move_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__sizeHint_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__minimumSizeHint_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__mapFrom_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__mapFromGlobal_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__mapFromParent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__mapTo_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__mapToGlobal_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__mapToParent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setFont_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__font_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__styleSheet_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setStyleSheet_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__focusPolicy_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setFocusPolicy_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setFocus_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__clearFocus_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__hasFocus_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__toolTip_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setToolTip_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__whatsThis_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setWhatsThis_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__hasMouseTracking_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__setMouseTracking_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__addAction_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__paintEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__mousePressEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__mouseReleaseEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__mouseDoubleClickEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__mouseMoveEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__wheelEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__keyPressEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__keyReleaseEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__enterEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__leaveEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__resizeEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__closeEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__contextMenuEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__showEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__hideEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__defaultEvent_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__toPixmap_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);
ETA_EXPORT void ETA(QMenuBar__override__toWidget_pr15QMenuBarDerivedai)(XiQMenuBarDerived* derived, void* name);

ETA_EXPORT XiQMenuBar* ETA(qmenubar__alloc_r8QMenuBar)();

inline QMenuBar* fromXi(XiQMenuBar* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQMenuBar_vtable: public XiQWidget_vtable
{
    void* reserved;
    void (*addMenu)(XiQMenuBar*, XiQMenu*);
    void (*addSeparator)(XiQMenuBar*);
};

inline XiQMenuBar_vtable* XiQMenuBar::vtable() {
    return static_cast<XiQMenuBar_vtable*>(vptr);
}

extern XiQMenuBar_vtable ETA(_vt_QMenuBar);
extern int ETA(_size_QMenuBar);
ETA_EXPORT void ETA(_init_QMenuBar)() __attribute__((constructor));




struct XiQLabel_vtable;
struct XiQLabel: public XiQWidget
{
    XiQLabel_vtable* vtable();
    XiQLabel();
    QLabel* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QLabel wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static int margin(XiQLabel* __thisPtr);
    static void setMargin(XiQLabel* __thisPtr, int param0);
    static int indent(XiQLabel* __thisPtr);
    static void setIndent(XiQLabel* __thisPtr, int param0);
    static void setBuddy(XiQLabel* __thisPtr, XiQWidget* buddy);
    static XiQString* text(XiQLabel* __thisPtr);
    static void setText(XiQLabel* __thisPtr, XiQString* param0);
    static bool wordWrap(XiQLabel* __thisPtr);
    static void setWordWrap(XiQLabel* __thisPtr, bool param0);
    static void setPixmap(XiQLabel* __thisPtr, XiQPixmap* p);
    static XiQPixmap* pixmap(XiQLabel* __thisPtr);
    static bool hasScaledContents(XiQLabel* __thisPtr);
    static void setScaledContents(XiQLabel* __thisPtr, bool param0);
    static bool openExternalLinks(XiQLabel* __thisPtr);
    static void setOpenExternalLinks(XiQLabel* __thisPtr, bool param0);
};

ETA_EXPORT XiQWidget* ETA(QLabel__to__QWidget_r7QWidgetr6QLabel)(XiQLabel* self);
ETA_EXPORT XiQPaintDevice* ETA(QLabel__to__QPaintDevice_r12QPaintDevicer6QLabel)(XiQLabel* self);
ETA_EXPORT int ETA(QLabel__margin_ir6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setMargin_pr6QLabeli)(XiQLabel* self, int param0);
ETA_EXPORT int ETA(QLabel__indent_ir6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setIndent_pr6QLabeli)(XiQLabel* self, int param0);
ETA_EXPORT void ETA(QLabel__setBuddy_pr6QLabelr7QWidget)(XiQLabel* self, XiQWidget* buddy);
ETA_EXPORT XiQString* ETA(QLabel__text_r7QStringr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setText_pr6QLabelr7QString)(XiQLabel* self, XiQString* param0);
ETA_EXPORT bool ETA(QLabel__wordWrap_br6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setWordWrap_pr6QLabelb)(XiQLabel* self, bool param0);
ETA_EXPORT void ETA(QLabel__setPixmap_pr6QLabelr7QPixmap)(XiQLabel* self, XiQPixmap* p);
ETA_EXPORT XiQPixmap* ETA(QLabel__pixmap_r7QPixmapr6QLabel)(XiQLabel* self);
ETA_EXPORT bool ETA(QLabel__hasScaledContents_br6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setScaledContents_pr6QLabelb)(XiQLabel* self, bool param0);
ETA_EXPORT bool ETA(QLabel__openExternalLinks_br6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setOpenExternalLinks_pr6QLabelb)(XiQLabel* self, bool param0);
ETA_EXPORT void ETA(QLabel__show_pr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__hide_pr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__raise_pr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__lower_pr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__close_pr6QLabel)(XiQLabel* self);
ETA_EXPORT bool ETA(QLabel__isEnabled_br6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setEnabled_pr6QLabelb)(XiQLabel* self, bool param0);
ETA_EXPORT void ETA(QLabel__setLayout_pr6QLabelr7QLayout)(XiQLabel* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QLabel__isWindowModified_br6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setWindowModified_pr6QLabelb)(XiQLabel* self, bool param0);
ETA_EXPORT XiQString* ETA(QLabel__windowTitle_r7QStringr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setWindowTitle_pr6QLabelr7QString)(XiQLabel* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QLabel__windowIcon_r5QIconr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setWindowIcon_pr6QLabelr5QIcon)(XiQLabel* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QLabel__isActiveWindow_br6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__activateWindow_pr6QLabel)(XiQLabel* self);
ETA_EXPORT bool ETA(QLabel__isMinimized_br6QLabel)(XiQLabel* self);
ETA_EXPORT bool ETA(QLabel__isMaximized_br6QLabel)(XiQLabel* self);
ETA_EXPORT bool ETA(QLabel__isFullScreen_br6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__showMinimized_pr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__showMaximized_pr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__showFullScreen_pr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__showNormal_pr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__update_pr6QLabelr5QRect)(XiQLabel* self, XiQRect* r);
ETA_EXPORT void ETA(QLabel__repaint_pr6QLabelr5QRect)(XiQLabel* self, XiQRect* r);
ETA_EXPORT void ETA(QLabel__setMinimumSize_pr6QLabelr5QSize)(XiQLabel* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QLabel__minimumSize_r5QSizer6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setMaximumSize_pr6QLabelr5QSize)(XiQLabel* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QLabel__maximumSize_r5QSizer6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setFixedSize_pr6QLabelr5QSize)(XiQLabel* self, XiQSize* param0);
ETA_EXPORT void ETA(QLabel__resize_pr6QLabelr5QSize)(XiQLabel* self, XiQSize* s);
ETA_EXPORT void ETA(QLabel__adjustSize_pr6QLabel)(XiQLabel* self);
ETA_EXPORT XiQPoint* ETA(QLabel__pos_r6QPointr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__move_pr6QLabelr6QPoint)(XiQLabel* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QLabel__sizeHint_r5QSizer6QLabel)(XiQLabel* self);
ETA_EXPORT XiQSize* ETA(QLabel__minimumSizeHint_r5QSizer6QLabel)(XiQLabel* self);
ETA_EXPORT XiQPoint* ETA(QLabel__mapFrom_r6QPointr6QLabelr7QWidgetr6QPoint)(XiQLabel* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QLabel__mapFromGlobal_r6QPointr6QLabelr6QPoint)(XiQLabel* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QLabel__mapFromParent_r6QPointr6QLabelr6QPoint)(XiQLabel* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QLabel__mapTo_r6QPointr6QLabelr7QWidgetr6QPoint)(XiQLabel* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QLabel__mapToGlobal_r6QPointr6QLabelr6QPoint)(XiQLabel* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QLabel__mapToParent_r6QPointr6QLabelr6QPoint)(XiQLabel* self, XiQPoint* param0);
ETA_EXPORT void ETA(QLabel__setFont_pr6QLabelr5QFont)(XiQLabel* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QLabel__font_r5QFontr6QLabel)(XiQLabel* self);
ETA_EXPORT XiQString* ETA(QLabel__styleSheet_r7QStringr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setStyleSheet_pr6QLabelr7QString)(XiQLabel* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QLabel__focusPolicy_r11FocusPolicyr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setFocusPolicy_pr6QLabelr11FocusPolicy)(XiQLabel* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QLabel__setFocus_pr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__clearFocus_pr6QLabel)(XiQLabel* self);
ETA_EXPORT bool ETA(QLabel__hasFocus_br6QLabel)(XiQLabel* self);
ETA_EXPORT XiQString* ETA(QLabel__toolTip_r7QStringr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setToolTip_pr6QLabelr7QString)(XiQLabel* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QLabel__whatsThis_r7QStringr6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setWhatsThis_pr6QLabelr7QString)(XiQLabel* self, XiQString* param0);
ETA_EXPORT bool ETA(QLabel__hasMouseTracking_br6QLabel)(XiQLabel* self);
ETA_EXPORT void ETA(QLabel__setMouseTracking_pr6QLabelb)(XiQLabel* self, bool param0);
ETA_EXPORT void ETA(QLabel__addAction_pr6QLabelr7QAction)(XiQLabel* self, XiQAction* action);
ETA_EXPORT void ETA(QLabel__paintEvent_pr6QLabelr11QPaintEvent)(XiQLabel* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QLabel__mousePressEvent_pr6QLabelr11QMouseEvent)(XiQLabel* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QLabel__mouseReleaseEvent_pr6QLabelr11QMouseEvent)(XiQLabel* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QLabel__mouseDoubleClickEvent_pr6QLabelr11QMouseEvent)(XiQLabel* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QLabel__mouseMoveEvent_pr6QLabelr11QMouseEvent)(XiQLabel* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QLabel__wheelEvent_pr6QLabelr11QWheelEvent)(XiQLabel* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QLabel__keyPressEvent_pr6QLabelr9QKeyEvent)(XiQLabel* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QLabel__keyReleaseEvent_pr6QLabelr9QKeyEvent)(XiQLabel* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QLabel__enterEvent_pr6QLabelr6QEvent)(XiQLabel* self, XiQEvent* e);
ETA_EXPORT void ETA(QLabel__leaveEvent_pr6QLabelr6QEvent)(XiQLabel* self, XiQEvent* e);
ETA_EXPORT void ETA(QLabel__resizeEvent_pr6QLabelr12QResizeEvent)(XiQLabel* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QLabel__closeEvent_pr6QLabelr6QEvent)(XiQLabel* self, XiQEvent* e);
ETA_EXPORT void ETA(QLabel__contextMenuEvent_pr6QLabelr17QContextMenuEvent)(XiQLabel* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QLabel__showEvent_pr6QLabelr6QEvent)(XiQLabel* self, XiQEvent* e);
ETA_EXPORT void ETA(QLabel__hideEvent_pr6QLabelr6QEvent)(XiQLabel* self, XiQEvent* e);
ETA_EXPORT void ETA(QLabel__defaultEvent_pr6QLabelr6QEvent)(XiQLabel* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QLabel__toPixmap_r7QPixmapr6QLabel)(XiQLabel* self);
ETA_EXPORT XiQWidget* ETA(QLabel__toWidget_r7QWidgetr6QLabel)(XiQLabel* self);

using XiQLabelDerived = XiQLabel_vtable;

ETA_EXPORT XiQLabelDerived* ETA(QLabel__extend_r13QLabelDerived)();
ETA_EXPORT void ETA(QLabel__downcast_pr6QLabelr13QLabelDerived)(XiQLabel* self, XiQLabelDerived* derived);

ETA_EXPORT void ETA(QLabel__override__margin_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setMargin_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__indent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setIndent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setBuddy_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__text_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setText_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__wordWrap_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setWordWrap_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setPixmap_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__pixmap_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__hasScaledContents_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setScaledContents_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__openExternalLinks_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setOpenExternalLinks_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__show_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__hide_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__raise_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__lower_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__close_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__isEnabled_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setEnabled_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setLayout_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__isWindowModified_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setWindowModified_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__windowTitle_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setWindowTitle_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__windowIcon_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setWindowIcon_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__isActiveWindow_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__activateWindow_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__isMinimized_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__isMaximized_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__isFullScreen_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__showMinimized_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__showMaximized_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__showFullScreen_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__showNormal_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__update_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__repaint_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setMinimumSize_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__minimumSize_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setMaximumSize_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__maximumSize_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setFixedSize_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__resize_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__adjustSize_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__pos_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__move_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__sizeHint_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__minimumSizeHint_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__mapFrom_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__mapFromGlobal_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__mapFromParent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__mapTo_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__mapToGlobal_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__mapToParent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setFont_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__font_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__styleSheet_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setStyleSheet_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__focusPolicy_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setFocusPolicy_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setFocus_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__clearFocus_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__hasFocus_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__toolTip_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setToolTip_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__whatsThis_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setWhatsThis_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__hasMouseTracking_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__setMouseTracking_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__addAction_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__paintEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__mousePressEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__mouseReleaseEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__mouseDoubleClickEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__mouseMoveEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__wheelEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__keyPressEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__keyReleaseEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__enterEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__leaveEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__resizeEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__closeEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__contextMenuEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__showEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__hideEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__defaultEvent_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__toPixmap_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);
ETA_EXPORT void ETA(QLabel__override__toWidget_pr13QLabelDerivedai)(XiQLabelDerived* derived, void* name);

ETA_EXPORT XiQLabel* ETA(qlabel__alloc_r6QLabel)();

inline QLabel* fromXi(XiQLabel* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQLabel_vtable: public XiQWidget_vtable
{
    void* reserved;
    int (*margin)(XiQLabel*);
    void (*setMargin)(XiQLabel*, int);
    int (*indent)(XiQLabel*);
    void (*setIndent)(XiQLabel*, int);
    void (*setBuddy)(XiQLabel*, XiQWidget*);
    XiQString* (*text)(XiQLabel*);
    void (*setText)(XiQLabel*, XiQString*);
    bool (*wordWrap)(XiQLabel*);
    void (*setWordWrap)(XiQLabel*, bool);
    void (*setPixmap)(XiQLabel*, XiQPixmap*);
    XiQPixmap* (*pixmap)(XiQLabel*);
    bool (*hasScaledContents)(XiQLabel*);
    void (*setScaledContents)(XiQLabel*, bool);
    bool (*openExternalLinks)(XiQLabel*);
    void (*setOpenExternalLinks)(XiQLabel*, bool);
};

inline XiQLabel_vtable* XiQLabel::vtable() {
    return static_cast<XiQLabel_vtable*>(vptr);
}

extern XiQLabel_vtable ETA(_vt_QLabel);
extern int ETA(_size_QLabel);
ETA_EXPORT void ETA(_init_QLabel)() __attribute__((constructor));


ETA_EXPORT XiQLabel* ETA(qlabel_r6QLabelr7QString)(XiQString* text);
ETA_EXPORT XiQLabel* ETA(qlabelPixmap_r6QLabelr7QPixmap)(XiQPixmap* p);


struct XiQMainWindow_vtable;
struct XiQMainWindow: public XiQWidget
{
    XiQMainWindow_vtable* vtable();
    XiQMainWindow();
    QMainWindow* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QMainWindow wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static void addToolBar(XiQMainWindow* __thisPtr, XiQToolBar* t);
    static XiQMenuBar* menuBar(XiQMainWindow* __thisPtr);
    static void setCentralWidget(XiQMainWindow* __thisPtr, XiQWidget* w);
};

ETA_EXPORT XiQWidget* ETA(QMainWindow__to__QWidget_r7QWidgetr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT XiQPaintDevice* ETA(QMainWindow__to__QPaintDevice_r12QPaintDevicer11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__addToolBar_pr11QMainWindowr8QToolBar)(XiQMainWindow* self, XiQToolBar* t);
ETA_EXPORT XiQMenuBar* ETA(QMainWindow__menuBar_r8QMenuBarr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setCentralWidget_pr11QMainWindowr7QWidget)(XiQMainWindow* self, XiQWidget* w);
ETA_EXPORT void ETA(QMainWindow__show_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__hide_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__raise_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__lower_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__close_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT bool ETA(QMainWindow__isEnabled_br11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setEnabled_pr11QMainWindowb)(XiQMainWindow* self, bool param0);
ETA_EXPORT void ETA(QMainWindow__setLayout_pr11QMainWindowr7QLayout)(XiQMainWindow* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QMainWindow__isWindowModified_br11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setWindowModified_pr11QMainWindowb)(XiQMainWindow* self, bool param0);
ETA_EXPORT XiQString* ETA(QMainWindow__windowTitle_r7QStringr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setWindowTitle_pr11QMainWindowr7QString)(XiQMainWindow* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QMainWindow__windowIcon_r5QIconr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setWindowIcon_pr11QMainWindowr5QIcon)(XiQMainWindow* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QMainWindow__isActiveWindow_br11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__activateWindow_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT bool ETA(QMainWindow__isMinimized_br11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT bool ETA(QMainWindow__isMaximized_br11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT bool ETA(QMainWindow__isFullScreen_br11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__showMinimized_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__showMaximized_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__showFullScreen_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__showNormal_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__update_pr11QMainWindowr5QRect)(XiQMainWindow* self, XiQRect* r);
ETA_EXPORT void ETA(QMainWindow__repaint_pr11QMainWindowr5QRect)(XiQMainWindow* self, XiQRect* r);
ETA_EXPORT void ETA(QMainWindow__setMinimumSize_pr11QMainWindowr5QSize)(XiQMainWindow* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QMainWindow__minimumSize_r5QSizer11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setMaximumSize_pr11QMainWindowr5QSize)(XiQMainWindow* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QMainWindow__maximumSize_r5QSizer11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setFixedSize_pr11QMainWindowr5QSize)(XiQMainWindow* self, XiQSize* param0);
ETA_EXPORT void ETA(QMainWindow__resize_pr11QMainWindowr5QSize)(XiQMainWindow* self, XiQSize* s);
ETA_EXPORT void ETA(QMainWindow__adjustSize_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT XiQPoint* ETA(QMainWindow__pos_r6QPointr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__move_pr11QMainWindowr6QPoint)(XiQMainWindow* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QMainWindow__sizeHint_r5QSizer11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT XiQSize* ETA(QMainWindow__minimumSizeHint_r5QSizer11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT XiQPoint* ETA(QMainWindow__mapFrom_r6QPointr11QMainWindowr7QWidgetr6QPoint)(XiQMainWindow* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QMainWindow__mapFromGlobal_r6QPointr11QMainWindowr6QPoint)(XiQMainWindow* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QMainWindow__mapFromParent_r6QPointr11QMainWindowr6QPoint)(XiQMainWindow* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QMainWindow__mapTo_r6QPointr11QMainWindowr7QWidgetr6QPoint)(XiQMainWindow* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QMainWindow__mapToGlobal_r6QPointr11QMainWindowr6QPoint)(XiQMainWindow* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QMainWindow__mapToParent_r6QPointr11QMainWindowr6QPoint)(XiQMainWindow* self, XiQPoint* param0);
ETA_EXPORT void ETA(QMainWindow__setFont_pr11QMainWindowr5QFont)(XiQMainWindow* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QMainWindow__font_r5QFontr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT XiQString* ETA(QMainWindow__styleSheet_r7QStringr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setStyleSheet_pr11QMainWindowr7QString)(XiQMainWindow* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QMainWindow__focusPolicy_r11FocusPolicyr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setFocusPolicy_pr11QMainWindowr11FocusPolicy)(XiQMainWindow* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QMainWindow__setFocus_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__clearFocus_pr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT bool ETA(QMainWindow__hasFocus_br11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT XiQString* ETA(QMainWindow__toolTip_r7QStringr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setToolTip_pr11QMainWindowr7QString)(XiQMainWindow* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QMainWindow__whatsThis_r7QStringr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setWhatsThis_pr11QMainWindowr7QString)(XiQMainWindow* self, XiQString* param0);
ETA_EXPORT bool ETA(QMainWindow__hasMouseTracking_br11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT void ETA(QMainWindow__setMouseTracking_pr11QMainWindowb)(XiQMainWindow* self, bool param0);
ETA_EXPORT void ETA(QMainWindow__addAction_pr11QMainWindowr7QAction)(XiQMainWindow* self, XiQAction* action);
ETA_EXPORT void ETA(QMainWindow__paintEvent_pr11QMainWindowr11QPaintEvent)(XiQMainWindow* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QMainWindow__mousePressEvent_pr11QMainWindowr11QMouseEvent)(XiQMainWindow* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMainWindow__mouseReleaseEvent_pr11QMainWindowr11QMouseEvent)(XiQMainWindow* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMainWindow__mouseDoubleClickEvent_pr11QMainWindowr11QMouseEvent)(XiQMainWindow* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMainWindow__mouseMoveEvent_pr11QMainWindowr11QMouseEvent)(XiQMainWindow* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QMainWindow__wheelEvent_pr11QMainWindowr11QWheelEvent)(XiQMainWindow* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QMainWindow__keyPressEvent_pr11QMainWindowr9QKeyEvent)(XiQMainWindow* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QMainWindow__keyReleaseEvent_pr11QMainWindowr9QKeyEvent)(XiQMainWindow* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QMainWindow__enterEvent_pr11QMainWindowr6QEvent)(XiQMainWindow* self, XiQEvent* e);
ETA_EXPORT void ETA(QMainWindow__leaveEvent_pr11QMainWindowr6QEvent)(XiQMainWindow* self, XiQEvent* e);
ETA_EXPORT void ETA(QMainWindow__resizeEvent_pr11QMainWindowr12QResizeEvent)(XiQMainWindow* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QMainWindow__closeEvent_pr11QMainWindowr6QEvent)(XiQMainWindow* self, XiQEvent* e);
ETA_EXPORT void ETA(QMainWindow__contextMenuEvent_pr11QMainWindowr17QContextMenuEvent)(XiQMainWindow* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QMainWindow__showEvent_pr11QMainWindowr6QEvent)(XiQMainWindow* self, XiQEvent* e);
ETA_EXPORT void ETA(QMainWindow__hideEvent_pr11QMainWindowr6QEvent)(XiQMainWindow* self, XiQEvent* e);
ETA_EXPORT void ETA(QMainWindow__defaultEvent_pr11QMainWindowr6QEvent)(XiQMainWindow* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QMainWindow__toPixmap_r7QPixmapr11QMainWindow)(XiQMainWindow* self);
ETA_EXPORT XiQWidget* ETA(QMainWindow__toWidget_r7QWidgetr11QMainWindow)(XiQMainWindow* self);

using XiQMainWindowDerived = XiQMainWindow_vtable;

ETA_EXPORT XiQMainWindowDerived* ETA(QMainWindow__extend_r18QMainWindowDerived)();
ETA_EXPORT void ETA(QMainWindow__downcast_pr11QMainWindowr18QMainWindowDerived)(XiQMainWindow* self, XiQMainWindowDerived* derived);

ETA_EXPORT void ETA(QMainWindow__override__addToolBar_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__menuBar_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setCentralWidget_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__show_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__hide_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__raise_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__lower_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__close_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__isEnabled_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setEnabled_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setLayout_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__isWindowModified_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setWindowModified_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__windowTitle_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setWindowTitle_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__windowIcon_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setWindowIcon_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__isActiveWindow_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__activateWindow_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__isMinimized_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__isMaximized_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__isFullScreen_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__showMinimized_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__showMaximized_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__showFullScreen_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__showNormal_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__update_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__repaint_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setMinimumSize_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__minimumSize_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setMaximumSize_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__maximumSize_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setFixedSize_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__resize_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__adjustSize_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__pos_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__move_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__sizeHint_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__minimumSizeHint_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__mapFrom_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__mapFromGlobal_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__mapFromParent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__mapTo_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__mapToGlobal_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__mapToParent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setFont_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__font_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__styleSheet_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setStyleSheet_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__focusPolicy_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setFocusPolicy_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setFocus_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__clearFocus_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__hasFocus_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__toolTip_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setToolTip_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__whatsThis_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setWhatsThis_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__hasMouseTracking_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__setMouseTracking_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__addAction_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__paintEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__mousePressEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__mouseReleaseEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__mouseDoubleClickEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__mouseMoveEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__wheelEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__keyPressEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__keyReleaseEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__enterEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__leaveEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__resizeEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__closeEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__contextMenuEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__showEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__hideEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__defaultEvent_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__toPixmap_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);
ETA_EXPORT void ETA(QMainWindow__override__toWidget_pr18QMainWindowDerivedai)(XiQMainWindowDerived* derived, void* name);

ETA_EXPORT XiQMainWindow* ETA(qmainwindow__alloc_r11QMainWindow)();

inline QMainWindow* fromXi(XiQMainWindow* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQMainWindow_vtable: public XiQWidget_vtable
{
    void* reserved;
    void (*addToolBar)(XiQMainWindow*, XiQToolBar*);
    XiQMenuBar* (*menuBar)(XiQMainWindow*);
    void (*setCentralWidget)(XiQMainWindow*, XiQWidget*);
};

inline XiQMainWindow_vtable* XiQMainWindow::vtable() {
    return static_cast<XiQMainWindow_vtable*>(vptr);
}

extern XiQMainWindow_vtable ETA(_vt_QMainWindow);
extern int ETA(_size_QMainWindow);
ETA_EXPORT void ETA(_init_QMainWindow)() __attribute__((constructor));


ETA_EXPORT XiQMainWindow* ETA(qmainwindow_r11QMainWindow)();


struct XiQGroupBox_vtable;
struct XiQGroupBox: public XiQWidget
{
    XiQGroupBox_vtable* vtable();
    XiQGroupBox();
    QGroupBox* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QGroupBox wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static XiQString* title(XiQGroupBox* __thisPtr);
    static void setTitle(XiQGroupBox* __thisPtr, XiQString* t);
    static void setFlat(XiQGroupBox* __thisPtr, bool param0);
    static bool isFlat(XiQGroupBox* __thisPtr);
};

ETA_EXPORT XiQWidget* ETA(QGroupBox__to__QWidget_r7QWidgetr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT XiQPaintDevice* ETA(QGroupBox__to__QPaintDevice_r12QPaintDevicer9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT XiQString* ETA(QGroupBox__title_r7QStringr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setTitle_pr9QGroupBoxr7QString)(XiQGroupBox* self, XiQString* t);
ETA_EXPORT void ETA(QGroupBox__setFlat_pr9QGroupBoxb)(XiQGroupBox* self, bool param0);
ETA_EXPORT bool ETA(QGroupBox__isFlat_br9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__show_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__hide_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__raise_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__lower_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__close_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT bool ETA(QGroupBox__isEnabled_br9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setEnabled_pr9QGroupBoxb)(XiQGroupBox* self, bool param0);
ETA_EXPORT void ETA(QGroupBox__setLayout_pr9QGroupBoxr7QLayout)(XiQGroupBox* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QGroupBox__isWindowModified_br9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setWindowModified_pr9QGroupBoxb)(XiQGroupBox* self, bool param0);
ETA_EXPORT XiQString* ETA(QGroupBox__windowTitle_r7QStringr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setWindowTitle_pr9QGroupBoxr7QString)(XiQGroupBox* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QGroupBox__windowIcon_r5QIconr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setWindowIcon_pr9QGroupBoxr5QIcon)(XiQGroupBox* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QGroupBox__isActiveWindow_br9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__activateWindow_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT bool ETA(QGroupBox__isMinimized_br9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT bool ETA(QGroupBox__isMaximized_br9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT bool ETA(QGroupBox__isFullScreen_br9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__showMinimized_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__showMaximized_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__showFullScreen_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__showNormal_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__update_pr9QGroupBoxr5QRect)(XiQGroupBox* self, XiQRect* r);
ETA_EXPORT void ETA(QGroupBox__repaint_pr9QGroupBoxr5QRect)(XiQGroupBox* self, XiQRect* r);
ETA_EXPORT void ETA(QGroupBox__setMinimumSize_pr9QGroupBoxr5QSize)(XiQGroupBox* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QGroupBox__minimumSize_r5QSizer9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setMaximumSize_pr9QGroupBoxr5QSize)(XiQGroupBox* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QGroupBox__maximumSize_r5QSizer9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setFixedSize_pr9QGroupBoxr5QSize)(XiQGroupBox* self, XiQSize* param0);
ETA_EXPORT void ETA(QGroupBox__resize_pr9QGroupBoxr5QSize)(XiQGroupBox* self, XiQSize* s);
ETA_EXPORT void ETA(QGroupBox__adjustSize_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT XiQPoint* ETA(QGroupBox__pos_r6QPointr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__move_pr9QGroupBoxr6QPoint)(XiQGroupBox* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QGroupBox__sizeHint_r5QSizer9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT XiQSize* ETA(QGroupBox__minimumSizeHint_r5QSizer9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT XiQPoint* ETA(QGroupBox__mapFrom_r6QPointr9QGroupBoxr7QWidgetr6QPoint)(XiQGroupBox* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QGroupBox__mapFromGlobal_r6QPointr9QGroupBoxr6QPoint)(XiQGroupBox* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QGroupBox__mapFromParent_r6QPointr9QGroupBoxr6QPoint)(XiQGroupBox* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QGroupBox__mapTo_r6QPointr9QGroupBoxr7QWidgetr6QPoint)(XiQGroupBox* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QGroupBox__mapToGlobal_r6QPointr9QGroupBoxr6QPoint)(XiQGroupBox* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QGroupBox__mapToParent_r6QPointr9QGroupBoxr6QPoint)(XiQGroupBox* self, XiQPoint* param0);
ETA_EXPORT void ETA(QGroupBox__setFont_pr9QGroupBoxr5QFont)(XiQGroupBox* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QGroupBox__font_r5QFontr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT XiQString* ETA(QGroupBox__styleSheet_r7QStringr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setStyleSheet_pr9QGroupBoxr7QString)(XiQGroupBox* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QGroupBox__focusPolicy_r11FocusPolicyr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setFocusPolicy_pr9QGroupBoxr11FocusPolicy)(XiQGroupBox* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QGroupBox__setFocus_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__clearFocus_pr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT bool ETA(QGroupBox__hasFocus_br9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT XiQString* ETA(QGroupBox__toolTip_r7QStringr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setToolTip_pr9QGroupBoxr7QString)(XiQGroupBox* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QGroupBox__whatsThis_r7QStringr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setWhatsThis_pr9QGroupBoxr7QString)(XiQGroupBox* self, XiQString* param0);
ETA_EXPORT bool ETA(QGroupBox__hasMouseTracking_br9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT void ETA(QGroupBox__setMouseTracking_pr9QGroupBoxb)(XiQGroupBox* self, bool param0);
ETA_EXPORT void ETA(QGroupBox__addAction_pr9QGroupBoxr7QAction)(XiQGroupBox* self, XiQAction* action);
ETA_EXPORT void ETA(QGroupBox__paintEvent_pr9QGroupBoxr11QPaintEvent)(XiQGroupBox* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QGroupBox__mousePressEvent_pr9QGroupBoxr11QMouseEvent)(XiQGroupBox* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QGroupBox__mouseReleaseEvent_pr9QGroupBoxr11QMouseEvent)(XiQGroupBox* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QGroupBox__mouseDoubleClickEvent_pr9QGroupBoxr11QMouseEvent)(XiQGroupBox* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QGroupBox__mouseMoveEvent_pr9QGroupBoxr11QMouseEvent)(XiQGroupBox* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QGroupBox__wheelEvent_pr9QGroupBoxr11QWheelEvent)(XiQGroupBox* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QGroupBox__keyPressEvent_pr9QGroupBoxr9QKeyEvent)(XiQGroupBox* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QGroupBox__keyReleaseEvent_pr9QGroupBoxr9QKeyEvent)(XiQGroupBox* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QGroupBox__enterEvent_pr9QGroupBoxr6QEvent)(XiQGroupBox* self, XiQEvent* e);
ETA_EXPORT void ETA(QGroupBox__leaveEvent_pr9QGroupBoxr6QEvent)(XiQGroupBox* self, XiQEvent* e);
ETA_EXPORT void ETA(QGroupBox__resizeEvent_pr9QGroupBoxr12QResizeEvent)(XiQGroupBox* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QGroupBox__closeEvent_pr9QGroupBoxr6QEvent)(XiQGroupBox* self, XiQEvent* e);
ETA_EXPORT void ETA(QGroupBox__contextMenuEvent_pr9QGroupBoxr17QContextMenuEvent)(XiQGroupBox* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QGroupBox__showEvent_pr9QGroupBoxr6QEvent)(XiQGroupBox* self, XiQEvent* e);
ETA_EXPORT void ETA(QGroupBox__hideEvent_pr9QGroupBoxr6QEvent)(XiQGroupBox* self, XiQEvent* e);
ETA_EXPORT void ETA(QGroupBox__defaultEvent_pr9QGroupBoxr6QEvent)(XiQGroupBox* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QGroupBox__toPixmap_r7QPixmapr9QGroupBox)(XiQGroupBox* self);
ETA_EXPORT XiQWidget* ETA(QGroupBox__toWidget_r7QWidgetr9QGroupBox)(XiQGroupBox* self);

using XiQGroupBoxDerived = XiQGroupBox_vtable;

ETA_EXPORT XiQGroupBoxDerived* ETA(QGroupBox__extend_r16QGroupBoxDerived)();
ETA_EXPORT void ETA(QGroupBox__downcast_pr9QGroupBoxr16QGroupBoxDerived)(XiQGroupBox* self, XiQGroupBoxDerived* derived);

ETA_EXPORT void ETA(QGroupBox__override__title_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setTitle_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setFlat_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__isFlat_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__show_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__hide_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__raise_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__lower_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__close_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__isEnabled_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setEnabled_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setLayout_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__isWindowModified_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setWindowModified_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__windowTitle_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setWindowTitle_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__windowIcon_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setWindowIcon_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__isActiveWindow_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__activateWindow_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__isMinimized_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__isMaximized_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__isFullScreen_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__showMinimized_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__showMaximized_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__showFullScreen_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__showNormal_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__update_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__repaint_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setMinimumSize_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__minimumSize_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setMaximumSize_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__maximumSize_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setFixedSize_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__resize_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__adjustSize_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__pos_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__move_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__sizeHint_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__minimumSizeHint_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__mapFrom_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__mapFromGlobal_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__mapFromParent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__mapTo_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__mapToGlobal_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__mapToParent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setFont_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__font_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__styleSheet_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setStyleSheet_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__focusPolicy_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setFocusPolicy_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setFocus_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__clearFocus_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__hasFocus_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__toolTip_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setToolTip_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__whatsThis_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setWhatsThis_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__hasMouseTracking_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__setMouseTracking_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__addAction_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__paintEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__mousePressEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__mouseReleaseEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__mouseDoubleClickEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__mouseMoveEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__wheelEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__keyPressEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__keyReleaseEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__enterEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__leaveEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__resizeEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__closeEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__contextMenuEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__showEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__hideEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__defaultEvent_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__toPixmap_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);
ETA_EXPORT void ETA(QGroupBox__override__toWidget_pr16QGroupBoxDerivedai)(XiQGroupBoxDerived* derived, void* name);

ETA_EXPORT XiQGroupBox* ETA(qgroupbox__alloc_r9QGroupBox)();

inline QGroupBox* fromXi(XiQGroupBox* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQGroupBox_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiQString* (*title)(XiQGroupBox*);
    void (*setTitle)(XiQGroupBox*, XiQString*);
    void (*setFlat)(XiQGroupBox*, bool);
    bool (*isFlat)(XiQGroupBox*);
};

inline XiQGroupBox_vtable* XiQGroupBox::vtable() {
    return static_cast<XiQGroupBox_vtable*>(vptr);
}

extern XiQGroupBox_vtable ETA(_vt_QGroupBox);
extern int ETA(_size_QGroupBox);
ETA_EXPORT void ETA(_init_QGroupBox)() __attribute__((constructor));


ETA_EXPORT XiQGroupBox* ETA(qgroupbox_r9QGroupBoxr7QString)(XiQString* title);
typedef QDialog::DialogCode DialogCode;


struct XiDialogCode_vtable;
struct XiDialogCode: public Xiobj
{
    XiDialogCode_vtable* vtable();
    XiDialogCode();
    DialogCode value;
    DialogCode* impl() {
        if (!initialized) 
            new (this) XiDialogCode();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiDialogCode* me = static_cast<XiDialogCode*>(mePtr);
        if (me->initialized)
            me->~XiDialogCode();
    }

};

ETA_EXPORT XiDialogCode* ETA(Accepted_r10DialogCode)();
ETA_EXPORT XiDialogCode* ETA(Rejected_r10DialogCode)();

using XiDialogCodeDerived = XiDialogCode_vtable;

ETA_EXPORT XiDialogCodeDerived* ETA(DialogCode__extend_r17DialogCodeDerived)();
ETA_EXPORT void ETA(DialogCode__downcast_pr10DialogCoder17DialogCodeDerived)(XiDialogCode* self, XiDialogCodeDerived* derived);


ETA_EXPORT XiDialogCode* ETA(dialogcode__alloc_r10DialogCode)();

inline XiDialogCode* toXi(const DialogCode& orig) {
    if (orig == QDialog::Accepted)
        return ETA(Accepted_r10DialogCode)();
    if (orig == QDialog::Rejected)
        return ETA(Rejected_r10DialogCode)();
    XiDialogCode* r = gcNew<XiDialogCode>();
    r->value = orig;
    return r;
}

inline DialogCode fromXi(XiDialogCode* wrapped) {
    return *wrapped->impl();
}

struct XiDialogCode_vtable: public Xivtable
{
    void* reserved;
};

inline XiDialogCode_vtable* XiDialogCode::vtable() {
    return static_cast<XiDialogCode_vtable*>(vptr);
}

extern XiDialogCode_vtable ETA(_vt_DialogCode);
extern int ETA(_size_DialogCode);
ETA_EXPORT void ETA(_init_DialogCode)() __attribute__((constructor));




struct XiQDialog_vtable;
struct XiQDialog: public XiQWidget
{
    XiQDialog_vtable* vtable();
    XiQDialog();
    QDialog* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QDialog wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static int exec(XiQDialog* __thisPtr);
    static void accept(XiQDialog* __thisPtr);
    static void reject(XiQDialog* __thisPtr);
};

ETA_EXPORT XiQWidget* ETA(QDialog__to__QWidget_r7QWidgetr7QDialog)(XiQDialog* self);
ETA_EXPORT XiQPaintDevice* ETA(QDialog__to__QPaintDevice_r12QPaintDevicer7QDialog)(XiQDialog* self);
ETA_EXPORT int ETA(QDialog__exec_ir7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__accept_pr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__reject_pr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__show_pr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__hide_pr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__raise_pr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__lower_pr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__close_pr7QDialog)(XiQDialog* self);
ETA_EXPORT bool ETA(QDialog__isEnabled_br7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__setEnabled_pr7QDialogb)(XiQDialog* self, bool param0);
ETA_EXPORT void ETA(QDialog__setLayout_pr7QDialogr7QLayout)(XiQDialog* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QDialog__isWindowModified_br7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__setWindowModified_pr7QDialogb)(XiQDialog* self, bool param0);
ETA_EXPORT XiQString* ETA(QDialog__windowTitle_r7QStringr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__setWindowTitle_pr7QDialogr7QString)(XiQDialog* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QDialog__windowIcon_r5QIconr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__setWindowIcon_pr7QDialogr5QIcon)(XiQDialog* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QDialog__isActiveWindow_br7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__activateWindow_pr7QDialog)(XiQDialog* self);
ETA_EXPORT bool ETA(QDialog__isMinimized_br7QDialog)(XiQDialog* self);
ETA_EXPORT bool ETA(QDialog__isMaximized_br7QDialog)(XiQDialog* self);
ETA_EXPORT bool ETA(QDialog__isFullScreen_br7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__showMinimized_pr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__showMaximized_pr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__showFullScreen_pr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__showNormal_pr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__update_pr7QDialogr5QRect)(XiQDialog* self, XiQRect* r);
ETA_EXPORT void ETA(QDialog__repaint_pr7QDialogr5QRect)(XiQDialog* self, XiQRect* r);
ETA_EXPORT void ETA(QDialog__setMinimumSize_pr7QDialogr5QSize)(XiQDialog* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QDialog__minimumSize_r5QSizer7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__setMaximumSize_pr7QDialogr5QSize)(XiQDialog* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QDialog__maximumSize_r5QSizer7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__setFixedSize_pr7QDialogr5QSize)(XiQDialog* self, XiQSize* param0);
ETA_EXPORT void ETA(QDialog__resize_pr7QDialogr5QSize)(XiQDialog* self, XiQSize* s);
ETA_EXPORT void ETA(QDialog__adjustSize_pr7QDialog)(XiQDialog* self);
ETA_EXPORT XiQPoint* ETA(QDialog__pos_r6QPointr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__move_pr7QDialogr6QPoint)(XiQDialog* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QDialog__sizeHint_r5QSizer7QDialog)(XiQDialog* self);
ETA_EXPORT XiQSize* ETA(QDialog__minimumSizeHint_r5QSizer7QDialog)(XiQDialog* self);
ETA_EXPORT XiQPoint* ETA(QDialog__mapFrom_r6QPointr7QDialogr7QWidgetr6QPoint)(XiQDialog* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QDialog__mapFromGlobal_r6QPointr7QDialogr6QPoint)(XiQDialog* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QDialog__mapFromParent_r6QPointr7QDialogr6QPoint)(XiQDialog* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QDialog__mapTo_r6QPointr7QDialogr7QWidgetr6QPoint)(XiQDialog* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QDialog__mapToGlobal_r6QPointr7QDialogr6QPoint)(XiQDialog* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QDialog__mapToParent_r6QPointr7QDialogr6QPoint)(XiQDialog* self, XiQPoint* param0);
ETA_EXPORT void ETA(QDialog__setFont_pr7QDialogr5QFont)(XiQDialog* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QDialog__font_r5QFontr7QDialog)(XiQDialog* self);
ETA_EXPORT XiQString* ETA(QDialog__styleSheet_r7QStringr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__setStyleSheet_pr7QDialogr7QString)(XiQDialog* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QDialog__focusPolicy_r11FocusPolicyr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__setFocusPolicy_pr7QDialogr11FocusPolicy)(XiQDialog* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QDialog__setFocus_pr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__clearFocus_pr7QDialog)(XiQDialog* self);
ETA_EXPORT bool ETA(QDialog__hasFocus_br7QDialog)(XiQDialog* self);
ETA_EXPORT XiQString* ETA(QDialog__toolTip_r7QStringr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__setToolTip_pr7QDialogr7QString)(XiQDialog* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QDialog__whatsThis_r7QStringr7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__setWhatsThis_pr7QDialogr7QString)(XiQDialog* self, XiQString* param0);
ETA_EXPORT bool ETA(QDialog__hasMouseTracking_br7QDialog)(XiQDialog* self);
ETA_EXPORT void ETA(QDialog__setMouseTracking_pr7QDialogb)(XiQDialog* self, bool param0);
ETA_EXPORT void ETA(QDialog__addAction_pr7QDialogr7QAction)(XiQDialog* self, XiQAction* action);
ETA_EXPORT void ETA(QDialog__paintEvent_pr7QDialogr11QPaintEvent)(XiQDialog* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QDialog__mousePressEvent_pr7QDialogr11QMouseEvent)(XiQDialog* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QDialog__mouseReleaseEvent_pr7QDialogr11QMouseEvent)(XiQDialog* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QDialog__mouseDoubleClickEvent_pr7QDialogr11QMouseEvent)(XiQDialog* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QDialog__mouseMoveEvent_pr7QDialogr11QMouseEvent)(XiQDialog* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QDialog__wheelEvent_pr7QDialogr11QWheelEvent)(XiQDialog* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QDialog__keyPressEvent_pr7QDialogr9QKeyEvent)(XiQDialog* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QDialog__keyReleaseEvent_pr7QDialogr9QKeyEvent)(XiQDialog* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QDialog__enterEvent_pr7QDialogr6QEvent)(XiQDialog* self, XiQEvent* e);
ETA_EXPORT void ETA(QDialog__leaveEvent_pr7QDialogr6QEvent)(XiQDialog* self, XiQEvent* e);
ETA_EXPORT void ETA(QDialog__resizeEvent_pr7QDialogr12QResizeEvent)(XiQDialog* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QDialog__closeEvent_pr7QDialogr6QEvent)(XiQDialog* self, XiQEvent* e);
ETA_EXPORT void ETA(QDialog__contextMenuEvent_pr7QDialogr17QContextMenuEvent)(XiQDialog* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QDialog__showEvent_pr7QDialogr6QEvent)(XiQDialog* self, XiQEvent* e);
ETA_EXPORT void ETA(QDialog__hideEvent_pr7QDialogr6QEvent)(XiQDialog* self, XiQEvent* e);
ETA_EXPORT void ETA(QDialog__defaultEvent_pr7QDialogr6QEvent)(XiQDialog* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QDialog__toPixmap_r7QPixmapr7QDialog)(XiQDialog* self);
ETA_EXPORT XiQWidget* ETA(QDialog__toWidget_r7QWidgetr7QDialog)(XiQDialog* self);

using XiQDialogDerived = XiQDialog_vtable;

ETA_EXPORT XiQDialogDerived* ETA(QDialog__extend_r14QDialogDerived)();
ETA_EXPORT void ETA(QDialog__downcast_pr7QDialogr14QDialogDerived)(XiQDialog* self, XiQDialogDerived* derived);

ETA_EXPORT void ETA(QDialog__override__exec_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__accept_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__reject_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__show_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__hide_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__raise_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__lower_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__close_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__isEnabled_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setEnabled_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setLayout_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__isWindowModified_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setWindowModified_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__windowTitle_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setWindowTitle_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__windowIcon_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setWindowIcon_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__isActiveWindow_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__activateWindow_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__isMinimized_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__isMaximized_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__isFullScreen_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__showMinimized_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__showMaximized_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__showFullScreen_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__showNormal_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__update_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__repaint_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setMinimumSize_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__minimumSize_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setMaximumSize_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__maximumSize_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setFixedSize_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__resize_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__adjustSize_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__pos_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__move_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__sizeHint_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__minimumSizeHint_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__mapFrom_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__mapFromGlobal_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__mapFromParent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__mapTo_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__mapToGlobal_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__mapToParent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setFont_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__font_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__styleSheet_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setStyleSheet_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__focusPolicy_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setFocusPolicy_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setFocus_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__clearFocus_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__hasFocus_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__toolTip_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setToolTip_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__whatsThis_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setWhatsThis_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__hasMouseTracking_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__setMouseTracking_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__addAction_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__paintEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__mousePressEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__mouseReleaseEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__mouseDoubleClickEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__mouseMoveEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__wheelEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__keyPressEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__keyReleaseEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__enterEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__leaveEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__resizeEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__closeEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__contextMenuEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__showEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__hideEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__defaultEvent_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__toPixmap_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);
ETA_EXPORT void ETA(QDialog__override__toWidget_pr14QDialogDerivedai)(XiQDialogDerived* derived, void* name);

ETA_EXPORT XiQDialog* ETA(qdialog__alloc_r7QDialog)();

inline QDialog* fromXi(XiQDialog* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQDialog_vtable: public XiQWidget_vtable
{
    void* reserved;
    int (*exec)(XiQDialog*);
    void (*accept)(XiQDialog*);
    void (*reject)(XiQDialog*);
};

inline XiQDialog_vtable* XiQDialog::vtable() {
    return static_cast<XiQDialog_vtable*>(vptr);
}

extern XiQDialog_vtable ETA(_vt_QDialog);
extern int ETA(_size_QDialog);
ETA_EXPORT void ETA(_init_QDialog)() __attribute__((constructor));


ETA_EXPORT XiQDialog* ETA(qdialog_r7QDialog)();


struct XiQLineEdit_vtable;
struct XiQLineEdit: public XiQWidget
{
    XiQLineEdit_vtable* vtable();
    XiQLineEdit();
    QLineEdit* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QLineEdit wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static XiQString* text(XiQLineEdit* __thisPtr);
    static void setText(XiQLineEdit* __thisPtr, XiQString* param0);
    static void clear(XiQLineEdit* __thisPtr);
    static bool isReadOnly(XiQLineEdit* __thisPtr);
    static void setReadOnly(XiQLineEdit* __thisPtr, bool param0);
    static bool isModified(XiQLineEdit* __thisPtr);
    static void setModified(XiQLineEdit* __thisPtr, bool param0);
};

ETA_EXPORT XiQWidget* ETA(QLineEdit__to__QWidget_r7QWidgetr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT XiQPaintDevice* ETA(QLineEdit__to__QPaintDevice_r12QPaintDevicer9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT XiQString* ETA(QLineEdit__text_r7QStringr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setText_pr9QLineEditr7QString)(XiQLineEdit* self, XiQString* param0);
ETA_EXPORT void ETA(QLineEdit__clear_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT bool ETA(QLineEdit__isReadOnly_br9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setReadOnly_pr9QLineEditb)(XiQLineEdit* self, bool param0);
ETA_EXPORT bool ETA(QLineEdit__isModified_br9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setModified_pr9QLineEditb)(XiQLineEdit* self, bool param0);
ETA_EXPORT void ETA(QLineEdit__show_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__hide_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__raise_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__lower_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__close_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT bool ETA(QLineEdit__isEnabled_br9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setEnabled_pr9QLineEditb)(XiQLineEdit* self, bool param0);
ETA_EXPORT void ETA(QLineEdit__setLayout_pr9QLineEditr7QLayout)(XiQLineEdit* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QLineEdit__isWindowModified_br9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setWindowModified_pr9QLineEditb)(XiQLineEdit* self, bool param0);
ETA_EXPORT XiQString* ETA(QLineEdit__windowTitle_r7QStringr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setWindowTitle_pr9QLineEditr7QString)(XiQLineEdit* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QLineEdit__windowIcon_r5QIconr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setWindowIcon_pr9QLineEditr5QIcon)(XiQLineEdit* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QLineEdit__isActiveWindow_br9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__activateWindow_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT bool ETA(QLineEdit__isMinimized_br9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT bool ETA(QLineEdit__isMaximized_br9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT bool ETA(QLineEdit__isFullScreen_br9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__showMinimized_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__showMaximized_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__showFullScreen_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__showNormal_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__update_pr9QLineEditr5QRect)(XiQLineEdit* self, XiQRect* r);
ETA_EXPORT void ETA(QLineEdit__repaint_pr9QLineEditr5QRect)(XiQLineEdit* self, XiQRect* r);
ETA_EXPORT void ETA(QLineEdit__setMinimumSize_pr9QLineEditr5QSize)(XiQLineEdit* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QLineEdit__minimumSize_r5QSizer9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setMaximumSize_pr9QLineEditr5QSize)(XiQLineEdit* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QLineEdit__maximumSize_r5QSizer9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setFixedSize_pr9QLineEditr5QSize)(XiQLineEdit* self, XiQSize* param0);
ETA_EXPORT void ETA(QLineEdit__resize_pr9QLineEditr5QSize)(XiQLineEdit* self, XiQSize* s);
ETA_EXPORT void ETA(QLineEdit__adjustSize_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT XiQPoint* ETA(QLineEdit__pos_r6QPointr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__move_pr9QLineEditr6QPoint)(XiQLineEdit* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QLineEdit__sizeHint_r5QSizer9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT XiQSize* ETA(QLineEdit__minimumSizeHint_r5QSizer9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT XiQPoint* ETA(QLineEdit__mapFrom_r6QPointr9QLineEditr7QWidgetr6QPoint)(XiQLineEdit* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QLineEdit__mapFromGlobal_r6QPointr9QLineEditr6QPoint)(XiQLineEdit* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QLineEdit__mapFromParent_r6QPointr9QLineEditr6QPoint)(XiQLineEdit* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QLineEdit__mapTo_r6QPointr9QLineEditr7QWidgetr6QPoint)(XiQLineEdit* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QLineEdit__mapToGlobal_r6QPointr9QLineEditr6QPoint)(XiQLineEdit* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QLineEdit__mapToParent_r6QPointr9QLineEditr6QPoint)(XiQLineEdit* self, XiQPoint* param0);
ETA_EXPORT void ETA(QLineEdit__setFont_pr9QLineEditr5QFont)(XiQLineEdit* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QLineEdit__font_r5QFontr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT XiQString* ETA(QLineEdit__styleSheet_r7QStringr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setStyleSheet_pr9QLineEditr7QString)(XiQLineEdit* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QLineEdit__focusPolicy_r11FocusPolicyr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setFocusPolicy_pr9QLineEditr11FocusPolicy)(XiQLineEdit* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QLineEdit__setFocus_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__clearFocus_pr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT bool ETA(QLineEdit__hasFocus_br9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT XiQString* ETA(QLineEdit__toolTip_r7QStringr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setToolTip_pr9QLineEditr7QString)(XiQLineEdit* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QLineEdit__whatsThis_r7QStringr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setWhatsThis_pr9QLineEditr7QString)(XiQLineEdit* self, XiQString* param0);
ETA_EXPORT bool ETA(QLineEdit__hasMouseTracking_br9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT void ETA(QLineEdit__setMouseTracking_pr9QLineEditb)(XiQLineEdit* self, bool param0);
ETA_EXPORT void ETA(QLineEdit__addAction_pr9QLineEditr7QAction)(XiQLineEdit* self, XiQAction* action);
ETA_EXPORT void ETA(QLineEdit__paintEvent_pr9QLineEditr11QPaintEvent)(XiQLineEdit* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QLineEdit__mousePressEvent_pr9QLineEditr11QMouseEvent)(XiQLineEdit* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QLineEdit__mouseReleaseEvent_pr9QLineEditr11QMouseEvent)(XiQLineEdit* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QLineEdit__mouseDoubleClickEvent_pr9QLineEditr11QMouseEvent)(XiQLineEdit* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QLineEdit__mouseMoveEvent_pr9QLineEditr11QMouseEvent)(XiQLineEdit* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QLineEdit__wheelEvent_pr9QLineEditr11QWheelEvent)(XiQLineEdit* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QLineEdit__keyPressEvent_pr9QLineEditr9QKeyEvent)(XiQLineEdit* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QLineEdit__keyReleaseEvent_pr9QLineEditr9QKeyEvent)(XiQLineEdit* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QLineEdit__enterEvent_pr9QLineEditr6QEvent)(XiQLineEdit* self, XiQEvent* e);
ETA_EXPORT void ETA(QLineEdit__leaveEvent_pr9QLineEditr6QEvent)(XiQLineEdit* self, XiQEvent* e);
ETA_EXPORT void ETA(QLineEdit__resizeEvent_pr9QLineEditr12QResizeEvent)(XiQLineEdit* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QLineEdit__closeEvent_pr9QLineEditr6QEvent)(XiQLineEdit* self, XiQEvent* e);
ETA_EXPORT void ETA(QLineEdit__contextMenuEvent_pr9QLineEditr17QContextMenuEvent)(XiQLineEdit* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QLineEdit__showEvent_pr9QLineEditr6QEvent)(XiQLineEdit* self, XiQEvent* e);
ETA_EXPORT void ETA(QLineEdit__hideEvent_pr9QLineEditr6QEvent)(XiQLineEdit* self, XiQEvent* e);
ETA_EXPORT void ETA(QLineEdit__defaultEvent_pr9QLineEditr6QEvent)(XiQLineEdit* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QLineEdit__toPixmap_r7QPixmapr9QLineEdit)(XiQLineEdit* self);
ETA_EXPORT XiQWidget* ETA(QLineEdit__toWidget_r7QWidgetr9QLineEdit)(XiQLineEdit* self);

using XiQLineEditDerived = XiQLineEdit_vtable;

ETA_EXPORT XiQLineEditDerived* ETA(QLineEdit__extend_r16QLineEditDerived)();
ETA_EXPORT void ETA(QLineEdit__downcast_pr9QLineEditr16QLineEditDerived)(XiQLineEdit* self, XiQLineEditDerived* derived);

ETA_EXPORT void ETA(QLineEdit__override__text_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setText_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__clear_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__isReadOnly_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setReadOnly_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__isModified_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setModified_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__show_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__hide_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__raise_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__lower_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__close_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__isEnabled_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setEnabled_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setLayout_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__isWindowModified_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setWindowModified_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__windowTitle_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setWindowTitle_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__windowIcon_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setWindowIcon_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__isActiveWindow_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__activateWindow_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__isMinimized_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__isMaximized_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__isFullScreen_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__showMinimized_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__showMaximized_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__showFullScreen_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__showNormal_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__update_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__repaint_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setMinimumSize_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__minimumSize_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setMaximumSize_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__maximumSize_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setFixedSize_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__resize_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__adjustSize_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__pos_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__move_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__sizeHint_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__minimumSizeHint_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__mapFrom_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__mapFromGlobal_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__mapFromParent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__mapTo_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__mapToGlobal_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__mapToParent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setFont_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__font_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__styleSheet_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setStyleSheet_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__focusPolicy_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setFocusPolicy_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setFocus_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__clearFocus_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__hasFocus_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__toolTip_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setToolTip_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__whatsThis_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setWhatsThis_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__hasMouseTracking_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__setMouseTracking_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__addAction_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__paintEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__mousePressEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__mouseReleaseEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__mouseDoubleClickEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__mouseMoveEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__wheelEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__keyPressEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__keyReleaseEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__enterEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__leaveEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__resizeEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__closeEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__contextMenuEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__showEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__hideEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__defaultEvent_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__toPixmap_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);
ETA_EXPORT void ETA(QLineEdit__override__toWidget_pr16QLineEditDerivedai)(XiQLineEditDerived* derived, void* name);

ETA_EXPORT XiQLineEdit* ETA(qlineedit__alloc_r9QLineEdit)();

inline QLineEdit* fromXi(XiQLineEdit* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQLineEdit_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiQString* (*text)(XiQLineEdit*);
    void (*setText)(XiQLineEdit*, XiQString*);
    void (*clear)(XiQLineEdit*);
    bool (*isReadOnly)(XiQLineEdit*);
    void (*setReadOnly)(XiQLineEdit*, bool);
    bool (*isModified)(XiQLineEdit*);
    void (*setModified)(XiQLineEdit*, bool);
};

inline XiQLineEdit_vtable* XiQLineEdit::vtable() {
    return static_cast<XiQLineEdit_vtable*>(vptr);
}

extern XiQLineEdit_vtable ETA(_vt_QLineEdit);
extern int ETA(_size_QLineEdit);
ETA_EXPORT void ETA(_init_QLineEdit)() __attribute__((constructor));


ETA_EXPORT XiQLineEdit* ETA(qlineedit_r9QLineEdit)();


struct XiQTextEdit_vtable;
struct XiQTextEdit: public XiQWidget
{
    XiQTextEdit_vtable* vtable();
    XiQTextEdit();
    QTextEdit* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QTextEdit wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static bool isReadOnly(XiQTextEdit* __thisPtr);
    static void setReadOnly(XiQTextEdit* __thisPtr, bool param0);
    static XiQString* toHtml(XiQTextEdit* __thisPtr);
    static XiQString* toPlainText(XiQTextEdit* __thisPtr);
    static void setHtml(XiQTextEdit* __thisPtr, XiQString* param0);
    static void setPlainText(XiQTextEdit* __thisPtr, XiQString* param0);
    static void append(XiQTextEdit* __thisPtr, XiQString* param0);
    static void clear(XiQTextEdit* __thisPtr);
};

ETA_EXPORT XiQWidget* ETA(QTextEdit__to__QWidget_r7QWidgetr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT XiQPaintDevice* ETA(QTextEdit__to__QPaintDevice_r12QPaintDevicer9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT bool ETA(QTextEdit__isReadOnly_br9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setReadOnly_pr9QTextEditb)(XiQTextEdit* self, bool param0);
ETA_EXPORT XiQString* ETA(QTextEdit__toHtml_r7QStringr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT XiQString* ETA(QTextEdit__toPlainText_r7QStringr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setHtml_pr9QTextEditr7QString)(XiQTextEdit* self, XiQString* param0);
ETA_EXPORT void ETA(QTextEdit__setPlainText_pr9QTextEditr7QString)(XiQTextEdit* self, XiQString* param0);
ETA_EXPORT void ETA(QTextEdit__append_pr9QTextEditr7QString)(XiQTextEdit* self, XiQString* param0);
ETA_EXPORT void ETA(QTextEdit__clear_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__show_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__hide_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__raise_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__lower_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__close_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT bool ETA(QTextEdit__isEnabled_br9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setEnabled_pr9QTextEditb)(XiQTextEdit* self, bool param0);
ETA_EXPORT void ETA(QTextEdit__setLayout_pr9QTextEditr7QLayout)(XiQTextEdit* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QTextEdit__isWindowModified_br9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setWindowModified_pr9QTextEditb)(XiQTextEdit* self, bool param0);
ETA_EXPORT XiQString* ETA(QTextEdit__windowTitle_r7QStringr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setWindowTitle_pr9QTextEditr7QString)(XiQTextEdit* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QTextEdit__windowIcon_r5QIconr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setWindowIcon_pr9QTextEditr5QIcon)(XiQTextEdit* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QTextEdit__isActiveWindow_br9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__activateWindow_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT bool ETA(QTextEdit__isMinimized_br9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT bool ETA(QTextEdit__isMaximized_br9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT bool ETA(QTextEdit__isFullScreen_br9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__showMinimized_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__showMaximized_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__showFullScreen_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__showNormal_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__update_pr9QTextEditr5QRect)(XiQTextEdit* self, XiQRect* r);
ETA_EXPORT void ETA(QTextEdit__repaint_pr9QTextEditr5QRect)(XiQTextEdit* self, XiQRect* r);
ETA_EXPORT void ETA(QTextEdit__setMinimumSize_pr9QTextEditr5QSize)(XiQTextEdit* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QTextEdit__minimumSize_r5QSizer9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setMaximumSize_pr9QTextEditr5QSize)(XiQTextEdit* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QTextEdit__maximumSize_r5QSizer9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setFixedSize_pr9QTextEditr5QSize)(XiQTextEdit* self, XiQSize* param0);
ETA_EXPORT void ETA(QTextEdit__resize_pr9QTextEditr5QSize)(XiQTextEdit* self, XiQSize* s);
ETA_EXPORT void ETA(QTextEdit__adjustSize_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT XiQPoint* ETA(QTextEdit__pos_r6QPointr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__move_pr9QTextEditr6QPoint)(XiQTextEdit* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QTextEdit__sizeHint_r5QSizer9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT XiQSize* ETA(QTextEdit__minimumSizeHint_r5QSizer9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT XiQPoint* ETA(QTextEdit__mapFrom_r6QPointr9QTextEditr7QWidgetr6QPoint)(XiQTextEdit* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QTextEdit__mapFromGlobal_r6QPointr9QTextEditr6QPoint)(XiQTextEdit* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QTextEdit__mapFromParent_r6QPointr9QTextEditr6QPoint)(XiQTextEdit* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QTextEdit__mapTo_r6QPointr9QTextEditr7QWidgetr6QPoint)(XiQTextEdit* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QTextEdit__mapToGlobal_r6QPointr9QTextEditr6QPoint)(XiQTextEdit* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QTextEdit__mapToParent_r6QPointr9QTextEditr6QPoint)(XiQTextEdit* self, XiQPoint* param0);
ETA_EXPORT void ETA(QTextEdit__setFont_pr9QTextEditr5QFont)(XiQTextEdit* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QTextEdit__font_r5QFontr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT XiQString* ETA(QTextEdit__styleSheet_r7QStringr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setStyleSheet_pr9QTextEditr7QString)(XiQTextEdit* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QTextEdit__focusPolicy_r11FocusPolicyr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setFocusPolicy_pr9QTextEditr11FocusPolicy)(XiQTextEdit* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QTextEdit__setFocus_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__clearFocus_pr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT bool ETA(QTextEdit__hasFocus_br9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT XiQString* ETA(QTextEdit__toolTip_r7QStringr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setToolTip_pr9QTextEditr7QString)(XiQTextEdit* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QTextEdit__whatsThis_r7QStringr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setWhatsThis_pr9QTextEditr7QString)(XiQTextEdit* self, XiQString* param0);
ETA_EXPORT bool ETA(QTextEdit__hasMouseTracking_br9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT void ETA(QTextEdit__setMouseTracking_pr9QTextEditb)(XiQTextEdit* self, bool param0);
ETA_EXPORT void ETA(QTextEdit__addAction_pr9QTextEditr7QAction)(XiQTextEdit* self, XiQAction* action);
ETA_EXPORT void ETA(QTextEdit__paintEvent_pr9QTextEditr11QPaintEvent)(XiQTextEdit* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QTextEdit__mousePressEvent_pr9QTextEditr11QMouseEvent)(XiQTextEdit* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QTextEdit__mouseReleaseEvent_pr9QTextEditr11QMouseEvent)(XiQTextEdit* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QTextEdit__mouseDoubleClickEvent_pr9QTextEditr11QMouseEvent)(XiQTextEdit* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QTextEdit__mouseMoveEvent_pr9QTextEditr11QMouseEvent)(XiQTextEdit* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QTextEdit__wheelEvent_pr9QTextEditr11QWheelEvent)(XiQTextEdit* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QTextEdit__keyPressEvent_pr9QTextEditr9QKeyEvent)(XiQTextEdit* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QTextEdit__keyReleaseEvent_pr9QTextEditr9QKeyEvent)(XiQTextEdit* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QTextEdit__enterEvent_pr9QTextEditr6QEvent)(XiQTextEdit* self, XiQEvent* e);
ETA_EXPORT void ETA(QTextEdit__leaveEvent_pr9QTextEditr6QEvent)(XiQTextEdit* self, XiQEvent* e);
ETA_EXPORT void ETA(QTextEdit__resizeEvent_pr9QTextEditr12QResizeEvent)(XiQTextEdit* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QTextEdit__closeEvent_pr9QTextEditr6QEvent)(XiQTextEdit* self, XiQEvent* e);
ETA_EXPORT void ETA(QTextEdit__contextMenuEvent_pr9QTextEditr17QContextMenuEvent)(XiQTextEdit* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QTextEdit__showEvent_pr9QTextEditr6QEvent)(XiQTextEdit* self, XiQEvent* e);
ETA_EXPORT void ETA(QTextEdit__hideEvent_pr9QTextEditr6QEvent)(XiQTextEdit* self, XiQEvent* e);
ETA_EXPORT void ETA(QTextEdit__defaultEvent_pr9QTextEditr6QEvent)(XiQTextEdit* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QTextEdit__toPixmap_r7QPixmapr9QTextEdit)(XiQTextEdit* self);
ETA_EXPORT XiQWidget* ETA(QTextEdit__toWidget_r7QWidgetr9QTextEdit)(XiQTextEdit* self);

using XiQTextEditDerived = XiQTextEdit_vtable;

ETA_EXPORT XiQTextEditDerived* ETA(QTextEdit__extend_r16QTextEditDerived)();
ETA_EXPORT void ETA(QTextEdit__downcast_pr9QTextEditr16QTextEditDerived)(XiQTextEdit* self, XiQTextEditDerived* derived);

ETA_EXPORT void ETA(QTextEdit__override__isReadOnly_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setReadOnly_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__toHtml_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__toPlainText_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setHtml_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setPlainText_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__append_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__clear_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__show_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__hide_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__raise_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__lower_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__close_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__isEnabled_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setEnabled_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setLayout_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__isWindowModified_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setWindowModified_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__windowTitle_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setWindowTitle_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__windowIcon_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setWindowIcon_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__isActiveWindow_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__activateWindow_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__isMinimized_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__isMaximized_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__isFullScreen_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__showMinimized_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__showMaximized_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__showFullScreen_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__showNormal_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__update_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__repaint_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setMinimumSize_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__minimumSize_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setMaximumSize_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__maximumSize_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setFixedSize_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__resize_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__adjustSize_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__pos_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__move_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__sizeHint_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__minimumSizeHint_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__mapFrom_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__mapFromGlobal_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__mapFromParent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__mapTo_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__mapToGlobal_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__mapToParent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setFont_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__font_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__styleSheet_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setStyleSheet_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__focusPolicy_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setFocusPolicy_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setFocus_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__clearFocus_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__hasFocus_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__toolTip_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setToolTip_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__whatsThis_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setWhatsThis_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__hasMouseTracking_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__setMouseTracking_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__addAction_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__paintEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__mousePressEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__mouseReleaseEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__mouseDoubleClickEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__mouseMoveEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__wheelEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__keyPressEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__keyReleaseEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__enterEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__leaveEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__resizeEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__closeEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__contextMenuEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__showEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__hideEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__defaultEvent_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__toPixmap_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);
ETA_EXPORT void ETA(QTextEdit__override__toWidget_pr16QTextEditDerivedai)(XiQTextEditDerived* derived, void* name);

ETA_EXPORT XiQTextEdit* ETA(qtextedit__alloc_r9QTextEdit)();

inline QTextEdit* fromXi(XiQTextEdit* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQTextEdit_vtable: public XiQWidget_vtable
{
    void* reserved;
    bool (*isReadOnly)(XiQTextEdit*);
    void (*setReadOnly)(XiQTextEdit*, bool);
    XiQString* (*toHtml)(XiQTextEdit*);
    XiQString* (*toPlainText)(XiQTextEdit*);
    void (*setHtml)(XiQTextEdit*, XiQString*);
    void (*setPlainText)(XiQTextEdit*, XiQString*);
    void (*append)(XiQTextEdit*, XiQString*);
    void (*clear)(XiQTextEdit*);
};

inline XiQTextEdit_vtable* XiQTextEdit::vtable() {
    return static_cast<XiQTextEdit_vtable*>(vptr);
}

extern XiQTextEdit_vtable ETA(_vt_QTextEdit);
extern int ETA(_size_QTextEdit);
ETA_EXPORT void ETA(_init_QTextEdit)() __attribute__((constructor));


ETA_EXPORT XiQTextEdit* ETA(qtextedit_r9QTextEdit)();


struct XiSliderListener_vtable;
struct XiSliderListener: public Xiobj
{
    XiSliderListener_vtable* vtable();
    XiSliderListener();
    DummyPeer value;
    DummyPeer* impl() {
        if (!initialized) 
            new (this) XiSliderListener();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiSliderListener* me = static_cast<XiSliderListener*>(mePtr);
        if (me->initialized)
            me->~XiSliderListener();
    }

    static void sliderMoved(XiSliderListener* __thisPtr, XiQWidget* slider, int val);
};

ETA_EXPORT void ETA(SliderListener__sliderMoved_pr14SliderListenerr7QWidgeti)(XiSliderListener* self, XiQWidget* slider, int val);

using XiSliderListenerDerived = XiSliderListener_vtable;

ETA_EXPORT XiSliderListenerDerived* ETA(SliderListener__extend_r21SliderListenerDerived)();
ETA_EXPORT void ETA(SliderListener__downcast_pr14SliderListenerr21SliderListenerDerived)(XiSliderListener* self, XiSliderListenerDerived* derived);

ETA_EXPORT void ETA(SliderListener__override__sliderMoved_pr21SliderListenerDerivedai)(XiSliderListenerDerived* derived, void* name);

ETA_EXPORT XiSliderListener* ETA(sliderlistener__alloc_r14SliderListener)();

struct XiSliderListener_vtable: public Xivtable
{
    void* reserved;
    void (*sliderMoved)(XiSliderListener*, XiQWidget*, int);
};

inline XiSliderListener_vtable* XiSliderListener::vtable() {
    return static_cast<XiSliderListener_vtable*>(vptr);
}

extern XiSliderListener_vtable ETA(_vt_SliderListener);
extern int ETA(_size_SliderListener);
ETA_EXPORT void ETA(_init_SliderListener)() __attribute__((constructor));




struct XiQAbstractSlider_vtable;
struct XiQAbstractSlider: public XiQWidget
{
    XiQAbstractSlider_vtable* vtable();
    XiQAbstractSlider();
    QAbstractSlider* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QAbstractSlider wrappedType;
    xiqEventListenerList<XiSliderListener> sliderListeners;
    XiQAbstractSliderSigs* sig;

    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }

    void setObject(QAbstractSlider* b) {
        XiQWidget::setObject(b);
        sig = new XiQAbstractSliderSigs(this, b);
    }

    ~XiQAbstractSlider() {
        delete sig;
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static XiOrientation* orientation(XiQAbstractSlider* __thisPtr);
    static void setOrientation(XiQAbstractSlider* __thisPtr, XiOrientation* param0);
    static int getValue(XiQAbstractSlider* __thisPtr);
    static void setValue(XiQAbstractSlider* __thisPtr, int param0);
    static void setRange(XiQAbstractSlider* __thisPtr, int min, int max);
    static int minimum(XiQAbstractSlider* __thisPtr);
    static void setMinimum(XiQAbstractSlider* __thisPtr, int param0);
    static int maximum(XiQAbstractSlider* __thisPtr);
    static void setMaximum(XiQAbstractSlider* __thisPtr, int param0);
    static int pageStep(XiQAbstractSlider* __thisPtr);
    static void setPageStep(XiQAbstractSlider* __thisPtr, int param0);
    static void sliderMoved(XiQAbstractSlider* __thisPtr, int param0);
    static void addSliderListener(XiQAbstractSlider* __thisPtr, XiSliderListener* l);
};

ETA_EXPORT XiQWidget* ETA(QAbstractSlider__to__QWidget_r7QWidgetr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT XiQPaintDevice* ETA(QAbstractSlider__to__QPaintDevice_r12QPaintDevicer15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT XiOrientation* ETA(QAbstractSlider__orientation_r11Orientationr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setOrientation_pr15QAbstractSliderr11Orientation)(XiQAbstractSlider* self, XiOrientation* param0);
ETA_EXPORT int ETA(QAbstractSlider__getValue_ir15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setValue_pr15QAbstractSlideri)(XiQAbstractSlider* self, int param0);
ETA_EXPORT void ETA(QAbstractSlider__setRange_pr15QAbstractSliderii)(XiQAbstractSlider* self, int min, int max);
ETA_EXPORT int ETA(QAbstractSlider__minimum_ir15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setMinimum_pr15QAbstractSlideri)(XiQAbstractSlider* self, int param0);
ETA_EXPORT int ETA(QAbstractSlider__maximum_ir15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setMaximum_pr15QAbstractSlideri)(XiQAbstractSlider* self, int param0);
ETA_EXPORT int ETA(QAbstractSlider__pageStep_ir15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setPageStep_pr15QAbstractSlideri)(XiQAbstractSlider* self, int param0);
ETA_EXPORT void ETA(QAbstractSlider__sliderMoved_pr15QAbstractSlideri)(XiQAbstractSlider* self, int param0);
ETA_EXPORT void ETA(QAbstractSlider__addSliderListener_pr15QAbstractSliderr14SliderListener)(XiQAbstractSlider* self, XiSliderListener* l);
ETA_EXPORT void ETA(QAbstractSlider__show_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__hide_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__raise_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__lower_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__close_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT bool ETA(QAbstractSlider__isEnabled_br15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setEnabled_pr15QAbstractSliderb)(XiQAbstractSlider* self, bool param0);
ETA_EXPORT void ETA(QAbstractSlider__setLayout_pr15QAbstractSliderr7QLayout)(XiQAbstractSlider* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QAbstractSlider__isWindowModified_br15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setWindowModified_pr15QAbstractSliderb)(XiQAbstractSlider* self, bool param0);
ETA_EXPORT XiQString* ETA(QAbstractSlider__windowTitle_r7QStringr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setWindowTitle_pr15QAbstractSliderr7QString)(XiQAbstractSlider* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QAbstractSlider__windowIcon_r5QIconr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setWindowIcon_pr15QAbstractSliderr5QIcon)(XiQAbstractSlider* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QAbstractSlider__isActiveWindow_br15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__activateWindow_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT bool ETA(QAbstractSlider__isMinimized_br15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT bool ETA(QAbstractSlider__isMaximized_br15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT bool ETA(QAbstractSlider__isFullScreen_br15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__showMinimized_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__showMaximized_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__showFullScreen_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__showNormal_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__update_pr15QAbstractSliderr5QRect)(XiQAbstractSlider* self, XiQRect* r);
ETA_EXPORT void ETA(QAbstractSlider__repaint_pr15QAbstractSliderr5QRect)(XiQAbstractSlider* self, XiQRect* r);
ETA_EXPORT void ETA(QAbstractSlider__setMinimumSize_pr15QAbstractSliderr5QSize)(XiQAbstractSlider* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QAbstractSlider__minimumSize_r5QSizer15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setMaximumSize_pr15QAbstractSliderr5QSize)(XiQAbstractSlider* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QAbstractSlider__maximumSize_r5QSizer15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setFixedSize_pr15QAbstractSliderr5QSize)(XiQAbstractSlider* self, XiQSize* param0);
ETA_EXPORT void ETA(QAbstractSlider__resize_pr15QAbstractSliderr5QSize)(XiQAbstractSlider* self, XiQSize* s);
ETA_EXPORT void ETA(QAbstractSlider__adjustSize_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT XiQPoint* ETA(QAbstractSlider__pos_r6QPointr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__move_pr15QAbstractSliderr6QPoint)(XiQAbstractSlider* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QAbstractSlider__sizeHint_r5QSizer15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT XiQSize* ETA(QAbstractSlider__minimumSizeHint_r5QSizer15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT XiQPoint* ETA(QAbstractSlider__mapFrom_r6QPointr15QAbstractSliderr7QWidgetr6QPoint)(XiQAbstractSlider* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QAbstractSlider__mapFromGlobal_r6QPointr15QAbstractSliderr6QPoint)(XiQAbstractSlider* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QAbstractSlider__mapFromParent_r6QPointr15QAbstractSliderr6QPoint)(XiQAbstractSlider* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QAbstractSlider__mapTo_r6QPointr15QAbstractSliderr7QWidgetr6QPoint)(XiQAbstractSlider* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QAbstractSlider__mapToGlobal_r6QPointr15QAbstractSliderr6QPoint)(XiQAbstractSlider* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QAbstractSlider__mapToParent_r6QPointr15QAbstractSliderr6QPoint)(XiQAbstractSlider* self, XiQPoint* param0);
ETA_EXPORT void ETA(QAbstractSlider__setFont_pr15QAbstractSliderr5QFont)(XiQAbstractSlider* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QAbstractSlider__font_r5QFontr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT XiQString* ETA(QAbstractSlider__styleSheet_r7QStringr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setStyleSheet_pr15QAbstractSliderr7QString)(XiQAbstractSlider* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QAbstractSlider__focusPolicy_r11FocusPolicyr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setFocusPolicy_pr15QAbstractSliderr11FocusPolicy)(XiQAbstractSlider* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QAbstractSlider__setFocus_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__clearFocus_pr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT bool ETA(QAbstractSlider__hasFocus_br15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT XiQString* ETA(QAbstractSlider__toolTip_r7QStringr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setToolTip_pr15QAbstractSliderr7QString)(XiQAbstractSlider* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QAbstractSlider__whatsThis_r7QStringr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setWhatsThis_pr15QAbstractSliderr7QString)(XiQAbstractSlider* self, XiQString* param0);
ETA_EXPORT bool ETA(QAbstractSlider__hasMouseTracking_br15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT void ETA(QAbstractSlider__setMouseTracking_pr15QAbstractSliderb)(XiQAbstractSlider* self, bool param0);
ETA_EXPORT void ETA(QAbstractSlider__addAction_pr15QAbstractSliderr7QAction)(XiQAbstractSlider* self, XiQAction* action);
ETA_EXPORT void ETA(QAbstractSlider__paintEvent_pr15QAbstractSliderr11QPaintEvent)(XiQAbstractSlider* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QAbstractSlider__mousePressEvent_pr15QAbstractSliderr11QMouseEvent)(XiQAbstractSlider* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__mouseReleaseEvent_pr15QAbstractSliderr11QMouseEvent)(XiQAbstractSlider* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__mouseDoubleClickEvent_pr15QAbstractSliderr11QMouseEvent)(XiQAbstractSlider* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__mouseMoveEvent_pr15QAbstractSliderr11QMouseEvent)(XiQAbstractSlider* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__wheelEvent_pr15QAbstractSliderr11QWheelEvent)(XiQAbstractSlider* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__keyPressEvent_pr15QAbstractSliderr9QKeyEvent)(XiQAbstractSlider* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__keyReleaseEvent_pr15QAbstractSliderr9QKeyEvent)(XiQAbstractSlider* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__enterEvent_pr15QAbstractSliderr6QEvent)(XiQAbstractSlider* self, XiQEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__leaveEvent_pr15QAbstractSliderr6QEvent)(XiQAbstractSlider* self, XiQEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__resizeEvent_pr15QAbstractSliderr12QResizeEvent)(XiQAbstractSlider* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__closeEvent_pr15QAbstractSliderr6QEvent)(XiQAbstractSlider* self, XiQEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__contextMenuEvent_pr15QAbstractSliderr17QContextMenuEvent)(XiQAbstractSlider* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__showEvent_pr15QAbstractSliderr6QEvent)(XiQAbstractSlider* self, XiQEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__hideEvent_pr15QAbstractSliderr6QEvent)(XiQAbstractSlider* self, XiQEvent* e);
ETA_EXPORT void ETA(QAbstractSlider__defaultEvent_pr15QAbstractSliderr6QEvent)(XiQAbstractSlider* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QAbstractSlider__toPixmap_r7QPixmapr15QAbstractSlider)(XiQAbstractSlider* self);
ETA_EXPORT XiQWidget* ETA(QAbstractSlider__toWidget_r7QWidgetr15QAbstractSlider)(XiQAbstractSlider* self);

using XiQAbstractSliderDerived = XiQAbstractSlider_vtable;

ETA_EXPORT XiQAbstractSliderDerived* ETA(QAbstractSlider__extend_r22QAbstractSliderDerived)();
ETA_EXPORT void ETA(QAbstractSlider__downcast_pr15QAbstractSliderr22QAbstractSliderDerived)(XiQAbstractSlider* self, XiQAbstractSliderDerived* derived);

ETA_EXPORT void ETA(QAbstractSlider__override__orientation_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setOrientation_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__getValue_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setValue_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setRange_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__minimum_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setMinimum_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__maximum_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setMaximum_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__pageStep_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setPageStep_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__sliderMoved_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__addSliderListener_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__show_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__hide_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__raise_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__lower_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__close_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__isEnabled_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setEnabled_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setLayout_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__isWindowModified_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setWindowModified_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__windowTitle_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setWindowTitle_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__windowIcon_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setWindowIcon_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__isActiveWindow_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__activateWindow_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__isMinimized_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__isMaximized_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__isFullScreen_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__showMinimized_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__showMaximized_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__showFullScreen_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__showNormal_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__update_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__repaint_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setMinimumSize_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__minimumSize_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setMaximumSize_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__maximumSize_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setFixedSize_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__resize_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__adjustSize_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__pos_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__move_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__sizeHint_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__minimumSizeHint_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__mapFrom_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__mapFromGlobal_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__mapFromParent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__mapTo_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__mapToGlobal_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__mapToParent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setFont_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__font_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__styleSheet_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setStyleSheet_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__focusPolicy_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setFocusPolicy_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setFocus_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__clearFocus_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__hasFocus_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__toolTip_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setToolTip_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__whatsThis_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setWhatsThis_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__hasMouseTracking_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__setMouseTracking_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__addAction_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__paintEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__mousePressEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__mouseReleaseEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__mouseDoubleClickEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__mouseMoveEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__wheelEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__keyPressEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__keyReleaseEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__enterEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__leaveEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__resizeEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__closeEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__contextMenuEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__showEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__hideEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__defaultEvent_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__toPixmap_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QAbstractSlider__override__toWidget_pr22QAbstractSliderDerivedai)(XiQAbstractSliderDerived* derived, void* name);

ETA_EXPORT XiQAbstractSlider* ETA(qabstractslider__alloc_r15QAbstractSlider)();

inline QAbstractSlider* fromXi(XiQAbstractSlider* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQAbstractSlider_vtable: public XiQWidget_vtable
{
    void* reserved;
    XiOrientation* (*orientation)(XiQAbstractSlider*);
    void (*setOrientation)(XiQAbstractSlider*, XiOrientation*);
    int (*getValue)(XiQAbstractSlider*);
    void (*setValue)(XiQAbstractSlider*, int);
    void (*setRange)(XiQAbstractSlider*, int, int);
    int (*minimum)(XiQAbstractSlider*);
    void (*setMinimum)(XiQAbstractSlider*, int);
    int (*maximum)(XiQAbstractSlider*);
    void (*setMaximum)(XiQAbstractSlider*, int);
    int (*pageStep)(XiQAbstractSlider*);
    void (*setPageStep)(XiQAbstractSlider*, int);
    void (*sliderMoved)(XiQAbstractSlider*, int);
    void (*addSliderListener)(XiQAbstractSlider*, XiSliderListener*);
};

inline XiQAbstractSlider_vtable* XiQAbstractSlider::vtable() {
    return static_cast<XiQAbstractSlider_vtable*>(vptr);
}

extern XiQAbstractSlider_vtable ETA(_vt_QAbstractSlider);
extern int ETA(_size_QAbstractSlider);
ETA_EXPORT void ETA(_init_QAbstractSlider)() __attribute__((constructor));




struct XiQScrollBar_vtable;
struct XiQScrollBar: public XiQAbstractSlider
{
    XiQScrollBar_vtable* vtable();
    XiQScrollBar();
    QScrollBar* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QScrollBar wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
};

ETA_EXPORT XiQAbstractSlider* ETA(QScrollBar__to__QAbstractSlider_r15QAbstractSliderr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT XiQWidget* ETA(QScrollBar__to__QWidget_r7QWidgetr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT XiQPaintDevice* ETA(QScrollBar__to__QPaintDevice_r12QPaintDevicer10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT XiOrientation* ETA(QScrollBar__orientation_r11Orientationr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setOrientation_pr10QScrollBarr11Orientation)(XiQScrollBar* self, XiOrientation* param0);
ETA_EXPORT int ETA(QScrollBar__getValue_ir10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setValue_pr10QScrollBari)(XiQScrollBar* self, int param0);
ETA_EXPORT void ETA(QScrollBar__setRange_pr10QScrollBarii)(XiQScrollBar* self, int min, int max);
ETA_EXPORT int ETA(QScrollBar__minimum_ir10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setMinimum_pr10QScrollBari)(XiQScrollBar* self, int param0);
ETA_EXPORT int ETA(QScrollBar__maximum_ir10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setMaximum_pr10QScrollBari)(XiQScrollBar* self, int param0);
ETA_EXPORT int ETA(QScrollBar__pageStep_ir10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setPageStep_pr10QScrollBari)(XiQScrollBar* self, int param0);
ETA_EXPORT void ETA(QScrollBar__sliderMoved_pr10QScrollBari)(XiQScrollBar* self, int param0);
ETA_EXPORT void ETA(QScrollBar__addSliderListener_pr10QScrollBarr14SliderListener)(XiQScrollBar* self, XiSliderListener* l);
ETA_EXPORT void ETA(QScrollBar__show_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__hide_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__raise_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__lower_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__close_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT bool ETA(QScrollBar__isEnabled_br10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setEnabled_pr10QScrollBarb)(XiQScrollBar* self, bool param0);
ETA_EXPORT void ETA(QScrollBar__setLayout_pr10QScrollBarr7QLayout)(XiQScrollBar* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QScrollBar__isWindowModified_br10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setWindowModified_pr10QScrollBarb)(XiQScrollBar* self, bool param0);
ETA_EXPORT XiQString* ETA(QScrollBar__windowTitle_r7QStringr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setWindowTitle_pr10QScrollBarr7QString)(XiQScrollBar* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QScrollBar__windowIcon_r5QIconr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setWindowIcon_pr10QScrollBarr5QIcon)(XiQScrollBar* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QScrollBar__isActiveWindow_br10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__activateWindow_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT bool ETA(QScrollBar__isMinimized_br10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT bool ETA(QScrollBar__isMaximized_br10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT bool ETA(QScrollBar__isFullScreen_br10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__showMinimized_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__showMaximized_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__showFullScreen_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__showNormal_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__update_pr10QScrollBarr5QRect)(XiQScrollBar* self, XiQRect* r);
ETA_EXPORT void ETA(QScrollBar__repaint_pr10QScrollBarr5QRect)(XiQScrollBar* self, XiQRect* r);
ETA_EXPORT void ETA(QScrollBar__setMinimumSize_pr10QScrollBarr5QSize)(XiQScrollBar* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QScrollBar__minimumSize_r5QSizer10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setMaximumSize_pr10QScrollBarr5QSize)(XiQScrollBar* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QScrollBar__maximumSize_r5QSizer10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setFixedSize_pr10QScrollBarr5QSize)(XiQScrollBar* self, XiQSize* param0);
ETA_EXPORT void ETA(QScrollBar__resize_pr10QScrollBarr5QSize)(XiQScrollBar* self, XiQSize* s);
ETA_EXPORT void ETA(QScrollBar__adjustSize_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT XiQPoint* ETA(QScrollBar__pos_r6QPointr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__move_pr10QScrollBarr6QPoint)(XiQScrollBar* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QScrollBar__sizeHint_r5QSizer10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT XiQSize* ETA(QScrollBar__minimumSizeHint_r5QSizer10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT XiQPoint* ETA(QScrollBar__mapFrom_r6QPointr10QScrollBarr7QWidgetr6QPoint)(XiQScrollBar* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QScrollBar__mapFromGlobal_r6QPointr10QScrollBarr6QPoint)(XiQScrollBar* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QScrollBar__mapFromParent_r6QPointr10QScrollBarr6QPoint)(XiQScrollBar* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QScrollBar__mapTo_r6QPointr10QScrollBarr7QWidgetr6QPoint)(XiQScrollBar* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QScrollBar__mapToGlobal_r6QPointr10QScrollBarr6QPoint)(XiQScrollBar* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QScrollBar__mapToParent_r6QPointr10QScrollBarr6QPoint)(XiQScrollBar* self, XiQPoint* param0);
ETA_EXPORT void ETA(QScrollBar__setFont_pr10QScrollBarr5QFont)(XiQScrollBar* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QScrollBar__font_r5QFontr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT XiQString* ETA(QScrollBar__styleSheet_r7QStringr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setStyleSheet_pr10QScrollBarr7QString)(XiQScrollBar* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QScrollBar__focusPolicy_r11FocusPolicyr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setFocusPolicy_pr10QScrollBarr11FocusPolicy)(XiQScrollBar* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QScrollBar__setFocus_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__clearFocus_pr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT bool ETA(QScrollBar__hasFocus_br10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT XiQString* ETA(QScrollBar__toolTip_r7QStringr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setToolTip_pr10QScrollBarr7QString)(XiQScrollBar* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QScrollBar__whatsThis_r7QStringr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setWhatsThis_pr10QScrollBarr7QString)(XiQScrollBar* self, XiQString* param0);
ETA_EXPORT bool ETA(QScrollBar__hasMouseTracking_br10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT void ETA(QScrollBar__setMouseTracking_pr10QScrollBarb)(XiQScrollBar* self, bool param0);
ETA_EXPORT void ETA(QScrollBar__addAction_pr10QScrollBarr7QAction)(XiQScrollBar* self, XiQAction* action);
ETA_EXPORT void ETA(QScrollBar__paintEvent_pr10QScrollBarr11QPaintEvent)(XiQScrollBar* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QScrollBar__mousePressEvent_pr10QScrollBarr11QMouseEvent)(XiQScrollBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QScrollBar__mouseReleaseEvent_pr10QScrollBarr11QMouseEvent)(XiQScrollBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QScrollBar__mouseDoubleClickEvent_pr10QScrollBarr11QMouseEvent)(XiQScrollBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QScrollBar__mouseMoveEvent_pr10QScrollBarr11QMouseEvent)(XiQScrollBar* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QScrollBar__wheelEvent_pr10QScrollBarr11QWheelEvent)(XiQScrollBar* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QScrollBar__keyPressEvent_pr10QScrollBarr9QKeyEvent)(XiQScrollBar* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QScrollBar__keyReleaseEvent_pr10QScrollBarr9QKeyEvent)(XiQScrollBar* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QScrollBar__enterEvent_pr10QScrollBarr6QEvent)(XiQScrollBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QScrollBar__leaveEvent_pr10QScrollBarr6QEvent)(XiQScrollBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QScrollBar__resizeEvent_pr10QScrollBarr12QResizeEvent)(XiQScrollBar* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QScrollBar__closeEvent_pr10QScrollBarr6QEvent)(XiQScrollBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QScrollBar__contextMenuEvent_pr10QScrollBarr17QContextMenuEvent)(XiQScrollBar* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QScrollBar__showEvent_pr10QScrollBarr6QEvent)(XiQScrollBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QScrollBar__hideEvent_pr10QScrollBarr6QEvent)(XiQScrollBar* self, XiQEvent* e);
ETA_EXPORT void ETA(QScrollBar__defaultEvent_pr10QScrollBarr6QEvent)(XiQScrollBar* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QScrollBar__toPixmap_r7QPixmapr10QScrollBar)(XiQScrollBar* self);
ETA_EXPORT XiQWidget* ETA(QScrollBar__toWidget_r7QWidgetr10QScrollBar)(XiQScrollBar* self);

using XiQScrollBarDerived = XiQScrollBar_vtable;

ETA_EXPORT XiQScrollBarDerived* ETA(QScrollBar__extend_r17QScrollBarDerived)();
ETA_EXPORT void ETA(QScrollBar__downcast_pr10QScrollBarr17QScrollBarDerived)(XiQScrollBar* self, XiQScrollBarDerived* derived);

ETA_EXPORT void ETA(QScrollBar__override__orientation_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setOrientation_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__getValue_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setValue_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setRange_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__minimum_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setMinimum_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__maximum_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setMaximum_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__pageStep_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setPageStep_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__sliderMoved_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__addSliderListener_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__show_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__hide_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__raise_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__lower_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__close_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__isEnabled_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setEnabled_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setLayout_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__isWindowModified_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setWindowModified_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__windowTitle_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setWindowTitle_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__windowIcon_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setWindowIcon_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__isActiveWindow_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__activateWindow_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__isMinimized_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__isMaximized_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__isFullScreen_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__showMinimized_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__showMaximized_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__showFullScreen_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__showNormal_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__update_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__repaint_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setMinimumSize_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__minimumSize_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setMaximumSize_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__maximumSize_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setFixedSize_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__resize_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__adjustSize_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__pos_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__move_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__sizeHint_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__minimumSizeHint_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__mapFrom_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__mapFromGlobal_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__mapFromParent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__mapTo_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__mapToGlobal_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__mapToParent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setFont_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__font_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__styleSheet_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setStyleSheet_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__focusPolicy_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setFocusPolicy_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setFocus_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__clearFocus_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__hasFocus_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__toolTip_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setToolTip_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__whatsThis_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setWhatsThis_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__hasMouseTracking_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__setMouseTracking_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__addAction_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__paintEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__mousePressEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__mouseReleaseEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__mouseDoubleClickEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__mouseMoveEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__wheelEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__keyPressEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__keyReleaseEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__enterEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__leaveEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__resizeEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__closeEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__contextMenuEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__showEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__hideEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__defaultEvent_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__toPixmap_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);
ETA_EXPORT void ETA(QScrollBar__override__toWidget_pr17QScrollBarDerivedai)(XiQScrollBarDerived* derived, void* name);

ETA_EXPORT XiQScrollBar* ETA(qscrollbar__alloc_r10QScrollBar)();

inline QScrollBar* fromXi(XiQScrollBar* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQScrollBar_vtable: public XiQAbstractSlider_vtable
{
    void* reserved;
};

inline XiQScrollBar_vtable* XiQScrollBar::vtable() {
    return static_cast<XiQScrollBar_vtable*>(vptr);
}

extern XiQScrollBar_vtable ETA(_vt_QScrollBar);
extern int ETA(_size_QScrollBar);
ETA_EXPORT void ETA(_init_QScrollBar)() __attribute__((constructor));


ETA_EXPORT XiQScrollBar* ETA(qscrollbar_r10QScrollBarr11Orientation)(XiOrientation* o);
typedef QSlider::TickPosition SliderTickPosition;


struct XiSliderTickPosition_vtable;
struct XiSliderTickPosition: public Xiobj
{
    XiSliderTickPosition_vtable* vtable();
    XiSliderTickPosition();
    SliderTickPosition value;
    SliderTickPosition* impl() {
        if (!initialized) 
            new (this) XiSliderTickPosition();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiSliderTickPosition* me = static_cast<XiSliderTickPosition*>(mePtr);
        if (me->initialized)
            me->~XiSliderTickPosition();
    }

};

ETA_EXPORT XiSliderTickPosition* ETA(TicksBothSides_r18SliderTickPosition)();
ETA_EXPORT XiSliderTickPosition* ETA(TicksAbove_r18SliderTickPosition)();
ETA_EXPORT XiSliderTickPosition* ETA(TicksBelow_r18SliderTickPosition)();

using XiSliderTickPositionDerived = XiSliderTickPosition_vtable;

ETA_EXPORT XiSliderTickPositionDerived* ETA(SliderTickPosition__extend_r25SliderTickPositionDerived)();
ETA_EXPORT void ETA(SliderTickPosition__downcast_pr18SliderTickPositionr25SliderTickPositionDerived)(XiSliderTickPosition* self, XiSliderTickPositionDerived* derived);


ETA_EXPORT XiSliderTickPosition* ETA(slidertickposition__alloc_r18SliderTickPosition)();

inline XiSliderTickPosition* toXi(const SliderTickPosition& orig) {
    if (orig == QSlider::TicksBothSides)
        return ETA(TicksBothSides_r18SliderTickPosition)();
    if (orig == QSlider::TicksAbove)
        return ETA(TicksAbove_r18SliderTickPosition)();
    if (orig == QSlider::TicksBelow)
        return ETA(TicksBelow_r18SliderTickPosition)();
    XiSliderTickPosition* r = gcNew<XiSliderTickPosition>();
    r->value = orig;
    return r;
}

inline SliderTickPosition fromXi(XiSliderTickPosition* wrapped) {
    return *wrapped->impl();
}

struct XiSliderTickPosition_vtable: public Xivtable
{
    void* reserved;
};

inline XiSliderTickPosition_vtable* XiSliderTickPosition::vtable() {
    return static_cast<XiSliderTickPosition_vtable*>(vptr);
}

extern XiSliderTickPosition_vtable ETA(_vt_SliderTickPosition);
extern int ETA(_size_SliderTickPosition);
ETA_EXPORT void ETA(_init_SliderTickPosition)() __attribute__((constructor));




struct XiQSlider_vtable;
struct XiQSlider: public XiQAbstractSlider
{
    XiQSlider_vtable* vtable();
    XiQSlider();
    QSlider* impl();
    static void invokeDtor(void* mePtr, void*);
    static void __classOp(ClassOp op, void* memory);
    typedef QSlider wrappedType;
    wrappedType* getImpl() {
        return static_cast<wrappedType*>(XiQWidget::getImpl());
    }

    void createImpl() {
        setObject(new Proxy<wrappedType>());
    }
    static void defaultEvent(XiQWidget* __thisPtr, XiQEvent* e);
    static int tickInterval(XiQSlider* __thisPtr);
    static void setTickInterval(XiQSlider* __thisPtr, int param0);
    static void setTickPosition(XiQSlider* __thisPtr, XiSliderTickPosition* param0);
    static XiSliderTickPosition* tickPosition(XiQSlider* __thisPtr);
};

ETA_EXPORT XiQAbstractSlider* ETA(QSlider__to__QAbstractSlider_r15QAbstractSliderr7QSlider)(XiQSlider* self);
ETA_EXPORT XiQWidget* ETA(QSlider__to__QWidget_r7QWidgetr7QSlider)(XiQSlider* self);
ETA_EXPORT XiQPaintDevice* ETA(QSlider__to__QPaintDevice_r12QPaintDevicer7QSlider)(XiQSlider* self);
ETA_EXPORT int ETA(QSlider__tickInterval_ir7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setTickInterval_pr7QSlideri)(XiQSlider* self, int param0);
ETA_EXPORT void ETA(QSlider__setTickPosition_pr7QSliderr18SliderTickPosition)(XiQSlider* self, XiSliderTickPosition* param0);
ETA_EXPORT XiSliderTickPosition* ETA(QSlider__tickPosition_r18SliderTickPositionr7QSlider)(XiQSlider* self);
ETA_EXPORT XiOrientation* ETA(QSlider__orientation_r11Orientationr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setOrientation_pr7QSliderr11Orientation)(XiQSlider* self, XiOrientation* param0);
ETA_EXPORT int ETA(QSlider__getValue_ir7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setValue_pr7QSlideri)(XiQSlider* self, int param0);
ETA_EXPORT void ETA(QSlider__setRange_pr7QSliderii)(XiQSlider* self, int min, int max);
ETA_EXPORT int ETA(QSlider__minimum_ir7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setMinimum_pr7QSlideri)(XiQSlider* self, int param0);
ETA_EXPORT int ETA(QSlider__maximum_ir7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setMaximum_pr7QSlideri)(XiQSlider* self, int param0);
ETA_EXPORT int ETA(QSlider__pageStep_ir7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setPageStep_pr7QSlideri)(XiQSlider* self, int param0);
ETA_EXPORT void ETA(QSlider__sliderMoved_pr7QSlideri)(XiQSlider* self, int param0);
ETA_EXPORT void ETA(QSlider__addSliderListener_pr7QSliderr14SliderListener)(XiQSlider* self, XiSliderListener* l);
ETA_EXPORT void ETA(QSlider__show_pr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__hide_pr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__raise_pr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__lower_pr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__close_pr7QSlider)(XiQSlider* self);
ETA_EXPORT bool ETA(QSlider__isEnabled_br7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setEnabled_pr7QSliderb)(XiQSlider* self, bool param0);
ETA_EXPORT void ETA(QSlider__setLayout_pr7QSliderr7QLayout)(XiQSlider* self, XiQLayout* layout);
ETA_EXPORT bool ETA(QSlider__isWindowModified_br7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setWindowModified_pr7QSliderb)(XiQSlider* self, bool param0);
ETA_EXPORT XiQString* ETA(QSlider__windowTitle_r7QStringr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setWindowTitle_pr7QSliderr7QString)(XiQSlider* self, XiQString* param0);
ETA_EXPORT XiQIcon* ETA(QSlider__windowIcon_r5QIconr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setWindowIcon_pr7QSliderr5QIcon)(XiQSlider* self, XiQIcon* param0);
ETA_EXPORT bool ETA(QSlider__isActiveWindow_br7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__activateWindow_pr7QSlider)(XiQSlider* self);
ETA_EXPORT bool ETA(QSlider__isMinimized_br7QSlider)(XiQSlider* self);
ETA_EXPORT bool ETA(QSlider__isMaximized_br7QSlider)(XiQSlider* self);
ETA_EXPORT bool ETA(QSlider__isFullScreen_br7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__showMinimized_pr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__showMaximized_pr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__showFullScreen_pr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__showNormal_pr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__update_pr7QSliderr5QRect)(XiQSlider* self, XiQRect* r);
ETA_EXPORT void ETA(QSlider__repaint_pr7QSliderr5QRect)(XiQSlider* self, XiQRect* r);
ETA_EXPORT void ETA(QSlider__setMinimumSize_pr7QSliderr5QSize)(XiQSlider* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QSlider__minimumSize_r5QSizer7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setMaximumSize_pr7QSliderr5QSize)(XiQSlider* self, XiQSize* param0);
ETA_EXPORT XiQSize* ETA(QSlider__maximumSize_r5QSizer7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setFixedSize_pr7QSliderr5QSize)(XiQSlider* self, XiQSize* param0);
ETA_EXPORT void ETA(QSlider__resize_pr7QSliderr5QSize)(XiQSlider* self, XiQSize* s);
ETA_EXPORT void ETA(QSlider__adjustSize_pr7QSlider)(XiQSlider* self);
ETA_EXPORT XiQPoint* ETA(QSlider__pos_r6QPointr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__move_pr7QSliderr6QPoint)(XiQSlider* self, XiQPoint* p);
ETA_EXPORT XiQSize* ETA(QSlider__sizeHint_r5QSizer7QSlider)(XiQSlider* self);
ETA_EXPORT XiQSize* ETA(QSlider__minimumSizeHint_r5QSizer7QSlider)(XiQSlider* self);
ETA_EXPORT XiQPoint* ETA(QSlider__mapFrom_r6QPointr7QSliderr7QWidgetr6QPoint)(XiQSlider* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QSlider__mapFromGlobal_r6QPointr7QSliderr6QPoint)(XiQSlider* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QSlider__mapFromParent_r6QPointr7QSliderr6QPoint)(XiQSlider* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QSlider__mapTo_r6QPointr7QSliderr7QWidgetr6QPoint)(XiQSlider* self, XiQWidget* w, XiQPoint* param1);
ETA_EXPORT XiQPoint* ETA(QSlider__mapToGlobal_r6QPointr7QSliderr6QPoint)(XiQSlider* self, XiQPoint* param0);
ETA_EXPORT XiQPoint* ETA(QSlider__mapToParent_r6QPointr7QSliderr6QPoint)(XiQSlider* self, XiQPoint* param0);
ETA_EXPORT void ETA(QSlider__setFont_pr7QSliderr5QFont)(XiQSlider* self, XiQFont* f);
ETA_EXPORT XiQFont* ETA(QSlider__font_r5QFontr7QSlider)(XiQSlider* self);
ETA_EXPORT XiQString* ETA(QSlider__styleSheet_r7QStringr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setStyleSheet_pr7QSliderr7QString)(XiQSlider* self, XiQString* param0);
ETA_EXPORT XiFocusPolicy* ETA(QSlider__focusPolicy_r11FocusPolicyr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setFocusPolicy_pr7QSliderr11FocusPolicy)(XiQSlider* self, XiFocusPolicy* param0);
ETA_EXPORT void ETA(QSlider__setFocus_pr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__clearFocus_pr7QSlider)(XiQSlider* self);
ETA_EXPORT bool ETA(QSlider__hasFocus_br7QSlider)(XiQSlider* self);
ETA_EXPORT XiQString* ETA(QSlider__toolTip_r7QStringr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setToolTip_pr7QSliderr7QString)(XiQSlider* self, XiQString* param0);
ETA_EXPORT XiQString* ETA(QSlider__whatsThis_r7QStringr7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setWhatsThis_pr7QSliderr7QString)(XiQSlider* self, XiQString* param0);
ETA_EXPORT bool ETA(QSlider__hasMouseTracking_br7QSlider)(XiQSlider* self);
ETA_EXPORT void ETA(QSlider__setMouseTracking_pr7QSliderb)(XiQSlider* self, bool param0);
ETA_EXPORT void ETA(QSlider__addAction_pr7QSliderr7QAction)(XiQSlider* self, XiQAction* action);
ETA_EXPORT void ETA(QSlider__paintEvent_pr7QSliderr11QPaintEvent)(XiQSlider* self, XiQPaintEvent* pe);
ETA_EXPORT void ETA(QSlider__mousePressEvent_pr7QSliderr11QMouseEvent)(XiQSlider* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QSlider__mouseReleaseEvent_pr7QSliderr11QMouseEvent)(XiQSlider* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QSlider__mouseDoubleClickEvent_pr7QSliderr11QMouseEvent)(XiQSlider* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QSlider__mouseMoveEvent_pr7QSliderr11QMouseEvent)(XiQSlider* self, XiQMouseEvent* e);
ETA_EXPORT void ETA(QSlider__wheelEvent_pr7QSliderr11QWheelEvent)(XiQSlider* self, XiQWheelEvent* e);
ETA_EXPORT void ETA(QSlider__keyPressEvent_pr7QSliderr9QKeyEvent)(XiQSlider* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QSlider__keyReleaseEvent_pr7QSliderr9QKeyEvent)(XiQSlider* self, XiQKeyEvent* e);
ETA_EXPORT void ETA(QSlider__enterEvent_pr7QSliderr6QEvent)(XiQSlider* self, XiQEvent* e);
ETA_EXPORT void ETA(QSlider__leaveEvent_pr7QSliderr6QEvent)(XiQSlider* self, XiQEvent* e);
ETA_EXPORT void ETA(QSlider__resizeEvent_pr7QSliderr12QResizeEvent)(XiQSlider* self, XiQResizeEvent* e);
ETA_EXPORT void ETA(QSlider__closeEvent_pr7QSliderr6QEvent)(XiQSlider* self, XiQEvent* e);
ETA_EXPORT void ETA(QSlider__contextMenuEvent_pr7QSliderr17QContextMenuEvent)(XiQSlider* self, XiQContextMenuEvent* e);
ETA_EXPORT void ETA(QSlider__showEvent_pr7QSliderr6QEvent)(XiQSlider* self, XiQEvent* e);
ETA_EXPORT void ETA(QSlider__hideEvent_pr7QSliderr6QEvent)(XiQSlider* self, XiQEvent* e);
ETA_EXPORT void ETA(QSlider__defaultEvent_pr7QSliderr6QEvent)(XiQSlider* self, XiQEvent* pe);
ETA_EXPORT XiQPixmap* ETA(QSlider__toPixmap_r7QPixmapr7QSlider)(XiQSlider* self);
ETA_EXPORT XiQWidget* ETA(QSlider__toWidget_r7QWidgetr7QSlider)(XiQSlider* self);

using XiQSliderDerived = XiQSlider_vtable;

ETA_EXPORT XiQSliderDerived* ETA(QSlider__extend_r14QSliderDerived)();
ETA_EXPORT void ETA(QSlider__downcast_pr7QSliderr14QSliderDerived)(XiQSlider* self, XiQSliderDerived* derived);

ETA_EXPORT void ETA(QSlider__override__tickInterval_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setTickInterval_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setTickPosition_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__tickPosition_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__orientation_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setOrientation_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__getValue_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setValue_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setRange_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__minimum_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setMinimum_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__maximum_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setMaximum_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__pageStep_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setPageStep_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__sliderMoved_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__addSliderListener_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__show_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__hide_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__raise_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__lower_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__close_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__isEnabled_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setEnabled_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setLayout_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__isWindowModified_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setWindowModified_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__windowTitle_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setWindowTitle_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__windowIcon_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setWindowIcon_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__isActiveWindow_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__activateWindow_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__isMinimized_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__isMaximized_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__isFullScreen_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__showMinimized_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__showMaximized_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__showFullScreen_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__showNormal_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__update_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__repaint_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setMinimumSize_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__minimumSize_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setMaximumSize_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__maximumSize_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setFixedSize_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__resize_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__adjustSize_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__pos_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__move_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__sizeHint_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__minimumSizeHint_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__mapFrom_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__mapFromGlobal_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__mapFromParent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__mapTo_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__mapToGlobal_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__mapToParent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setFont_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__font_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__styleSheet_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setStyleSheet_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__focusPolicy_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setFocusPolicy_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setFocus_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__clearFocus_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__hasFocus_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__toolTip_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setToolTip_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__whatsThis_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setWhatsThis_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__hasMouseTracking_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__setMouseTracking_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__addAction_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__paintEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__mousePressEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__mouseReleaseEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__mouseDoubleClickEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__mouseMoveEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__wheelEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__keyPressEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__keyReleaseEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__enterEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__leaveEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__resizeEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__closeEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__contextMenuEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__showEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__hideEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__defaultEvent_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__toPixmap_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);
ETA_EXPORT void ETA(QSlider__override__toWidget_pr14QSliderDerivedai)(XiQSliderDerived* derived, void* name);

ETA_EXPORT XiQSlider* ETA(qslider__alloc_r7QSlider)();

inline QSlider* fromXi(XiQSlider* wrapped) {
    return wrapped ? wrapped->impl() : 0;
}

struct XiQSlider_vtable: public XiQAbstractSlider_vtable
{
    void* reserved;
    int (*tickInterval)(XiQSlider*);
    void (*setTickInterval)(XiQSlider*, int);
    void (*setTickPosition)(XiQSlider*, XiSliderTickPosition*);
    XiSliderTickPosition* (*tickPosition)(XiQSlider*);
};

inline XiQSlider_vtable* XiQSlider::vtable() {
    return static_cast<XiQSlider_vtable*>(vptr);
}

extern XiQSlider_vtable ETA(_vt_QSlider);
extern int ETA(_size_QSlider);
ETA_EXPORT void ETA(_init_QSlider)() __attribute__((constructor));


ETA_EXPORT XiQSlider* ETA(qslider_r7QSlider)();


struct XiStandardIcon_vtable;
struct XiStandardIcon: public Xiobj
{
    XiStandardIcon_vtable* vtable();
    XiStandardIcon();
    StandardIcon value;
    StandardIcon* impl() {
        if (!initialized) 
            new (this) XiStandardIcon();
        return &value;
    }

    static void invokeDtor(void* mePtr, void*) {
        XiStandardIcon* me = static_cast<XiStandardIcon*>(mePtr);
        if (me->initialized)
            me->~XiStandardIcon();
    }

};

ETA_EXPORT XiStandardIcon* ETA(TitleBarMenuButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(TitleBarMinButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(TitleBarMaxButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(TitleBarCloseButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(TitleBarNormalButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(TitleBarShadeButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(TitleBarUnshadeButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(TitleBarContextHelpButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DockWidgetCloseButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MessageBoxInformation_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MessageBoxWarning_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MessageBoxCritical_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MessageBoxQuestion_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DesktopIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(TrashIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(ComputerIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DriveFDIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DriveHDIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DriveCDIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DriveDVDIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DriveNetIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DirOpenIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DirClosedIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DirLinkIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(FileIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(FileLinkIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(ToolBarHorizontalExtensionButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(ToolBarVerticalExtensionButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(FileDialogStart_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(FileDialogEnd_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(FileDialogToParent_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(FileDialogNewFolder_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(FileDialogDetailedView_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(FileDialogInfoView_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(FileDialogContentsView_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(FileDialogListView_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(FileDialogBack_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DirIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DialogOkButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DialogCancelButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DialogHelpButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DialogOpenButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DialogSaveButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DialogCloseButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DialogApplyButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DialogResetButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DialogDiscardButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DialogYesButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DialogNoButton_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(ArrowUp_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(ArrowDown_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(ArrowLeft_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(ArrowRight_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(ArrowBack_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(ArrowForward_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(DirHomeIcon_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(CommandLink_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(VistaShield_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(BrowserReload_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(BrowserStop_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MediaPlay_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MediaStop_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MediaPause_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MediaSkipForward_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MediaSkipBackward_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MediaSeekForward_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MediaSeekBackward_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MediaVolume_r12StandardIcon)();
ETA_EXPORT XiStandardIcon* ETA(MediaVolumeMuted_r12StandardIcon)();

using XiStandardIconDerived = XiStandardIcon_vtable;

ETA_EXPORT XiStandardIconDerived* ETA(StandardIcon__extend_r19StandardIconDerived)();
ETA_EXPORT void ETA(StandardIcon__downcast_pr12StandardIconr19StandardIconDerived)(XiStandardIcon* self, XiStandardIconDerived* derived);


ETA_EXPORT XiStandardIcon* ETA(standardicon__alloc_r12StandardIcon)();

inline XiStandardIcon* toXi(const StandardIcon& orig) {
    if (orig == QStyle::SP_TitleBarMenuButton)
        return ETA(TitleBarMenuButton_r12StandardIcon)();
    if (orig == QStyle::SP_TitleBarMinButton)
        return ETA(TitleBarMinButton_r12StandardIcon)();
    if (orig == QStyle::SP_TitleBarMaxButton)
        return ETA(TitleBarMaxButton_r12StandardIcon)();
    if (orig == QStyle::SP_TitleBarCloseButton)
        return ETA(TitleBarCloseButton_r12StandardIcon)();
    if (orig == QStyle::SP_TitleBarNormalButton)
        return ETA(TitleBarNormalButton_r12StandardIcon)();
    if (orig == QStyle::SP_TitleBarShadeButton)
        return ETA(TitleBarShadeButton_r12StandardIcon)();
    if (orig == QStyle::SP_TitleBarUnshadeButton)
        return ETA(TitleBarUnshadeButton_r12StandardIcon)();
    if (orig == QStyle::SP_TitleBarContextHelpButton)
        return ETA(TitleBarContextHelpButton_r12StandardIcon)();
    if (orig == QStyle::SP_DockWidgetCloseButton)
        return ETA(DockWidgetCloseButton_r12StandardIcon)();
    if (orig == QStyle::SP_MessageBoxInformation)
        return ETA(MessageBoxInformation_r12StandardIcon)();
    if (orig == QStyle::SP_MessageBoxWarning)
        return ETA(MessageBoxWarning_r12StandardIcon)();
    if (orig == QStyle::SP_MessageBoxCritical)
        return ETA(MessageBoxCritical_r12StandardIcon)();
    if (orig == QStyle::SP_MessageBoxQuestion)
        return ETA(MessageBoxQuestion_r12StandardIcon)();
    if (orig == QStyle::SP_DesktopIcon)
        return ETA(DesktopIcon_r12StandardIcon)();
    if (orig == QStyle::SP_TrashIcon)
        return ETA(TrashIcon_r12StandardIcon)();
    if (orig == QStyle::SP_ComputerIcon)
        return ETA(ComputerIcon_r12StandardIcon)();
    if (orig == QStyle::SP_DriveFDIcon)
        return ETA(DriveFDIcon_r12StandardIcon)();
    if (orig == QStyle::SP_DriveHDIcon)
        return ETA(DriveHDIcon_r12StandardIcon)();
    if (orig == QStyle::SP_DriveCDIcon)
        return ETA(DriveCDIcon_r12StandardIcon)();
    if (orig == QStyle::SP_DriveDVDIcon)
        return ETA(DriveDVDIcon_r12StandardIcon)();
    if (orig == QStyle::SP_DriveNetIcon)
        return ETA(DriveNetIcon_r12StandardIcon)();
    if (orig == QStyle::SP_DirOpenIcon)
        return ETA(DirOpenIcon_r12StandardIcon)();
    if (orig == QStyle::SP_DirClosedIcon)
        return ETA(DirClosedIcon_r12StandardIcon)();
    if (orig == QStyle::SP_DirLinkIcon)
        return ETA(DirLinkIcon_r12StandardIcon)();
    if (orig == QStyle::SP_FileIcon)
        return ETA(FileIcon_r12StandardIcon)();
    if (orig == QStyle::SP_FileLinkIcon)
        return ETA(FileLinkIcon_r12StandardIcon)();
    if (orig == QStyle::SP_ToolBarHorizontalExtensionButton)
        return ETA(ToolBarHorizontalExtensionButton_r12StandardIcon)();
    if (orig == QStyle::SP_ToolBarVerticalExtensionButton)
        return ETA(ToolBarVerticalExtensionButton_r12StandardIcon)();
    if (orig == QStyle::SP_FileDialogStart)
        return ETA(FileDialogStart_r12StandardIcon)();
    if (orig == QStyle::SP_FileDialogEnd)
        return ETA(FileDialogEnd_r12StandardIcon)();
    if (orig == QStyle::SP_FileDialogToParent)
        return ETA(FileDialogToParent_r12StandardIcon)();
    if (orig == QStyle::SP_FileDialogNewFolder)
        return ETA(FileDialogNewFolder_r12StandardIcon)();
    if (orig == QStyle::SP_FileDialogDetailedView)
        return ETA(FileDialogDetailedView_r12StandardIcon)();
    if (orig == QStyle::SP_FileDialogInfoView)
        return ETA(FileDialogInfoView_r12StandardIcon)();
    if (orig == QStyle::SP_FileDialogContentsView)
        return ETA(FileDialogContentsView_r12StandardIcon)();
    if (orig == QStyle::SP_FileDialogListView)
        return ETA(FileDialogListView_r12StandardIcon)();
    if (orig == QStyle::SP_FileDialogBack)
        return ETA(FileDialogBack_r12StandardIcon)();
    if (orig == QStyle::SP_DirIcon)
        return ETA(DirIcon_r12StandardIcon)();
    if (orig == QStyle::SP_DialogOkButton)
        return ETA(DialogOkButton_r12StandardIcon)();
    if (orig == QStyle::SP_DialogCancelButton)
        return ETA(DialogCancelButton_r12StandardIcon)();
    if (orig == QStyle::SP_DialogHelpButton)
        return ETA(DialogHelpButton_r12StandardIcon)();
    if (orig == QStyle::SP_DialogOpenButton)
        return ETA(DialogOpenButton_r12StandardIcon)();
    if (orig == QStyle::SP_DialogSaveButton)
        return ETA(DialogSaveButton_r12StandardIcon)();
    if (orig == QStyle::SP_DialogCloseButton)
        return ETA(DialogCloseButton_r12StandardIcon)();
    if (orig == QStyle::SP_DialogApplyButton)
        return ETA(DialogApplyButton_r12StandardIcon)();
    if (orig == QStyle::SP_DialogResetButton)
        return ETA(DialogResetButton_r12StandardIcon)();
    if (orig == QStyle::SP_DialogDiscardButton)
        return ETA(DialogDiscardButton_r12StandardIcon)();
    if (orig == QStyle::SP_DialogYesButton)
        return ETA(DialogYesButton_r12StandardIcon)();
    if (orig == QStyle::SP_DialogNoButton)
        return ETA(DialogNoButton_r12StandardIcon)();
    if (orig == QStyle::SP_ArrowUp)
        return ETA(ArrowUp_r12StandardIcon)();
    if (orig == QStyle::SP_ArrowDown)
        return ETA(ArrowDown_r12StandardIcon)();
    if (orig == QStyle::SP_ArrowLeft)
        return ETA(ArrowLeft_r12StandardIcon)();
    if (orig == QStyle::SP_ArrowRight)
        return ETA(ArrowRight_r12StandardIcon)();
    if (orig == QStyle::SP_ArrowBack)
        return ETA(ArrowBack_r12StandardIcon)();
    if (orig == QStyle::SP_ArrowForward)
        return ETA(ArrowForward_r12StandardIcon)();
    if (orig == QStyle::SP_DirHomeIcon)
        return ETA(DirHomeIcon_r12StandardIcon)();
    if (orig == QStyle::SP_CommandLink)
        return ETA(CommandLink_r12StandardIcon)();
    if (orig == QStyle::SP_VistaShield)
        return ETA(VistaShield_r12StandardIcon)();
    if (orig == QStyle::SP_BrowserReload)
        return ETA(BrowserReload_r12StandardIcon)();
    if (orig == QStyle::SP_BrowserStop)
        return ETA(BrowserStop_r12StandardIcon)();
    if (orig == QStyle::SP_MediaPlay)
        return ETA(MediaPlay_r12StandardIcon)();
    if (orig == QStyle::SP_MediaStop)
        return ETA(MediaStop_r12StandardIcon)();
    if (orig == QStyle::SP_MediaPause)
        return ETA(MediaPause_r12StandardIcon)();
    if (orig == QStyle::SP_MediaSkipForward)
        return ETA(MediaSkipForward_r12StandardIcon)();
    if (orig == QStyle::SP_MediaSkipBackward)
        return ETA(MediaSkipBackward_r12StandardIcon)();
    if (orig == QStyle::SP_MediaSeekForward)
        return ETA(MediaSeekForward_r12StandardIcon)();
    if (orig == QStyle::SP_MediaSeekBackward)
        return ETA(MediaSeekBackward_r12StandardIcon)();
    if (orig == QStyle::SP_MediaVolume)
        return ETA(MediaVolume_r12StandardIcon)();
    if (orig == QStyle::SP_MediaVolumeMuted)
        return ETA(MediaVolumeMuted_r12StandardIcon)();
    XiStandardIcon* r = gcNew<XiStandardIcon>();
    r->value = orig;
    return r;
}

inline StandardIcon fromXi(XiStandardIcon* wrapped) {
    return *wrapped->impl();
}

struct XiStandardIcon_vtable: public Xivtable
{
    void* reserved;
};

inline XiStandardIcon_vtable* XiStandardIcon::vtable() {
    return static_cast<XiStandardIcon_vtable*>(vptr);
}

extern XiStandardIcon_vtable ETA(_vt_StandardIcon);
extern int ETA(_size_StandardIcon);
ETA_EXPORT void ETA(_init_StandardIcon)() __attribute__((constructor));


ETA_EXPORT int ETA(ButtonOk_i)();
ETA_EXPORT int ETA(ButtonSave_i)();
ETA_EXPORT int ETA(ButtonSaveAll_i)();
ETA_EXPORT int ETA(ButtonOpen_i)();
ETA_EXPORT int ETA(ButtonYes_i)();
ETA_EXPORT int ETA(ButtonYesToAll_i)();
ETA_EXPORT int ETA(ButtonNo_i)();
ETA_EXPORT int ETA(ButtonNoToAll_i)();
ETA_EXPORT int ETA(ButtonAbort_i)();
ETA_EXPORT int ETA(ButtonRetry_i)();
ETA_EXPORT int ETA(ButtonIgnore_i)();
ETA_EXPORT int ETA(ButtonClose_i)();
ETA_EXPORT int ETA(ButtonCancel_i)();
ETA_EXPORT int ETA(ButtonDiscard_i)();
ETA_EXPORT int ETA(ButtonHelp_i)();
ETA_EXPORT int ETA(ButtonApply_i)();
ETA_EXPORT int ETA(ButtonReset_i)();
ETA_EXPORT int ETA(ButtonRestoreDefaults_i)();
ETA_EXPORT int ETA(qmessageBoxCritical_ir7QWidgetr7QStringr7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons);
ETA_EXPORT int ETA(qmessageBoxInformation_ir7QWidgetr7QStringr7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons);
ETA_EXPORT int ETA(qmessageBoxWarning_ir7QWidgetr7QStringr7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons);
ETA_EXPORT int ETA(qmessageBoxQuestion_ir7QWidgetr7QStringr7QStringi)(XiQWidget* parent, XiQString* title, XiQString* text, int buttons);
ETA_EXPORT XiQWidget* ETA(NO__WIDGET_r7QWidget)();

