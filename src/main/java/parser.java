
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.internal.markers.*;
import java.util.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return SymbolTable.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\005\004\000\002\005\002\000\002\006\005\000" +
    "\002\007\004\000\002\007\002\000\002\010\003\000\002" +
    "\010\004\000\002\013\005\000\002\013\007\000\002\011" +
    "\010\000\002\011\006\000\002\011\007\000\002\011\005" +
    "\000\002\043\005\000\002\024\003\000\002\024\005\000" +
    "\002\027\003\000\002\027\004\000\002\030\003\000\002" +
    "\030\003\000\002\030\004\000\002\030\004\000\002\030" +
    "\004\000\002\030\004\000\002\020\006\000\002\020\010" +
    "\000\002\021\007\000\002\021\005\000\002\026\003\000" +
    "\002\026\003\000\002\025\005\000\002\025\006\000\002" +
    "\025\004\000\002\025\005\000\002\032\006\000\002\032" +
    "\005\000\002\031\002\000\002\031\004\000\002\045\003" +
    "\000\002\045\002\000\002\022\004\000\002\022\005\000" +
    "\002\044\005\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\042\003\000\002\042" +
    "\005\000\002\034\005\000\002\037\005\000\002\035\003" +
    "\000\002\035\005\000\002\036\006\000\002\036\005\000" +
    "\002\036\006\000\002\012\004\000\002\014\003\000\002" +
    "\014\005\000\002\023\005\000\002\023\004\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\005\000" +
    "\002\023\006\000\002\023\003\000\002\023\005\000\002" +
    "\023\006\000\002\040\003\000\002\040\005\000\002\050" +
    "\006\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\033\006\000\002\033\005\000\002" +
    "\047\003\000\002\047\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\003\000\002\016\005" +
    "\000\002\016\005" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\006\055\005\056\006\001\002\000\004\002" +
    "\271\001\002\000\006\002\ufffd\004\ufffd\001\002\000\010" +
    "\002\ufffa\004\ufffa\040\011\001\002\000\006\002\ufff7\004" +
    "\ufff7\001\002\000\010\002\ufffa\004\ufffa\040\011\001\002" +
    "\000\004\004\013\001\002\000\004\002\uffff\001\002\000" +
    "\012\002\uffd4\004\uffd4\040\uffd4\052\014\001\002\000\024" +
    "\002\uffd5\004\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\047\uffd5\053\uffd5\001\002\000\010\002\ufff9\004\ufff9" +
    "\040\ufff9\001\002\000\006\002\ufffb\004\ufffb\001\002\000" +
    "\006\002\ufffc\004\024\001\002\000\004\046\066\001\002" +
    "\000\006\002\ufff6\004\ufff6\001\002\000\010\002\uffd4\004" +
    "\uffd4\052\014\001\002\000\006\002\ufff8\004\ufff8\001\002" +
    "\000\006\044\025\050\026\001\002\000\006\004\050\045" +
    "\047\001\002\000\006\012\031\013\027\001\002\000\036" +
    "\002\uff97\004\uff97\031\uff97\034\uff97\035\uff97\036\uff97\037" +
    "\uff97\042\uff97\045\uff97\046\uff97\047\uff97\051\uff97\052\uff97" +
    "\053\uff97\001\002\000\014\002\ufff4\004\ufff4\031\035\042" +
    "\036\052\ufff4\001\002\000\036\002\uff96\004\uff96\031\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\042\uff96\045\uff96\046" +
    "\uff96\047\uff96\051\uff96\052\uff96\053\uff96\001\002\000\022" +
    "\002\uff95\004\uff95\031\uff95\042\033\045\uff95\046\uff95\051" +
    "\uff95\052\uff95\001\002\000\004\043\034\001\002\000\036" +
    "\002\uff94\004\uff94\031\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\042\uff94\045\uff94\046\uff94\047\uff94\051\uff94\052\uff94" +
    "\053\uff94\001\002\000\012\006\040\007\043\010\042\011" +
    "\044\001\002\000\004\043\037\001\002\000\036\002\uff93" +
    "\004\uff93\031\uff93\034\uff93\035\uff93\036\uff93\037\uff93\042" +
    "\uff93\045\uff93\046\uff93\047\uff93\051\uff93\052\uff93\053\uff93" +
    "\001\002\000\070\002\uffac\004\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\023\uffac\024\uffac\025\uffac" +
    "\026\uffac\027\uffac\030\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\036\uffac\037\uffac\043\uffac\045\uffac\046\uffac\047\uffac" +
    "\051\uffac\052\uffac\053\uffac\001\002\000\010\002\ufff3\004" +
    "\ufff3\052\ufff3\001\002\000\070\002\uffaa\004\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\043\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\051\uffaa\052\uffaa\053\uffaa\001\002\000\070" +
    "\002\uffad\004\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\043\uffad\045\uffad\046\uffad\047\uffad\051\uffad\052\uffad" +
    "\053\uffad\001\002\000\070\002\uffab\004\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\032\uffab\033\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\043\uffab\045\uffab\046\uffab" +
    "\047\uffab\051\uffab\052\uffab\053\uffab\001\002\000\004\045" +
    "\062\001\002\000\006\045\uffed\051\060\001\002\000\012" +
    "\002\uffef\004\uffef\046\uffef\050\053\001\002\000\004\050" +
    "\051\001\002\000\006\012\031\013\027\001\002\000\010" +
    "\042\036\045\uffee\051\uffee\001\002\000\006\012\031\013" +
    "\027\001\002\000\012\002\ufff0\004\ufff0\046\ufff0\051\056" +
    "\001\002\000\014\002\uffc2\004\uffc2\042\036\046\uffc2\051" +
    "\uffc2\001\002\000\006\012\031\013\027\001\002\000\014" +
    "\002\uffc1\004\uffc1\042\036\046\uffc1\051\uffc1\001\002\000" +
    "\004\004\050\001\002\000\004\045\uffec\001\002\000\012" +
    "\002\ufff1\004\ufff1\046\ufff1\050\063\001\002\000\006\012" +
    "\031\013\027\001\002\000\012\002\ufff2\004\ufff2\046\ufff2" +
    "\051\056\001\002\000\006\002\ufff5\004\ufff5\001\002\000" +
    "\016\004\106\034\111\036\105\037\076\047\101\053\071" +
    "\001\002\000\006\002\uffc3\004\uffc3\001\002\000\022\004" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\047\uffd4\052\014" +
    "\053\uffd4\001\002\000\006\031\uffce\051\uffce\001\002\000" +
    "\004\042\262\001\002\000\020\004\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\047\uffe8\053\uffe8\001\002\000\006\031" +
    "\uffcc\051\uffcc\001\002\000\006\031\254\051\253\001\002" +
    "\000\034\004\127\005\125\006\040\007\043\010\042\011" +
    "\044\015\117\022\120\041\115\044\132\046\122\047\uffd4" +
    "\052\014\001\002\000\022\004\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\047\uffd4\052\014\053\uffd4\001\002\000\022" +
    "\004\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\047\uffd4\052" +
    "\014\053\uffd4\001\002\000\022\002\uffdb\004\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\047\uffdb\053\uffdb\001\002\000" +
    "\016\004\106\034\111\036\105\037\076\047\242\053\071" +
    "\001\002\000\004\042\uffb0\001\002\000\016\004\uffeb\034" +
    "\uffeb\036\uffeb\037\uffeb\047\uffeb\053\uffeb\001\002\000\030" +
    "\004\127\005\125\006\040\007\043\010\042\011\044\015" +
    "\117\022\120\041\115\044\234\046\122\001\002\000\014" +
    "\031\uffcd\042\uffaf\044\212\050\213\051\uffcd\001\002\000" +
    "\010\031\uffd0\042\uffae\051\uffd0\001\002\000\026\004\uffd4" +
    "\031\uffcf\034\uffd4\035\uffd4\036\uffd4\037\uffd4\047\uffd4\051" +
    "\uffcf\052\014\053\uffd4\001\002\000\030\004\127\005\125" +
    "\006\040\007\043\010\042\011\044\015\117\022\120\041" +
    "\115\044\121\046\122\001\002\000\020\004\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\047\uffe9\053\uffe9\001\002\000" +
    "\004\047\114\001\002\000\022\002\uffda\004\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\047\uffda\053\uffda\001\002\000" +
    "\004\044\206\001\002\000\030\004\127\005\125\006\040" +
    "\007\043\010\042\011\044\015\117\022\120\041\115\044" +
    "\132\046\122\001\002\000\030\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\015\uffa7\022\uffa7\041\uffa7\044" +
    "\uffa7\046\uffa7\001\002\000\030\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\015\uffa6\022\uffa6\041\uffa6\044" +
    "\uffa6\046\uffa6\001\002\000\030\004\127\005\125\006\040" +
    "\007\043\010\042\011\044\015\117\022\120\041\115\044" +
    "\132\046\122\001\002\000\030\004\127\005\125\006\040" +
    "\007\043\010\042\011\044\015\117\022\120\041\115\044" +
    "\132\046\122\001\002\000\036\014\154\015\146\016\137" +
    "\017\142\020\145\021\140\023\141\024\152\025\144\026" +
    "\147\027\150\030\136\032\151\033\143\001\002\000\070" +
    "\004\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\042" +
    "\uffb0\043\uffba\045\uffba\046\uffba\047\uffba\051\uffba\052\uffba" +
    "\053\uffba\001\002\000\066\004\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\043\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\001\002\000\050\004\106\014" +
    "\154\015\146\016\137\017\142\020\145\021\140\023\141" +
    "\024\152\025\144\026\147\027\150\030\136\032\151\033" +
    "\143\034\111\036\105\046\066\053\071\001\002\000\072" +
    "\004\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\042" +
    "\uffaf\043\uffbb\044\131\045\uffbb\046\uffbb\047\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\001\002\000\070\004\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\042\uffae\043\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000" +
    "\032\004\127\005\125\006\040\007\043\010\042\011\044" +
    "\015\117\022\120\041\115\044\132\045\135\046\122\001" +
    "\002\000\030\004\127\005\125\006\040\007\043\010\042" +
    "\011\044\015\117\022\120\041\115\044\132\046\122\001" +
    "\002\000\006\045\163\051\162\001\002\000\062\004\uffb3" +
    "\014\154\015\146\016\137\017\142\020\145\021\140\023" +
    "\141\024\152\025\144\026\147\027\150\030\136\032\151" +
    "\033\143\034\uffb3\035\uffb3\036\uffb3\037\uffb3\045\uffb3\047" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000\070\004\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\042\uffa8\043" +
    "\uffa8\045\uffa8\046\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\001\002\000\030\004\uff98\005\uff98\006\uff98\007\uff98\010" +
    "\uff98\011\uff98\015\uff98\022\uff98\041\uff98\044\uff98\046\uff98" +
    "\001\002\000\030\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\011\uffa3\015\uffa3\022\uffa3\041\uffa3\044\uffa3\046\uffa3" +
    "\001\002\000\030\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010" +
    "\uffa0\011\uffa0\015\uffa0\022\uffa0\041\uffa0\044\uffa0\046\uffa0" +
    "\001\002\000\030\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\015\uff9f\022\uff9f\041\uff9f\044\uff9f\046\uff9f" +
    "\001\002\000\030\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010" +
    "\uffa2\011\uffa2\015\uffa2\022\uffa2\041\uffa2\044\uffa2\046\uffa2" +
    "\001\002\000\030\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\015\uff9a\022\uff9a\041\uff9a\044\uff9a\046\uff9a" +
    "\001\002\000\030\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\011\uff9d\015\uff9d\022\uff9d\041\uff9d\044\uff9d\046\uff9d" +
    "\001\002\000\030\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010" +
    "\uffa1\011\uffa1\015\uffa1\022\uffa1\041\uffa1\044\uffa1\046\uffa1" +
    "\001\002\000\030\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\015\uffa4\022\uffa4\041\uffa4\044\uffa4\046\uffa4" +
    "\001\002\000\030\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\011\uff9c\015\uff9c\022\uff9c\041\uff9c\044\uff9c\046\uff9c" +
    "\001\002\000\030\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\015\uff99\022\uff99\041\uff99\044\uff99\046\uff99" +
    "\001\002\000\030\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010" +
    "\uff9b\011\uff9b\015\uff9b\022\uff9b\041\uff9b\044\uff9b\046\uff9b" +
    "\001\002\000\030\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\015\uff9e\022\uff9e\041\uff9e\044\uff9e\046\uff9e" +
    "\001\002\000\030\004\127\005\125\006\040\007\043\010" +
    "\042\011\044\015\117\022\120\041\115\044\132\046\122" +
    "\001\002\000\030\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\015\uffa5\022\uffa5\041\uffa5\044\uffa5\046\uffa5" +
    "\001\002\000\066\004\uffbd\014\154\015\146\016\137\017" +
    "\142\020\145\021\140\023\141\024\152\025\144\026\147" +
    "\027\150\030\136\032\151\033\143\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd\051\uffbd" +
    "\052\uffbd\053\uffbd\001\002\000\066\004\uffc0\014\154\015" +
    "\146\016\137\017\142\020\145\021\140\023\141\024\152" +
    "\025\144\026\147\027\150\030\136\032\151\033\143\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\043\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\051\uffc0\052\uffc0\053\uffc0\001\002\000\030\004" +
    "\127\005\125\006\040\007\043\010\042\011\044\015\117" +
    "\022\120\041\115\044\132\046\122\001\002\000\066\004" +
    "\uffbc\014\154\015\146\016\137\017\142\020\145\021\140" +
    "\023\141\024\152\025\144\026\147\027\150\030\136\032" +
    "\151\033\143\034\uffbc\035\uffbc\036\uffbc\037\uffbc\043\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\001" +
    "\002\000\066\004\uffbe\014\154\015\146\016\137\017\142" +
    "\020\145\021\140\023\141\024\152\025\144\026\147\027" +
    "\150\030\136\032\151\033\143\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\043\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\001\002\000\030\004\127\005\125\006\040" +
    "\007\043\010\042\011\044\015\117\022\120\041\115\044" +
    "\132\046\122\001\002\000\070\004\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\042\uffa9\043\uffa9\045\uffa9\046" +
    "\uffa9\047\uffa9\051\uffa9\052\uffa9\053\uffa9\001\002\000\062" +
    "\004\uffb2\014\154\015\146\016\137\017\142\020\145\021" +
    "\140\023\141\024\152\025\144\026\147\027\150\030\136" +
    "\032\151\033\143\034\uffb2\035\uffb2\036\uffb2\037\uffb2\045" +
    "\uffb2\047\uffb2\051\uffb2\052\uffb2\053\uffb2\001\002\000\040" +
    "\014\154\015\146\016\137\017\142\020\145\021\140\023" +
    "\141\024\152\025\144\026\147\027\150\030\136\032\151" +
    "\033\143\045\166\001\002\000\066\004\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\043\uffb5\045\uffb5\046\uffb5" +
    "\047\uffb5\051\uffb5\052\uffb5\053\uffb5\001\002\000\020\004" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\047\uffdf\053\uffdf" +
    "\001\002\000\020\004\uffd7\034\uffd7\035\172\036\uffd7\037" +
    "\uffd7\047\uffd7\053\uffd7\001\002\000\020\004\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\047\uffde\053\uffde\001\002\000" +
    "\014\004\106\034\111\036\105\046\066\053\071\001\002" +
    "\000\020\004\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\047" +
    "\uffe3\053\uffe3\001\002\000\020\004\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\047\uffd6\053\uffd6\001\002\000\006\047" +
    "\177\051\176\001\002\000\032\004\127\005\125\006\040" +
    "\007\043\010\042\011\044\015\117\022\120\041\115\044" +
    "\132\046\122\047\200\001\002\000\066\004\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\043\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8\001\002\000\066" +
    "\004\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\043" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\001\002\000\040\014\154\015\146\016\137\017\142\020" +
    "\145\021\140\023\141\024\152\025\144\026\147\027\150" +
    "\030\136\032\151\033\143\045\202\001\002\000\050\004" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\036\uffb5\046\uffb5\053\uffb5\001\002" +
    "\000\020\004\uffd7\034\uffd7\035\172\036\uffd7\037\uffd7\047" +
    "\uffd7\053\uffd7\001\002\000\020\004\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\047\uffe2\053\uffe2\001\002\000\066\004" +
    "\uffbf\014\154\015\146\016\137\017\142\020\145\021\140" +
    "\023\141\024\152\025\144\026\147\027\150\030\136\032" +
    "\151\033\143\034\uffbf\035\uffbf\036\uffbf\037\uffbf\043\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf\001" +
    "\002\000\030\004\127\005\125\006\040\007\043\010\042" +
    "\011\044\015\117\022\120\041\115\044\132\046\122\001" +
    "\002\000\040\014\154\015\146\016\137\017\142\020\145" +
    "\021\140\023\141\024\152\025\144\026\147\027\150\030" +
    "\136\032\151\033\143\045\210\001\002\000\066\004\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\043\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\001\002" +
    "\000\020\004\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\047" +
    "\uffe6\053\uffe6\001\002\000\032\004\127\005\125\006\040" +
    "\007\043\010\042\011\044\015\117\022\120\041\115\044" +
    "\132\045\232\046\122\001\002\000\006\012\031\013\027" +
    "\001\002\000\024\004\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\042\227\047\uffc9\052\uffc9\053\uffc9\001\002\000\030" +
    "\004\uffd1\031\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\042" +
    "\036\047\uffd1\051\uffd1\052\uffd1\053\uffd1\001\002\000\024" +
    "\004\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\042\223\047" +
    "\uffc8\052\uffc8\053\uffc8\001\002\000\030\004\uff95\031\uff95" +
    "\034\uff95\035\uff95\036\uff95\037\uff95\042\220\047\uff95\051" +
    "\uff95\052\uff95\053\uff95\001\002\000\032\004\127\005\125" +
    "\006\040\007\043\010\042\011\044\015\117\022\120\041" +
    "\115\043\034\044\132\046\122\001\002\000\040\014\154" +
    "\015\146\016\137\017\142\020\145\021\140\023\141\024" +
    "\152\025\144\026\147\027\150\030\136\032\151\033\143" +
    "\043\222\001\002\000\024\004\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\042\uffc6\047\uffc6\052\uffc6\053\uffc6\001\002" +
    "\000\032\004\127\005\125\006\040\007\043\010\042\011" +
    "\044\015\117\022\120\041\115\043\224\044\132\046\122" +
    "\001\002\000\024\004\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\042\uffc5\047\uffc5\052\uffc5\053\uffc5\001\002\000\040" +
    "\014\154\015\146\016\137\017\142\020\145\021\140\023" +
    "\141\024\152\025\144\026\147\027\150\030\136\032\151" +
    "\033\143\043\226\001\002\000\024\004\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\042\uffc4\047\uffc4\052\uffc4\053\uffc4" +
    "\001\002\000\004\043\230\001\002\000\024\004\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\042\uffc7\047\uffc7\052\uffc7" +
    "\053\uffc7\001\002\000\006\045\233\051\162\001\002\000" +
    "\024\004\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\042\uffa8" +
    "\047\uffd8\052\uffd8\053\uffd8\001\002\000\024\004\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\042\uffa9\047\uffd9\052\uffd9" +
    "\053\uffd9\001\002\000\030\004\127\005\125\006\040\007" +
    "\043\010\042\011\044\015\117\022\120\041\115\044\132" +
    "\046\122\001\002\000\050\004\106\014\154\015\146\016" +
    "\137\017\142\020\145\021\140\023\141\024\152\025\144" +
    "\026\147\027\150\030\136\032\151\033\143\034\111\036" +
    "\105\046\066\053\071\001\002\000\020\004\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\047\uffe0\053\uffe0\001\002\000" +
    "\040\014\154\015\146\016\137\017\142\020\145\021\140" +
    "\023\141\024\152\025\144\026\147\027\150\030\136\032" +
    "\151\033\143\045\240\001\002\000\050\004\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\036\uffb5\046\uffb5\053\uffb5\001\002\000\020\004" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\047\uffe1\053\uffe1" +
    "\001\002\000\022\002\uffdd\004\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\047\uffdd\053\uffdd\001\002\000\016\004\uffea" +
    "\034\uffea\036\uffea\037\uffea\047\uffea\053\uffea\001\002\000" +
    "\004\047\245\001\002\000\022\002\uffdc\004\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\047\uffdc\053\uffdc\001\002\000" +
    "\020\004\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\047\uffe4" +
    "\053\uffe4\001\002\000\020\004\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\047\uffe7\053\uffe7\001\002\000\010\047\uffd4" +
    "\051\162\052\014\001\002\000\004\047\uffd3\001\002\000" +
    "\004\047\uffd2\001\002\000\006\004\256\053\071\001\002" +
    "\000\030\004\127\005\125\006\040\007\043\010\042\011" +
    "\044\015\117\022\120\041\115\044\132\046\122\001\002" +
    "\000\024\004\uffca\034\uffca\035\uffca\036\uffca\037\uffca\047" +
    "\uffca\051\162\052\uffca\053\uffca\001\002\000\014\031\uffcd" +
    "\042\uffaf\044\131\050\261\051\uffcd\001\002\000\006\031" +
    "\uffcf\051\uffcf\001\002\000\006\031\uffcb\051\uffcb\001\002" +
    "\000\006\012\031\013\027\001\002\000\030\004\127\005" +
    "\125\006\040\007\043\010\042\011\044\015\117\022\120" +
    "\041\115\044\132\046\122\001\002\000\040\014\154\015" +
    "\146\016\137\017\142\020\145\021\140\023\141\024\152" +
    "\025\144\026\147\027\150\030\136\032\151\033\143\043" +
    "\264\001\002\000\072\004\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\042\uffb1\043\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\051\uffb1\052\uffb1\053\uffb1\001\002\000\020" +
    "\004\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\047\uffe5\053" +
    "\uffe5\001\002\000\006\002\000\004\270\001\002\000\006" +
    "\002\ufffe\004\ufffe\001\002\000\004\044\025\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\265\001\001\000\010\004\011\005\006\006\007" +
    "\001\001\000\004\007\016\001\001\000\006\005\015\006" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\022\011\017\012\020\013\021" +
    "\001\001\000\004\025\066\001\001\000\002\001\001\000" +
    "\004\045\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\044\043\045\001\001\000\006\015\031\016" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\031\016\051\001\001\000\002\001\001\000\010" +
    "\014\053\015\031\016\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\031\016\056\001\001\000\002" +
    "\001\001\000\006\024\060\043\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\063\015\031\016\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\020" +
    "\111\021\072\022\112\027\101\030\103\032\077\033\102" +
    "\034\076\037\067\041\073\042\074\044\107\050\106\051" +
    "\071\001\001\000\002\001\001\000\004\045\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\122\023\133" +
    "\033\123\040\247\045\250\047\115\050\127\051\071\001" +
    "\001\000\004\045\246\001\001\000\004\045\245\001\001" +
    "\000\002\001\001\000\034\020\111\021\072\022\243\030" +
    "\242\032\077\033\102\034\076\037\067\041\073\042\074" +
    "\044\107\050\106\051\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\122\023\234\033\123\047\115" +
    "\050\127\051\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\210\001\001\000\016\017\122\023\125" +
    "\033\123\047\115\050\127\051\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\122\023\204\033\123\047\115\050\127\051" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\122\023\200\033\123\047\115\050\127\051\071\001" +
    "\001\000\020\017\122\023\133\033\123\040\174\047\115" +
    "\050\127\051\071\001\001\000\004\046\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\020\111\021\072" +
    "\025\170\026\167\030\166\032\077\033\102\034\076\037" +
    "\067\041\073\042\074\044\107\046\152\050\106\051\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\122\023\133\033\123\040\132\047\115\050\127\051\071" +
    "\001\001\000\016\017\122\023\164\033\123\047\115\050" +
    "\127\051\071\001\001\000\002\001\001\000\004\046\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\154\023\155\033" +
    "\123\047\115\050\127\051\071\001\001\000\002\001\001" +
    "\000\004\046\156\001\001\000\004\046\152\001\001\000" +
    "\016\017\157\023\160\033\123\047\115\050\127\051\071" +
    "\001\001\000\004\046\156\001\001\000\004\046\152\001" +
    "\001\000\016\017\122\023\163\033\123\047\115\050\127" +
    "\051\071\001\001\000\002\001\001\000\004\046\152\001" +
    "\001\000\004\046\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\172\001\001\000\002\001\001\000" +
    "\036\020\111\021\072\025\170\026\173\030\166\032\077" +
    "\033\102\034\076\037\067\041\073\042\074\044\107\050" +
    "\106\051\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\122\023\163\033\123\047" +
    "\115\050\127\051\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\152\001\001\000\036\020\111\021" +
    "\072\025\170\026\202\030\166\032\077\033\102\034\076" +
    "\037\067\041\073\042\074\044\107\050\106\051\071\001" +
    "\001\000\004\031\203\001\001\000\002\001\001\000\004" +
    "\046\152\001\001\000\016\017\122\023\206\033\123\047" +
    "\115\050\127\051\071\001\001\000\004\046\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\122\023" +
    "\133\033\123\040\230\047\115\050\127\051\071\001\001" +
    "\000\012\015\216\016\214\035\213\036\215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\122\023\220\033\123\047\115\050" +
    "\127\051\071\001\001\000\004\046\152\001\001\000\002" +
    "\001\001\000\016\017\122\023\224\033\123\047\115\050" +
    "\127\051\071\001\001\000\002\001\001\000\004\046\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\017\122\023\236\033\123\047\115\050\127\051" +
    "\071\001\001\000\040\020\111\021\072\025\170\026\235" +
    "\030\166\032\077\033\102\034\076\037\067\041\073\042" +
    "\074\044\107\046\152\050\106\051\071\001\001\000\002" +
    "\001\001\000\004\046\152\001\001\000\036\020\111\021" +
    "\072\025\170\026\240\030\166\032\077\033\102\034\076" +
    "\037\067\041\073\042\074\044\107\050\106\051\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\033\102\041\257\044\256\050" +
    "\106\051\071\001\001\000\020\017\122\023\133\033\123" +
    "\040\254\047\115\050\127\051\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\031\016\214\001\001\000\016\017\122\023" +
    "\262\033\123\047\115\050\127\051\071\001\001\000\004" +
    "\046\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


  public void syntax_error(java_cup.runtime.Symbol current) {
    throw new ParseError(current);
  }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 110. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= file EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Eta start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Eta> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // file ::= INTERFACE interface 
            {
                Eta RESULT = null;
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                Interface It = CUP$parser$stack.peek().<Interface> value();
                 RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // file ::= PROGRAM program 
            {
                Eta RESULT = null;
                int Pleft = CUP$parser$stack.peek().left;
                int Pright = CUP$parser$stack.peek().right;
                Program P = CUP$parser$stack.peek().<Program> value();
                 RESULT = P;  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // interface ::= interface methodHeader 
            {
                Interface RESULT = null;
                int itleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int itright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Interface it = CUP$parser$stack.elementAt(CUP$parser$top-1).<Interface> value();
                int amleft = CUP$parser$stack.peek().left;
                int amright = CUP$parser$stack.peek().right;
                Method am = CUP$parser$stack.peek().<Method> value();
                 ArrayList<Method> ml = it.getMethodHeaders(); ml.add(am); RESULT = new Interface(ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // interface ::= 
            {
                Interface RESULT = null;
                 RESULT = new Interface(new ArrayList<>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // program ::= imports allDefinitions 
            {
                Program RESULT = null;
                int Isleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Isright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Use> Is = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Use>> value();
                int Dsleft = CUP$parser$stack.peek().left;
                int Dsright = CUP$parser$stack.peek().right;
                ArrayList<Definition> Ds = CUP$parser$stack.peek().<ArrayList<Definition>> value();
                 RESULT = new Program(Is, Ds); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // imports ::= use imports 
            {
                ArrayList<Use> RESULT = null;
                int uleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int uright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Use u = CUP$parser$stack.elementAt(CUP$parser$top-1).<Use> value();
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                ArrayList<Use> It = CUP$parser$stack.peek().<ArrayList<Use>> value();
                 It.add(0, u); RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // imports ::= 
            {
                ArrayList<Use> RESULT = null;
                 RESULT = new ArrayList<Use>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",3, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // use ::= USE IDENTIFIER semi 
            {
                Use RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                 RESULT = new Use(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // allDefinitions ::= allDefinitions definition 
            {
                ArrayList<Definition> RESULT = null;
                int Dtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Dtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Definition> Dt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Definition>> value();
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Definition d = CUP$parser$stack.peek().<Definition> value();
                 Dt.add(d); RESULT = Dt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("allDefinitions",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // allDefinitions ::= 
            {
                ArrayList<Definition> RESULT = null;
                 RESULT = new ArrayList<>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("allDefinitions",5, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // definition ::= method 
            {
                Definition RESULT = null;
                int mleft = CUP$parser$stack.peek().left;
                int mright = CUP$parser$stack.peek().right;
                Method m = CUP$parser$stack.peek().<Method> value();
                 RESULT = m; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // definition ::= globalDecl semi 
            {
                Definition RESULT = null;
                int dcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                GlobalDecl dc = CUP$parser$stack.elementAt(CUP$parser$top-1).<GlobalDecl> value();
                 RESULT = dc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // globalDecl ::= IDENTIFIER COLON type 
            {
                GlobalDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new GlobalDecl(id, t, null); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // globalDecl ::= IDENTIFIER COLON type EQUALS primitiveLiteral 
            {
                GlobalDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                Literal pl = CUP$parser$stack.peek().<Literal> value();
                 RESULT = new GlobalDecl(id, t, pl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",9, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // methodHeader ::= IDENTIFIER OPEN_PAREN methodArgs CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-5).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<VarDecl.RawVarDecl> Ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<VarDecl.RawVarDecl>> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                ArrayList<Type> Ts = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 RESULT = new Method(id, Ds, Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // methodHeader ::= IDENTIFIER OPEN_PAREN methodArgs CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<VarDecl.RawVarDecl> Ds = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<VarDecl.RawVarDecl>> value();
                 RESULT = new Method(id, Ds, new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // methodHeader ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                ArrayList<Type> Ts = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 RESULT = new Method(id, new ArrayList<>(), Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // methodHeader ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Method(id, new ArrayList<>(), new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // methodArg ::= IDENTIFIER COLON type 
            {
                VarDecl.RawVarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                RESULT = new VarDecl.RawVarDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArg",33, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // methodArgs ::= methodArg 
            {
                ArrayList<VarDecl.RawVarDecl> RESULT = null;
                int maleft = CUP$parser$stack.peek().left;
                int maright = CUP$parser$stack.peek().right;
                VarDecl.RawVarDecl ma = CUP$parser$stack.peek().<VarDecl.RawVarDecl> value();
                RESULT = ParseUtil.singleton(ma); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArgs",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // methodArgs ::= methodArg COMMA methodArgs 
            {
                ArrayList<VarDecl.RawVarDecl> RESULT = null;
                int maleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int maright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                VarDecl.RawVarDecl ma = CUP$parser$stack.elementAt(CUP$parser$top-2).<VarDecl.RawVarDecl> value();
                int malleft = CUP$parser$stack.peek().left;
                int malright = CUP$parser$stack.peek().right;
                ArrayList<VarDecl.RawVarDecl> mal = CUP$parser$stack.peek().<ArrayList<VarDecl.RawVarDecl>> value();
                mal.add(0, ma); RESULT = mal;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArgs",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // statementList ::= statement 
            {
                ArrayList<Statement> RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                RESULT = ParseUtil.singleton(s);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // statementList ::= statementList statement 
            {
                ArrayList<Statement> RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Statement> sl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Statement>> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                sl.add(s); RESULT = sl;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",21, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // statement ::= if 
            {
                Statement RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Statement.If i = CUP$parser$stack.peek().<Statement.If> value();
                 RESULT = i; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // statement ::= while 
            {
                Statement RESULT = null;
                int wleft = CUP$parser$stack.peek().left;
                int wright = CUP$parser$stack.peek().right;
                Statement.While w = CUP$parser$stack.peek().<Statement.While> value();
                 RESULT = w; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // statement ::= multiAssign semi 
            {
                Statement RESULT = null;
                int aleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                MultiAssign a = CUP$parser$stack.elementAt(CUP$parser$top-1).<MultiAssign> value();
                 RESULT = a; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // statement ::= varDecl semi 
            {
                Statement RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl.RawVarDecl d = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl.RawVarDecl> value();
                 RESULT = d; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // statement ::= arrayInitStatement semi 
            {
                Statement RESULT = null;
                int aleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl.InitArr a = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl.InitArr> value();
                 RESULT = a; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // statement ::= procedureCall semi 
            {
                Statement RESULT = null;
                int fnleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fnright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement.Procedure fn = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement.Procedure> value();
                 RESULT = fn; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // if ::= IF expr block elseOptional 
            {
                Statement.If RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement b = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                int elsleft = CUP$parser$stack.peek().left;
                int elsright = CUP$parser$stack.peek().right;
                Statement els = CUP$parser$stack.peek().<Statement> value();
                 RESULT = new Statement.If(e, b, els); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // if ::= IF OPEN_PAREN expr CLOSE_PAREN block elseOptional 
            {
                Statement.If RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expr> value();
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement b = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                int elsleft = CUP$parser$stack.peek().left;
                int elsright = CUP$parser$stack.peek().right;
                Statement els = CUP$parser$stack.peek().<Statement> value();
                 RESULT = new Statement.If(e, b, els); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // while ::= WHILE OPEN_PAREN expr CLOSE_PAREN block 
            {
                Statement.While RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement b = CUP$parser$stack.peek().<Statement> value();
                 RESULT = new Statement.While(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",15, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // while ::= WHILE expr block 
            {
                Statement.While RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement b = CUP$parser$stack.peek().<Statement> value();
                 RESULT = new Statement.While(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // block ::= statement 
            {
                Statement RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // block ::= returnableBlock 
            {
                Statement RESULT = null;
                int rbleft = CUP$parser$stack.peek().left;
                int rbright = CUP$parser$stack.peek().right;
                Statement.Block rb = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = rb; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // returnableBlock ::= OPEN_BRACE statementList CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Statement>> value();
                 RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // returnableBlock ::= OPEN_BRACE statementList return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Statement>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                 sLst.add(r); RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // returnableBlock ::= OPEN_BRACE CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                 RESULT = new Statement.Block(new ArrayList<Statement>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // returnableBlock ::= OPEN_BRACE return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                 RESULT = new Statement.Block(ParseUtil.singleton(r)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // procedureCall ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Statement.Procedure RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int vlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> vl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Statement.Procedure(id, vl);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCall",24, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // procedureCall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Statement.Procedure RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Statement.Procedure(id, new ArrayList<Expr>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCall",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // elseOptional ::= 
            {
                Statement RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseOptional",23, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // elseOptional ::= ELSE block 
            {
                Statement RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement b = CUP$parser$stack.peek().<Statement> value();
                 RESULT = b; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseOptional",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // semi ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",35, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // semi ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",35, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // return ::= RETURN semi 
            {
                Statement RESULT = null;
                 RESULT = new Statement.Return(new ArrayList<Expr>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",16, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // return ::= RETURN exprList semi 
            {
                Statement RESULT = null;
                int exprLstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int exprLstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> exprLst = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Statement.Return(exprLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",16, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // varDecl ::= IDENTIFIER COLON type 
            {
                VarDecl.RawVarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new VarDecl.RawVarDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",34, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // assignable ::= arrayAccess 
            {
                AssignTarget RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr e1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignTarget.ExprAssign(e1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // assignable ::= varDecl 
            {
                AssignTarget RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl.RawVarDecl vd = CUP$parser$stack.peek().<VarDecl.RawVarDecl> value();
                 RESULT = new AssignTarget.DeclAssign(vd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // assignable ::= UNDERSCORE 
            {
                AssignTarget RESULT = null;
                 RESULT = new AssignTarget.Underscore(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // assignable ::= IDENTIFIER 
            {
                AssignTarget RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new AssignTarget.ExprAssign(new Expr.Identifier(id)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // assignables ::= assignable 
            {
                ArrayList<AssignTarget> RESULT = null;
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                AssignTarget at = CUP$parser$stack.peek().<AssignTarget> value();
                 RESULT = ParseUtil.singleton(at); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignables",32, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // assignables ::= assignables COMMA assignable 
            {
                ArrayList<AssignTarget> RESULT = null;
                int atlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int atlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<AssignTarget> atl = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<AssignTarget>> value();
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                AssignTarget at = CUP$parser$stack.peek().<AssignTarget> value();
                 atl.add(at); RESULT = atl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignables",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // multiAssign ::= assignables EQUALS exprList 
            {
                MultiAssign RESULT = null;
                int tgleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tgright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<AssignTarget> tg = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<AssignTarget>> value();
                int exprsleft = CUP$parser$stack.peek().left;
                int exprsright = CUP$parser$stack.peek().right;
                ArrayList<Expr> exprs = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new MultiAssign(tg, exprs);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multiAssign",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // arrayInitStatement ::= IDENTIFIER COLON arrayInit 
            {
                VarDecl.InitArr RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int arleft = CUP$parser$stack.peek().left;
                int arright = CUP$parser$stack.peek().right;
                Statement.ArrayInit ar = CUP$parser$stack.peek().<Statement.ArrayInit> value();
                 RESULT = new VarDecl.InitArr(id, ar); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitStatement",29, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // arrayInit ::= arrayNonBlank 
            {
                Statement.ArrayInit RESULT = null;
                int anbleft = CUP$parser$stack.peek().left;
                int anbright = CUP$parser$stack.peek().right;
                Statement.ArrayInit anb = CUP$parser$stack.peek().<Statement.ArrayInit> value();
                 RESULT = anb;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInit",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // arrayInit ::= arrayInit OPEN_BRACKET CLOSE_BRACKET 
            {
                Statement.ArrayInit RESULT = null;
                int aileft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int airight = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Statement.ArrayInit ai = CUP$parser$stack.elementAt(CUP$parser$top-2).<Statement.ArrayInit> value();
                 ai.getDimensions().add(0, null); RESULT = ai; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInit",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // arrayNonBlank ::= primType OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Statement.ArrayInit RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Primitive pt = CUP$parser$stack.elementAt(CUP$parser$top-3).<Primitive> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new Statement.ArrayInit(pt, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",28, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // arrayNonBlank ::= arrayNonBlank OPEN_BRACKET CLOSE_BRACKET 
            {
                Statement.ArrayInit RESULT = null;
                int anbleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int anbright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Statement.ArrayInit anb = CUP$parser$stack.elementAt(CUP$parser$top-2).<Statement.ArrayInit> value();
                 anb.getDimensions().add(0, null); RESULT = anb; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // arrayNonBlank ::= arrayNonBlank OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Statement.ArrayInit RESULT = null;
                int anbleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int anbright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Statement.ArrayInit anb = CUP$parser$stack.elementAt(CUP$parser$top-3).<Statement.ArrayInit> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 anb.getDimensions().add(0, e); RESULT = anb; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",28, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // method ::= methodHeader returnableBlock 
            {
                Method RESULT = null;
                int amleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int amright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Method am = CUP$parser$stack.elementAt(CUP$parser$top-1).<Method> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement.Block b = CUP$parser$stack.peek().<Statement.Block> value();
                 am.setBody(b); RESULT = am; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // typelst ::= type 
            {
                ArrayList<Type> RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = ParseUtil.singleton(t);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // typelst ::= typelst COMMA type 
            {
                ArrayList<Type> RESULT = null;
                int tlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Type> tl = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Type>> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 tl.add(t); RESULT = tl;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // expr ::= expr binop expr 
            {
                Expr RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr l = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                BinaryOp.Operation op = CUP$parser$stack.elementAt(CUP$parser$top-1).<BinaryOp.Operation> value();
                int rleft = CUP$parser$stack.peek().left;
                int rright = CUP$parser$stack.peek().right;
                Expr r = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(op, l, r); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // expr ::= unop expr 
            {
                Expr RESULT = null;
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UnaryOp.Operation op = CUP$parser$stack.elementAt(CUP$parser$top-1).<UnaryOp.Operation> value();
                int argleft = CUP$parser$stack.peek().left;
                int argright = CUP$parser$stack.peek().right;
                Expr arg = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryOp(op, arg); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // expr ::= primitiveLiteral binop expr 
            {
                Expr RESULT = null;
                int plleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int plright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Literal pl = CUP$parser$stack.elementAt(CUP$parser$top-2).<Literal> value();
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                BinaryOp.Operation op = CUP$parser$stack.elementAt(CUP$parser$top-1).<BinaryOp.Operation> value();
                int rleft = CUP$parser$stack.peek().left;
                int rright = CUP$parser$stack.peek().right;
                Expr r = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(op, pl, r); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // expr ::= expr binop primitiveLiteral 
            {
                Expr RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr l = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                BinaryOp.Operation op = CUP$parser$stack.elementAt(CUP$parser$top-1).<BinaryOp.Operation> value();
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                Literal pl = CUP$parser$stack.peek().<Literal> value();
                 RESULT = new BinaryOp(op, l, pl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // expr ::= primitiveLiteral binop primitiveLiteral 
            {
                Expr RESULT = null;
                int pl1left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int pl1right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Literal pl1 = CUP$parser$stack.elementAt(CUP$parser$top-2).<Literal> value();
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                BinaryOp.Operation op = CUP$parser$stack.elementAt(CUP$parser$top-1).<BinaryOp.Operation> value();
                int pl2left = CUP$parser$stack.peek().left;
                int pl2right = CUP$parser$stack.peek().right;
                Literal pl2 = CUP$parser$stack.peek().<Literal> value();
                 RESULT = new BinaryOp(op, pl1, pl2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // expr ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // expr ::= functionCall 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                Expr.FunctionCall fc = CUP$parser$stack.peek().<Expr.FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // expr ::= STRING_LITERAL 
            {
                Expr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                String s = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.StringLit(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // expr ::= OPEN_BRACE exprList CLOSE_BRACE 
            {
                Expr RESULT = null;
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> el = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Literal.ArrayLit(el); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // expr ::= OPEN_BRACE exprList COMMA CLOSE_BRACE 
            {
                Expr RESULT = null;
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Expr> el = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Expr>> value();
                 RESULT = new Literal.ArrayLit(el); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // expr ::= arrayAccess 
            {
                Expr RESULT = null;
                int aaleft = CUP$parser$stack.peek().left;
                int aaright = CUP$parser$stack.peek().right;
                Expr aa = CUP$parser$stack.peek().<Expr> value();
                 RESULT = aa; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = e; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new Expr.FunctionCall.LengthFn(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // exprList ::= expr 
            {
                ArrayList<Expr> RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = ParseUtil.singleton(e);  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // exprList ::= exprList COMMA expr 
            {
                ArrayList<Expr> RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Expr> l = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Expr>> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 l.add(e); RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // arrayAccess ::= indexable OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expr> value();
                int e2left = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int e2right = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e2 = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new Expr.ArrayAccess(e1,e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",38, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // indexable ::= functionCall 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                Expr.FunctionCall fc = CUP$parser$stack.peek().<Expr.FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // indexable ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // indexable ::= arrayAccess 
            {
                Expr RESULT = null;
                int aaleft = CUP$parser$stack.peek().left;
                int aaright = CUP$parser$stack.peek().right;
                Expr aa = CUP$parser$stack.peek().<Expr> value();
                 RESULT = aa; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // primitiveLiteral ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int nleft = CUP$parser$stack.peek().left;
                int nright = CUP$parser$stack.peek().right;
                String n = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.IntLit(Long.parseLong(n)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // primitiveLiteral ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Integer c = CUP$parser$stack.peek().<Integer> value();
                 RESULT = new Literal.CharLit(c); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // primitiveLiteral ::= FALSE 
            {
                Literal RESULT = null;
                 RESULT = new Literal.BoolLit(false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // primitiveLiteral ::= TRUE 
            {
                Literal RESULT = null;
                 RESULT = new Literal.BoolLit(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // functionCall ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Expr.FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int vlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> vl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Expr.FunctionCall(id, vl);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCall",25, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // functionCall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Expr.FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Expr.FunctionCall(id, new ArrayList<>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCall",25, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // unop ::= MINUS 
            {
                UnaryOp.Operation RESULT = null;
                 RESULT = UnaryOp.Operation.NEG; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",37, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // unop ::= NOT 
            {
                UnaryOp.Operation RESULT = null;
                 RESULT = UnaryOp.Operation.NOT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",37, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // binop ::= PLUS 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.PLUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // binop ::= MINUS 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.MINUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // binop ::= TIMES 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.TIMES; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // binop ::= HIGHTIMES 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.HIGHTIMES; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // binop ::= DIVIDE 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.DIVIDE; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // binop ::= MODULO 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.MODULO; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // binop ::= LT 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.LT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // binop ::= LEQ 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.LEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // binop ::= GT 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.GT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // binop ::= GEQ 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.GEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // binop ::= EQB 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.EQB; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // binop ::= NEQB 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.NEQB; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // binop ::= AND 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.AND; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // binop ::= OR 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.OR; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // primType ::= BOOL 
            {
                Primitive RESULT = null;
                RESULT = new Primitive.BOOL(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primType",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // primType ::= INT 
            {
                Primitive RESULT = null;
                RESULT = new Primitive.INT(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primType",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // type ::= primType 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                Primitive pt = CUP$parser$stack.peek().<Primitive> value();
                RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // type ::= primType OPEN_BRACKET CLOSE_BRACKET 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Primitive pt = CUP$parser$stack.elementAt(CUP$parser$top-2).<Primitive> value();
                RESULT = new Type.Array(pt);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // type ::= type OPEN_BRACKET CLOSE_BRACKET 
            {
                Type RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                RESULT = new Type.Array(t);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
