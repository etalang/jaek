
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.internal.markers.*;
import java.util.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return SymbolTable.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\005\004" +
    "\000\002\005\002\000\002\006\003\000\002\006\004\000" +
    "\002\007\010\000\002\007\006\000\002\007\007\000\002" +
    "\007\005\000\002\013\003\000\002\013\005\000\002\042" +
    "\005\000\002\045\005\000\002\045\006\000\002\046\004" +
    "\000\002\046\005\000\002\012\005\000\002\011\003\000" +
    "\002\011\003\000\002\020\005\000\002\023\005\000\002" +
    "\010\004\000\002\014\003\000\002\014\005\000\002\027" +
    "\003\000\002\027\004\000\002\030\006\000\002\030\010" +
    "\000\002\031\007\000\002\031\005\000\002\032\005\000" +
    "\002\032\006\000\002\032\005\000\002\032\004\000\002" +
    "\033\003\000\002\033\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\004\000\002\026\004\000\002\026\004" +
    "\000\002\041\006\000\002\041\005\000\002\034\002\000" +
    "\002\034\004\000\002\037\003\000\002\037\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\043\004\000\002\043\005\000\002\044" +
    "\003\000\002\044\005\000\002\015\003\000\002\015\003" +
    "\000\002\015\005\000\002\040\005\000\002\040\004\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\005\000\002\040\004\000\002\040\006" +
    "\000\002\047\005\000\002\047\006\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\004\000\002" +
    "\025\003\000\002\025\005\000\002\035\003\000\002\035" +
    "\002" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\010\002\ufffe\004\ufffe\020\006\001\002\000" +
    "\006\002\ufffb\004\022\001\002\000\010\002\ufffe\004\ufffe" +
    "\020\006\001\002\000\004\004\011\001\002\000\004\002" +
    "\010\001\002\000\004\002\001\001\002\000\012\002\uffa4" +
    "\004\uffa4\020\uffa4\052\012\001\002\000\024\002\uffa5\004" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\047\uffa5" +
    "\053\uffa5\001\002\000\010\002\ufffd\004\ufffd\020\ufffd\001" +
    "\002\000\006\002\uffff\004\uffff\001\002\000\006\002\ufffa" +
    "\004\ufffa\001\002\000\010\002\uffa4\004\uffa4\052\012\001" +
    "\002\000\004\046\051\001\002\000\004\002\000\001\002" +
    "\000\006\002\ufffb\004\022\001\002\000\006\044\023\050" +
    "\024\001\002\000\006\004\034\045\035\001\002\000\006" +
    "\012\027\013\025\001\002\000\036\002\uffbc\004\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\037\uffbc\042\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\001\002\000" +
    "\034\002\uffed\004\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\037\uffed\042\030\045\uffed\047\uffed\051\uffed\052\uffed\053" +
    "\uffed\001\002\000\036\002\uffbb\004\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\037\uffbb\042\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002\000\004\043\031" +
    "\001\002\000\036\002\uffba\004\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\037\uffba\042\uffba\045\uffba\046\uffba\047\uffba" +
    "\051\uffba\052\uffba\053\uffba\001\002\000\006\045\ufff4\051" +
    "\046\001\002\000\004\045\043\001\002\000\004\050\024" +
    "\001\002\000\006\046\ufff5\050\036\001\002\000\006\012" +
    "\027\013\025\001\002\000\004\046\ufff6\001\002\000\010" +
    "\042\030\046\uffe7\051\041\001\002\000\006\012\027\013" +
    "\025\001\002\000\004\046\uffe6\001\002\000\006\046\ufff7" +
    "\050\044\001\002\000\006\012\027\013\025\001\002\000" +
    "\004\046\ufff8\001\002\000\004\004\034\001\002\000\004" +
    "\045\ufff3\001\002\000\004\002\ufffc\001\002\000\016\004" +
    "\067\014\070\016\066\017\062\047\064\053\053\001\002" +
    "\000\006\002\uffe8\004\uffe8\001\002\000\006\037\uffaa\051" +
    "\uffaa\001\002\000\026\004\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\037\uffab\047\uffa4\051\uffab\052\012\053\uffa4\001" +
    "\002\000\026\004\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\037\uffec\047\uffec\051\uffec\052\uffec\053\uffec\001\002\000" +
    "\022\004\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\047\uffa4" +
    "\052\012\053\uffa4\001\002\000\020\004\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\047\uffd8\053\uffd8\001\002\000\004" +
    "\037\221\001\002\000\006\037\uffa7\051\215\001\002\000" +
    "\032\004\117\005\116\006\102\007\105\010\104\011\114" +
    "\021\103\023\110\030\111\046\113\047\uffa4\052\012\001" +
    "\002\000\026\004\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\037\uffeb\047\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000" +
    "\022\002\uffdc\004\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\047\uffdc\053\uffdc\001\002\000\016\004\067\014\070\016" +
    "\066\017\uffe5\047\uffe5\053\053\001\002\000\030\004\117" +
    "\005\116\006\102\007\105\010\104\011\114\021\103\023" +
    "\110\030\111\044\203\046\113\001\002\000\014\037\uffa9" +
    "\042\122\044\120\050\175\051\uffa9\001\002\000\030\004" +
    "\117\005\116\006\102\007\105\010\104\011\114\021\103" +
    "\023\110\030\111\044\112\046\113\001\002\000\020\004" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\047\uffd9\053\uffd9" +
    "\001\002\000\004\047\101\001\002\000\006\017\062\047" +
    "\076\001\002\000\022\004\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\047\uffa4\052\012\053\uffa4\001\002\000\020\004" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\047\uffd6\053\uffd6" +
    "\001\002\000\022\002\uffdf\004\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\047\uffdf\053\uffdf\001\002\000\004\047\100" +
    "\001\002\000\022\002\uffde\004\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\047\uffde\053\uffde\001\002\000\022\002\uffdd" +
    "\004\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\047\uffdd\053" +
    "\uffdd\001\002\000\066\004\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\040\uffb3\041\uffb3\043\uffb3\045\uffb3\046\uffb3\047\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\001\002\000\004\044\171\001\002" +
    "\000\066\004\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\040\uffb1\041" +
    "\uffb1\043\uffb1\045\uffb1\046\uffb1\047\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\001\002\000\066\004\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\040\uffb4\041\uffb4\043\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\001\002\000\066\004\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\040\uffb6\041\uffb6\043\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000" +
    "\026\004\117\005\116\006\102\007\105\010\104\011\114" +
    "\021\103\023\110\030\111\046\113\001\002\000\026\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\021\uffd0" +
    "\023\uffd0\030\uffd0\046\uffd0\001\002\000\026\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\021\uffcf\023\uffcf" +
    "\030\uffcf\046\uffcf\001\002\000\026\004\117\005\116\006" +
    "\102\007\105\010\104\011\114\021\103\023\110\030\111" +
    "\046\113\001\002\000\026\004\117\005\116\006\102\007" +
    "\105\010\104\011\114\021\103\023\110\030\111\046\113" +
    "\001\002\000\066\004\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\040" +
    "\uffb2\041\uffb2\043\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\001\002\000\050\004\067\014\070\016" +
    "\066\022\143\023\135\024\125\025\131\026\134\027\127" +
    "\031\126\032\141\033\133\034\136\035\140\036\124\040" +
    "\137\041\132\046\051\053\053\001\002\000\066\004\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\040\uffb5\041\uffb5\043\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5\001\002" +
    "\000\072\004\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041" +
    "\uffb7\042\122\043\uffb7\044\120\045\uffb7\046\uffb7\047\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\001\002\000\030\004\117\005" +
    "\116\006\102\007\105\010\104\011\114\021\103\023\110" +
    "\030\111\045\150\046\113\001\002\000\066\004\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\040\uffaf\041\uffaf\043\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\051\uffaf\052\uffaf\053\uffaf\001\002\000" +
    "\026\004\117\005\116\006\102\007\105\010\104\011\114" +
    "\021\103\023\110\030\111\046\113\001\002\000\040\022" +
    "\143\023\135\024\125\025\131\026\134\027\127\031\126" +
    "\032\141\033\133\034\136\035\140\036\124\040\137\041" +
    "\132\043\130\001\002\000\026\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\021\uffc1\023\uffc1\030\uffc1\046" +
    "\uffc1\001\002\000\026\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\021\uffcc\023\uffcc\030\uffcc\046\uffcc\001" +
    "\002\000\026\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\021\uffc8\023\uffc8\030\uffc8\046\uffc8\001\002\000" +
    "\026\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\021\uffc9\023\uffc9\030\uffc9\046\uffc9\001\002\000\072\004" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\122\043\uffad\045\uffad\046\uffad\047\uffad\051\uffad\052" +
    "\uffad\053\uffad\001\002\000\026\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\021\uffcb\023\uffcb\030\uffcb\046" +
    "\uffcb\001\002\000\026\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\021\uffc3\023\uffc3\030\uffc3\046\uffc3\001" +
    "\002\000\026\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\021\uffc6\023\uffc6\030\uffc6\046\uffc6\001\002\000" +
    "\026\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca" +
    "\021\uffca\023\uffca\030\uffca\046\uffca\001\002\000\026\004" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\021\uffcd" +
    "\023\uffcd\030\uffcd\046\uffcd\001\002\000\026\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\021\uffc5\023\uffc5" +
    "\030\uffc5\046\uffc5\001\002\000\026\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\021\uffc4\023\uffc4\030\uffc4" +
    "\046\uffc4\001\002\000\026\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\021\uffc2\023\uffc2\030\uffc2\046\uffc2" +
    "\001\002\000\026\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\021\uffc7\023\uffc7\030\uffc7\046\uffc7\001\002" +
    "\000\026\004\117\005\116\006\102\007\105\010\104\011" +
    "\114\021\103\023\110\030\111\046\113\001\002\000\026" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\021" +
    "\uffce\023\uffce\030\uffce\046\uffce\001\002\000\066\004\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\022\143\023\135\024" +
    "\125\025\131\026\134\027\127\031\126\032\141\033\133" +
    "\034\136\035\140\036\124\040\137\041\132\043\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053\uffb9\001\002" +
    "\000\070\004\uffac\014\uffac\015\uffac\016\uffac\017\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\031\uffac" +
    "\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\043\uffac\045\uffac\046\uffac\047\uffac\051\uffac" +
    "\052\uffac\053\uffac\001\002\000\004\045\153\001\002\000" +
    "\062\004\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\022\143" +
    "\023\135\024\125\025\131\026\134\027\127\031\126\032" +
    "\141\033\133\034\136\035\140\036\124\040\137\041\132" +
    "\045\uffbe\047\uffbe\051\151\052\uffbe\053\uffbe\001\002\000" +
    "\066\004\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3" +
    "\043\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\001\002\000\026\004\117\005\116\006\102\007\105" +
    "\010\104\011\114\021\103\023\110\030\111\046\113\001" +
    "\002\000\024\004\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\045\uffbd\047\uffbd\052\uffbd\053\uffbd\001\002\000\066\004" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\040\uffd4\041\uffd4\043\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\053\uffd4\001" +
    "\002\000\020\004\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\047\uffda\053\uffda\001\002\000\020\004\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\047\uffdb\053\uffdb\001\002\000\020" +
    "\004\uffd2\014\uffd2\015\157\016\uffd2\017\uffd2\047\uffd2\053" +
    "\uffd2\001\002\000\014\004\067\014\070\016\066\046\051" +
    "\053\053\001\002\000\020\004\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\047\uffe3\053\uffe3\001\002\000\020\004\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\047\uffd1\053\uffd1\001" +
    "\002\000\004\047\163\001\002\000\066\004\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\040\uffb0\041\uffb0\043\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\051\uffb0\052\uffb0\053\uffb0\001\002\000\040" +
    "\022\143\023\135\024\125\025\131\026\134\027\127\031" +
    "\126\032\141\033\133\034\136\035\140\036\124\040\137" +
    "\041\132\045\165\001\002\000\014\004\067\014\070\016" +
    "\066\046\051\053\053\001\002\000\020\004\uffd2\014\uffd2" +
    "\015\157\016\uffd2\017\uffd2\047\uffd2\053\uffd2\001\002\000" +
    "\020\004\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\047\uffe2" +
    "\053\uffe2\001\002\000\066\004\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\022\143\023\135\024\125\025\131\026\134" +
    "\027\127\031\126\032\141\033\133\034\136\035\140\036" +
    "\124\040\137\041\132\043\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\001\002\000\026\004\117\005" +
    "\116\006\102\007\105\010\104\011\114\021\103\023\110" +
    "\030\111\046\113\001\002\000\040\022\143\023\135\024" +
    "\125\025\131\026\134\027\127\031\126\032\141\033\133" +
    "\034\136\035\140\036\124\040\137\041\132\045\173\001" +
    "\002\000\066\004\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\040\uffae" +
    "\041\uffae\043\uffae\045\uffae\046\uffae\047\uffae\051\uffae\052" +
    "\uffae\053\uffae\001\002\000\006\037\uffa8\051\uffa8\001\002" +
    "\000\010\012\027\013\025\042\176\001\002\000\026\004" +
    "\117\005\116\006\102\007\105\010\104\011\114\021\103" +
    "\023\110\030\111\046\113\001\002\000\026\004\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\037\ufff2\047\ufff2\051\ufff2" +
    "\052\ufff2\053\ufff2\001\002\000\040\022\143\023\135\024" +
    "\125\025\131\026\134\027\127\031\126\032\141\033\133" +
    "\034\136\035\140\036\124\040\137\041\132\043\201\001" +
    "\002\000\030\004\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\037\ufff1\042\176\047\ufff1\051\ufff1\052\ufff1\053\ufff1\001" +
    "\002\000\026\004\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\037\ufff0\047\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002\000" +
    "\026\004\117\005\116\006\102\007\105\010\104\011\114" +
    "\021\103\023\110\030\111\046\113\001\002\000\050\004" +
    "\067\014\070\016\066\022\143\023\135\024\125\025\131" +
    "\026\134\027\127\031\126\032\141\033\133\034\136\035" +
    "\140\036\124\040\137\041\132\046\051\053\053\001\002" +
    "\000\020\004\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\047" +
    "\uffe0\053\uffe0\001\002\000\040\022\143\023\135\024\125" +
    "\025\131\026\134\027\127\031\126\032\141\033\133\034" +
    "\136\035\140\036\124\040\137\041\132\045\207\001\002" +
    "\000\014\004\067\014\070\016\066\046\051\053\053\001" +
    "\002\000\020\004\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\047\uffe1\053\uffe1\001\002\000\006\017\uffe4\047\uffe4\001" +
    "\002\000\006\047\uffa4\052\012\001\002\000\004\047\uffc0" +
    "\001\002\000\004\047\uffbf\001\002\000\006\004\217\053" +
    "\053\001\002\000\006\037\uffab\051\uffab\001\002\000\012" +
    "\037\uffa9\042\122\050\175\051\uffa9\001\002\000\004\037" +
    "\uffa6\001\002\000\026\004\117\005\116\006\102\007\105" +
    "\010\104\011\114\021\103\023\110\030\111\046\113\001" +
    "\002\000\022\004\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\047\uffe9\052\uffe9\053\uffe9\001\002\000\020\004\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\047\uffd5\053\uffd5\001\002" +
    "\000\020\004\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\047" +
    "\uffd7\053\uffd7\001\002\000\006\002\ufff9\004\ufff9\001\002" +
    "" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\010\002\006\003\003\004\004\001\001\000" +
    "\014\005\017\006\020\007\016\010\014\012\015\001\001" +
    "\000\006\003\013\004\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\224\001\001\000\004\032\051" +
    "\001\001\000\002\001\001\000\014\005\047\006\020\007" +
    "\016\010\014\012\015\001\001\000\002\001\001\000\006" +
    "\012\031\013\032\001\001\000\004\015\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\036" +
    "\015\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\041\015\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\044\015\037\001\001\000\002\001" +
    "\001\000\006\012\031\013\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\011\053\012\054\023\073\024" +
    "\060\025\057\026\064\027\072\030\070\031\056\041\055" +
    "\042\062\043\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\223\001\001\000\002\001\001\000\004" +
    "\035\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\035\212\037\106\040\146\041\105" +
    "\044\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\053\012\054\023\073\024\060\025\057\026\064" +
    "\027\210\030\070\031\056\041\055\042\062\001\001\000" +
    "\010\037\106\040\203\041\105\001\001\000\004\047\173" +
    "\001\001\000\010\037\106\040\114\041\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\076\001\001" +
    "\000\004\035\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\037\106\040\167" +
    "\041\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\037\106\040\163\041\105\001\001\000\012\037\106" +
    "\040\146\041\105\044\161\001\001\000\002\001\001\000" +
    "\034\011\053\012\054\023\073\024\060\025\057\026\154" +
    "\030\070\031\056\032\153\033\155\036\141\041\055\042" +
    "\062\001\001\000\002\001\001\000\004\047\120\001\001" +
    "\000\012\037\106\040\146\041\105\044\145\001\001\000" +
    "\002\001\001\000\010\037\106\040\122\041\105\001\001" +
    "\000\004\036\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\037\106\040\143\041\105\001\001\000\002\001\001" +
    "\000\004\036\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\141\001\001\000\002\001\001\000\012" +
    "\037\106\040\146\041\105\044\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\157\001\001\000\032\011\053\012\054\023" +
    "\073\024\060\025\057\026\154\030\070\031\056\032\153" +
    "\033\160\041\055\042\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\141\001\001\000\032\011\053\012\054\023\073\024" +
    "\060\025\057\026\154\030\070\031\056\032\153\033\165" +
    "\041\055\042\062\001\001\000\004\034\166\001\001\000" +
    "\002\001\001\000\004\036\141\001\001\000\010\037\106" +
    "\040\171\041\105\001\001\000\004\036\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\025\045\176" +
    "\001\001\000\010\037\106\040\177\041\105\001\001\000" +
    "\002\001\001\000\004\036\141\001\001\000\004\045\201" +
    "\001\001\000\002\001\001\000\010\037\106\040\205\041" +
    "\105\001\001\000\034\011\053\012\054\023\073\024\060" +
    "\025\057\026\154\030\070\031\056\032\153\033\204\036" +
    "\141\041\055\042\062\001\001\000\002\001\001\000\004" +
    "\036\141\001\001\000\032\011\053\012\054\023\073\024" +
    "\060\025\057\026\154\030\070\031\056\032\153\033\207" +
    "\041\055\042\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\215\012\054\024\060\025\217\042" +
    "\062\001\001\000\002\001\001\000\004\047\173\001\001" +
    "\000\002\001\001\000\012\037\106\040\146\041\105\044" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 93. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Program start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Program> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // program ::= imports defns 
            {
                Program RESULT = null;
                int Isleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Isright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Use> Is = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Use>> value();
                int Dsleft = CUP$parser$stack.peek().left;
                int Dsright = CUP$parser$stack.peek().right;
                ArrayList<Definition> Ds = CUP$parser$stack.peek().<ArrayList<Definition>> value();
                 RESULT = new Program(Is, Ds); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // imports ::= use imports 
            {
                ArrayList<Use> RESULT = null;
                int uleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int uright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Use u = CUP$parser$stack.elementAt(CUP$parser$top-1).<Use> value();
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                ArrayList<Use> It = CUP$parser$stack.peek().<ArrayList<Use>> value();
                 It.add(0, u); RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // imports ::= 
            {
                ArrayList<Use> RESULT = null;
                 RESULT = new ArrayList<Use>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // use ::= USE IDENTIFIER semi 
            {
                Use RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                 RESULT = new Use(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // defns ::= definition defns 
            {
                ArrayList<Definition> RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Definition d = CUP$parser$stack.elementAt(CUP$parser$top-1).<Definition> value();
                int Dtleft = CUP$parser$stack.peek().left;
                int Dtright = CUP$parser$stack.peek().right;
                ArrayList<Definition> Dt = CUP$parser$stack.peek().<ArrayList<Definition>> value();
                 Dt.add(0, d); RESULT = Dt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("defns",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // defns ::= 
            {
                ArrayList<Definition> RESULT = null;
                 RESULT =  new ArrayList<Definition>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("defns",3, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // definition ::= method 
            {
                Definition RESULT = null;
                int mleft = CUP$parser$stack.peek().left;
                int mright = CUP$parser$stack.peek().right;
                Method m = CUP$parser$stack.peek().<Method> value();
                 RESULT = m; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // definition ::= globalDecl semi 
            {
                Definition RESULT = null;
                int gDleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int gDright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                GlobalDecl gD = CUP$parser$stack.elementAt(CUP$parser$top-1).<GlobalDecl> value();
                 RESULT = gD; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // abs_meth ::= IDENTIFIER OPEN_PAREN decls CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-5).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<GlobalDecl> Ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<GlobalDecl>> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                TypeList Ts = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new Method(id, Ds, Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",5, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // abs_meth ::= IDENTIFIER OPEN_PAREN decls CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<GlobalDecl> Ds = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<GlobalDecl>> value();
                 RESULT = new Method(id, Ds, new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",5, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // abs_meth ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                TypeList Ts = CUP$parser$stack.peek().<TypeList> value();
                 RESULT = new Method(id, new ArrayList<GlobalDecl>(), Ts, null); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",5, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // abs_meth ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Method(id, new ArrayList<GlobalDecl>(), new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",5, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // decls ::= globalDecl 
            {
                ArrayList<GlobalDecl> RESULT = null;
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                GlobalDecl d = CUP$parser$stack.peek().<GlobalDecl> value();
                 ArrayList<GlobalDecl> Ds = new ArrayList<>(); Ds.add(d); RESULT = Ds; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",9, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // decls ::= globalDecl COMMA decls 
            {
                ArrayList<GlobalDecl> RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                GlobalDecl d = CUP$parser$stack.elementAt(CUP$parser$top-2).<GlobalDecl> value();
                int Dsleft = CUP$parser$stack.peek().left;
                int Dsright = CUP$parser$stack.peek().right;
                ArrayList<GlobalDecl> Ds = CUP$parser$stack.peek().<ArrayList<GlobalDecl>> value();
                 Ds.add(d); RESULT = Ds; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // arrayinit ::= IDENTIFIER COLON bracketlst 
            {
                Object RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayinit",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // bracketlst ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bracketlst",35, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // bracketlst ::= OPEN_BRACKET expr CLOSE_BRACKET bracketlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bracketlst",35, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // nullbrackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("nullbrackets",36, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // nullbrackets ::= OPEN_BRACKET CLOSE_BRACKET nullbrackets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("nullbrackets",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // globalDecl ::= IDENTIFIER COLON type 
            {
                GlobalDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new GlobalDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",8, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // decl ::= globalDecl 
            {
                GlobalDecl RESULT = null;
                int gDleft = CUP$parser$stack.peek().left;
                int gDright = CUP$parser$stack.peek().right;
                GlobalDecl gD = CUP$parser$stack.peek().<GlobalDecl> value();
                RESULT = gD;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // decl ::= arrayinit 
            {
                GlobalDecl RESULT = null;
                int aleft = CUP$parser$stack.peek().left;
                int aright = CUP$parser$stack.peek().right;
                Object a = CUP$parser$stack.peek().<Object> value();
                RESULT = a;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",7, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // globalAssign ::= globalTargets EQUALS litLst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalAssign",14, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // assign ::= targets EQUALS vallst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // method ::= abs_meth fnblock 
            {
                Method RESULT = null;
                int amleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int amright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Method am = CUP$parser$stack.elementAt(CUP$parser$top-1).<Method> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Object b = CUP$parser$stack.peek().<Object> value();
                 RESULT = new Method(am, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // typelst ::= type 
            {
                TypeList RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // typelst ::= type COMMA typelst 
            {
                TypeList RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // statementlst ::= statement 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlst",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // statementlst ::= statement statementlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlst",21, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // if ::= IF expr block elseopt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",22, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // if ::= IF OPEN_PAREN expr CLOSE_PAREN block elseopt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",22, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // while ::= WHILE OPEN_PAREN expr CLOSE_PAREN block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",23, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // while ::= WHILE expr block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",23, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // fnblock ::= OPEN_BRACE statementlst CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // fnblock ::= OPEN_BRACE statementlst return CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",24, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // fnblock ::= OPEN_BRACE return CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // fnblock ::= OPEN_BRACE CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",24, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // block ::= statement 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // block ::= fnblock 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // statement ::= if 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // statement ::= while 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // statement ::= decl semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // statement ::= assign semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // statement ::= fncall semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // fncall ::= IDENTIFIER OPEN_PAREN vallst CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",31, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // fncall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // elseopt ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseopt",26, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // elseopt ::= ELSE block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseopt",26, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // unop ::= MINUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // unop ::= NOT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // binop ::= PLUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // binop ::= MINUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // binop ::= TIMES 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // binop ::= HIGHTIMES 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // binop ::= DIVIDE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // binop ::= MODULO 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // binop ::= LT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // binop ::= LEQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // binop ::= GT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // binop ::= GEQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // binop ::= EQB 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // binop ::= NEQB 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // binop ::= AND 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // binop ::= OR 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",28, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // return ::= RETURN semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",33, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // return ::= RETURN vallst semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",33, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // vallst ::= expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("vallst",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // vallst ::= expr COMMA vallst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("vallst",34, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // type ::= BOOL 
            {
                Type RESULT = null;
                RESULT = BOOL();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // type ::= INT 
            {
                Type RESULT = null;
                RESULT = INT();
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // type ::= type OPEN_BRACKET CLOSE_BRACKET 
            {
                Type RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                RESULT = Array(t);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // expr ::= expr binop expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // expr ::= unop expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // expr ::= IDENTIFIER 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // expr ::= fncall 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // expr ::= STRING_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // expr ::= INTEGER_LITERAL 
            {
                Object RESULT = null;
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Object l = CUP$parser$stack.peek().<Object> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // expr ::= CHARACTER_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // expr ::= FALSE 
            {
                Object RESULT = null;
                RESULT = BoolLit(false);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // expr ::= TRUE 
            {
                Object RESULT = null;
                RESULT = BoolLit(true);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // expr ::= OPEN_BRACE vallst CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // expr ::= IDENTIFIER idxlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",30, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // idxlst ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("idxlst",37, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // idxlst ::= OPEN_BRACKET expr CLOSE_BRACKET idxlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("idxlst",37, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // target ::= decl 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // target ::= UNDERSCORE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // target ::= IDENTIFIER 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // target ::= IDENTIFIER idxlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // targets ::= target 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("targets",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // targets ::= target COMMA targets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("targets",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // semi ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // semi ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",27, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
