
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.internal.markers.*;
import java.util.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return SymbolTable.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\005\004\000\002\005\002\000\002\006\005\000" +
    "\002\007\004\000\002\007\002\000\002\010\003\000\002" +
    "\010\004\000\002\013\005\000\002\013\007\000\002\011" +
    "\010\000\002\011\006\000\002\011\007\000\002\011\005" +
    "\000\002\045\005\000\002\025\003\000\002\025\005\000" +
    "\002\030\003\000\002\030\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\021\006\000\002\021\010" +
    "\000\002\022\007\000\002\022\005\000\002\027\003\000" +
    "\002\027\003\000\002\026\005\000\002\026\006\000\002" +
    "\026\005\000\002\033\006\000\002\033\005\000\002\032" +
    "\002\000\002\032\004\000\002\047\003\000\002\047\002" +
    "\000\002\023\004\000\002\023\005\000\002\046\005\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\044\003\000\002\044\005\000\002\035" +
    "\005\000\002\041\003\000\002\041\005\000\002\042\006" +
    "\000\002\042\006\000\002\012\004\000\002\014\003\000" +
    "\002\014\005\000\002\024\005\000\002\024\004\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\005\000\002\024\003\000\002\024\006" +
    "\000\002\037\003\000\002\037\005\000\002\052\006\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\003\000\002\020\004\000\002\034\006" +
    "\000\002\034\005\000\002\051\003\000\002\054\002\000" +
    "\002\051\004\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\015\003\000\002" +
    "\015\003\000\002\016\003\000\002\016\005" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\006\055\005\056\006\001\002\000\004\002" +
    "\243\001\002\000\006\002\ufffd\004\240\001\002\000\010" +
    "\002\ufffa\004\ufffa\040\011\001\002\000\006\002\ufff7\004" +
    "\024\001\002\000\010\002\ufffa\004\ufffa\040\011\001\002" +
    "\000\004\004\013\001\002\000\004\002\uffff\001\002\000" +
    "\012\002\uffd5\004\uffd5\040\uffd5\052\014\001\002\000\024" +
    "\002\uffd6\004\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\047\uffd6\053\uffd6\001\002\000\010\002\ufff9\004\ufff9" +
    "\040\ufff9\001\002\000\006\002\ufffb\004\ufffb\001\002\000" +
    "\004\046\065\001\002\000\006\002\ufff6\004\ufff6\001\002" +
    "\000\010\002\uffd5\004\uffd5\052\014\001\002\000\004\002" +
    "\ufffc\001\002\000\006\002\ufff7\004\024\001\002\000\006" +
    "\044\025\050\026\001\002\000\006\004\046\045\045\001" +
    "\002\000\006\012\032\013\027\001\002\000\036\002\uff9b" +
    "\004\uff9b\031\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\042" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\001\002\000\014\002\ufff4\004\ufff4\031\033\042\034\052" +
    "\ufff4\001\002\000\036\002\uff99\004\uff99\031\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\042\uff99\045\uff99\046\uff99\047" +
    "\uff99\051\uff99\052\uff99\053\uff99\001\002\000\036\002\uff9a" +
    "\004\uff9a\031\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\042" +
    "\uff9a\045\uff9a\046\uff9a\047\uff9a\051\uff9a\052\uff9a\053\uff9a" +
    "\001\002\000\012\006\036\007\041\010\040\011\042\001" +
    "\002\000\004\043\035\001\002\000\036\002\uff98\004\uff98" +
    "\031\uff98\034\uff98\035\uff98\036\uff98\037\uff98\042\uff98\045" +
    "\uff98\046\uff98\047\uff98\051\uff98\052\uff98\053\uff98\001\002" +
    "\000\070\002\uffb3\004\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\043\uffb3\045\uffb3\046\uffb3\047\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\001\002\000\010\002\ufff3\004\ufff3\052" +
    "\ufff3\001\002\000\070\002\uffb1\004\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\043\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\001\002\000\070\002\uffb4" +
    "\004\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\043" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\001\002\000\070\002\uffb2\004\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\043\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\001\002\000\004\045\060\001" +
    "\002\000\006\045\uffed\051\056\001\002\000\012\002\uffef" +
    "\004\uffef\046\uffef\050\051\001\002\000\004\050\047\001" +
    "\002\000\006\012\032\013\027\001\002\000\010\042\034" +
    "\045\uffee\051\uffee\001\002\000\006\012\032\013\027\001" +
    "\002\000\010\002\ufff0\004\ufff0\046\ufff0\001\002\000\014" +
    "\002\uffc5\004\uffc5\042\034\046\uffc5\051\054\001\002\000" +
    "\006\012\032\013\027\001\002\000\010\002\uffc4\004\uffc4" +
    "\046\uffc4\001\002\000\004\004\046\001\002\000\004\045" +
    "\uffec\001\002\000\012\002\ufff1\004\ufff1\046\ufff1\050\061" +
    "\001\002\000\006\012\032\013\027\001\002\000\010\002" +
    "\ufff2\004\ufff2\046\ufff2\001\002\000\004\002\ufff8\001\002" +
    "\000\006\002\ufff5\004\ufff5\001\002\000\014\004\104\034" +
    "\106\036\103\037\075\053\067\001\002\000\006\002\uffc6" +
    "\004\uffc6\001\002\000\006\031\uffcf\051\uffcf\001\002\000" +
    "\022\004\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\047\uffd5" +
    "\052\014\053\uffd5\001\002\000\004\042\233\001\002\000" +
    "\020\004\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\047\uffe8" +
    "\053\uffe8\001\002\000\006\031\uffcd\051\227\001\002\000" +
    "\004\031\225\001\002\000\032\004\126\005\125\006\036" +
    "\007\041\010\040\011\042\015\116\022\uffab\041\114\046" +
    "\120\047\uffd5\052\014\001\002\000\022\004\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\047\uffd5\052\014\053\uffd5\001" +
    "\002\000\022\004\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\047\uffd5\052\014\053\uffd5\001\002\000\006\037\075\047" +
    "\215\001\002\000\004\042\uffb7\001\002\000\016\004\104" +
    "\034\106\036\103\037\uffeb\047\uffeb\053\067\001\002\000" +
    "\030\004\126\005\125\006\036\007\041\010\040\011\042" +
    "\015\116\022\uffab\041\114\044\206\046\120\001\002\000" +
    "\014\031\uffce\042\uffb6\044\200\050\201\051\uffce\001\002" +
    "\000\010\031\uffd1\042\uffb5\051\uffd1\001\002\000\030\004" +
    "\126\005\125\006\036\007\041\010\040\011\042\015\116" +
    "\022\uffab\041\114\044\117\046\120\001\002\000\020\004" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\047\uffe9\053\uffe9" +
    "\001\002\000\026\004\uffd5\031\uffd0\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\047\uffd5\051\uffd0\052\014\053\uffd5\001\002" +
    "\000\004\047\112\001\002\000\022\002\uffdb\004\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\047\uffdb\053\uffdb\001\002" +
    "\000\020\004\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\047" +
    "\uffe5\053\uffe5\001\002\000\004\044\175\001\002\000\026" +
    "\004\126\005\125\006\036\007\041\010\040\011\042\015" +
    "\116\022\uffab\041\114\046\120\001\002\000\026\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\015\uffac\022" +
    "\uffac\041\uffac\046\uffac\001\002\000\026\004\126\005\125" +
    "\006\036\007\041\010\040\011\042\015\116\022\uffab\041" +
    "\114\046\120\001\002\000\026\004\126\005\125\006\036" +
    "\007\041\010\040\011\042\015\116\022\uffab\041\114\046" +
    "\120\001\002\000\004\022\165\001\002\000\070\004\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\042\uffb7\043" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\001\002\000\066\004\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\043\uffbe\045\uffbe\046\uffbe\047\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\001\002\000\050\004\104\014\153\015" +
    "\144\016\136\017\141\020\145\021\137\023\140\024\151" +
    "\025\143\026\146\027\147\030\135\032\150\033\142\034" +
    "\106\036\103\046\065\053\067\001\002\000\066\004\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\043\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002" +
    "\000\072\004\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\042\uffb6\043\uffc1\044\130\045\uffc1\046\uffc1\047\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\001\002\000\070\004\uffbc\014" +
    "\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\042\uffb5\043\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\001" +
    "\002\000\030\004\126\005\125\006\036\007\041\010\040" +
    "\011\042\015\116\022\uffab\041\114\045\133\046\120\001" +
    "\002\000\004\045\156\001\002\000\062\004\uffba\014\153" +
    "\015\144\016\136\017\141\020\145\021\137\023\140\024" +
    "\151\025\143\026\146\027\147\030\135\032\150\033\142" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\045\uffba\047\uffba\051" +
    "\134\052\uffba\053\uffba\001\002\000\070\004\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\042\uffad\043\uffad\045" +
    "\uffad\046\uffad\047\uffad\051\uffad\052\uffad\053\uffad\001\002" +
    "\000\026\004\126\005\125\006\036\007\041\010\040\011" +
    "\042\015\116\022\uffab\041\114\046\120\001\002\000\026" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\015" +
    "\uff9c\022\uff9c\041\uff9c\046\uff9c\001\002\000\026\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\015\uffa7\022" +
    "\uffa7\041\uffa7\046\uffa7\001\002\000\026\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\015\uffa4\022\uffa4\041" +
    "\uffa4\046\uffa4\001\002\000\026\004\uffa3\005\uffa3\006\uffa3" +
    "\007\uffa3\010\uffa3\011\uffa3\015\uffa3\022\uffa3\041\uffa3\046" +
    "\uffa3\001\002\000\026\004\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\015\uffa6\022\uffa6\041\uffa6\046\uffa6\001" +
    "\002\000\026\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\015\uff9e\022\uff9e\041\uff9e\046\uff9e\001\002\000" +
    "\026\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1" +
    "\015\uffa1\022\uffa1\041\uffa1\046\uffa1\001\002\000\026\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\015\uffa8" +
    "\022\uffa8\041\uffa8\046\uffa8\001\002\000\026\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\015\uffa5\022\uffa5" +
    "\041\uffa5\046\uffa5\001\002\000\026\004\uffa0\005\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\015\uffa0\022\uffa0\041\uffa0" +
    "\046\uffa0\001\002\000\026\004\uff9d\005\uff9d\006\uff9d\007" +
    "\uff9d\010\uff9d\011\uff9d\015\uff9d\022\uff9d\041\uff9d\046\uff9d" +
    "\001\002\000\026\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\015\uff9f\022\uff9f\041\uff9f\046\uff9f\001\002" +
    "\000\026\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\015\uffa2\022\uffa2\041\uffa2\046\uffa2\001\002\000\026" +
    "\004\126\005\125\006\036\007\041\010\040\011\042\015" +
    "\116\022\uffab\041\114\046\120\001\002\000\026\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\015\uffa9\022" +
    "\uffa9\041\uffa9\046\uffa9\001\002\000\066\004\uffc3\014\153" +
    "\015\144\016\136\017\141\020\145\021\137\023\140\024" +
    "\151\025\143\026\146\027\147\030\135\032\150\033\142" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\043\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3\001\002\000\024" +
    "\004\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\045\uffb9\047" +
    "\uffb9\052\uffb9\053\uffb9\001\002\000\070\004\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\042\uffae\043\uffae\045" +
    "\uffae\046\uffae\047\uffae\051\uffae\052\uffae\053\uffae\001\002" +
    "\000\020\004\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\047" +
    "\uffdf\053\uffdf\001\002\000\020\004\uffd8\034\uffd8\035\162" +
    "\036\uffd8\037\uffd8\047\uffd8\053\uffd8\001\002\000\020\004" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\047\uffde\053\uffde" +
    "\001\002\000\014\004\104\034\106\036\103\046\065\053" +
    "\067\001\002\000\020\004\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\047\uffe3\053\uffe3\001\002\000\020\004\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\047\uffd7\053\uffd7\001\002" +
    "\000\026\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\015\uffaa\022\uffaa\041\uffaa\046\uffaa\001\002\000\004" +
    "\047\167\001\002\000\066\004\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\001\002\000\040\014\153\015" +
    "\144\016\136\017\141\020\145\021\137\023\140\024\151" +
    "\025\143\026\146\027\147\030\135\032\150\033\142\045" +
    "\171\001\002\000\014\004\104\034\106\036\103\046\065" +
    "\053\067\001\002\000\020\004\uffd8\034\uffd8\035\162\036" +
    "\uffd8\037\uffd8\047\uffd8\053\uffd8\001\002\000\020\004\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\047\uffe2\053\uffe2\001" +
    "\002\000\066\004\uffc2\014\153\015\144\016\136\017\141" +
    "\020\145\021\137\023\140\024\151\025\143\026\146\027" +
    "\147\030\135\032\150\033\142\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\043\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\001\002\000\026\004\126\005\125\006\036" +
    "\007\041\010\040\011\042\015\116\022\uffab\041\114\046" +
    "\120\001\002\000\040\014\153\015\144\016\136\017\141" +
    "\020\145\021\137\023\140\024\151\025\143\026\146\027" +
    "\147\030\135\032\150\033\142\045\177\001\002\000\066" +
    "\004\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\043" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\001\002\000\030\004\126\005\125\006\036\007\041\010" +
    "\040\011\042\015\116\022\uffab\041\114\045\204\046\120" +
    "\001\002\000\006\012\032\013\027\001\002\000\030\004" +
    "\uffd2\031\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\042\034" +
    "\047\uffd2\051\uffd2\052\uffd2\053\uffd2\001\002\000\004\045" +
    "\205\001\002\000\024\004\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\042\uffad\047\uffd9\052\uffd9\053\uffd9\001\002\000" +
    "\024\004\uffda\034\uffda\035\uffda\036\uffda\037\uffda\042\uffae" +
    "\047\uffda\052\uffda\053\uffda\001\002\000\026\004\126\005" +
    "\125\006\036\007\041\010\040\011\042\015\116\022\uffab" +
    "\041\114\046\120\001\002\000\050\004\104\014\153\015" +
    "\144\016\136\017\141\020\145\021\137\023\140\024\151" +
    "\025\143\026\146\027\147\030\135\032\150\033\142\034" +
    "\106\036\103\046\065\053\067\001\002\000\020\004\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\047\uffe0\053\uffe0\001" +
    "\002\000\040\014\153\015\144\016\136\017\141\020\145" +
    "\021\137\023\140\024\151\025\143\026\146\027\147\030" +
    "\135\032\150\033\142\045\212\001\002\000\014\004\104" +
    "\034\106\036\103\046\065\053\067\001\002\000\020\004" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\047\uffe1\053\uffe1" +
    "\001\002\000\006\037\uffea\047\uffea\001\002\000\022\002" +
    "\uffdd\004\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\047\uffdd" +
    "\053\uffdd\001\002\000\004\047\217\001\002\000\022\002" +
    "\uffdc\004\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\047\uffdc" +
    "\053\uffdc\001\002\000\020\004\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\047\uffe4\053\uffe4\001\002\000\020\004\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\047\uffe7\053\uffe7\001" +
    "\002\000\006\047\uffd5\052\014\001\002\000\004\047\uffd4" +
    "\001\002\000\004\047\uffd3\001\002\000\026\004\126\005" +
    "\125\006\036\007\041\010\040\011\042\015\116\022\uffab" +
    "\041\114\046\120\001\002\000\022\004\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\047\uffcb\052\uffcb\053\uffcb\001\002" +
    "\000\006\004\231\053\067\001\002\000\004\031\uffcc\001" +
    "\002\000\014\031\uffce\042\uffb6\044\130\050\201\051\uffce" +
    "\001\002\000\006\031\uffd0\051\uffd0\001\002\000\026\004" +
    "\126\005\125\006\036\007\041\010\040\011\042\015\116" +
    "\022\uffab\041\114\046\120\001\002\000\040\014\153\015" +
    "\144\016\136\017\141\020\145\021\137\023\140\024\151" +
    "\025\143\026\146\027\147\030\135\032\150\033\142\043" +
    "\235\001\002\000\072\004\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\042\uffb8\043\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8\001\002\000\020" +
    "\004\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\047\uffe6\053" +
    "\uffe6\001\002\000\006\002\ufffd\004\240\001\002\000\004" +
    "\044\025\001\002\000\004\002\000\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\240\011\236\001\001\000\010\004\011\005\006" +
    "\006\007\001\001\000\014\007\021\010\022\011\016\012" +
    "\017\013\020\001\001\000\006\005\015\006\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\065\001\001\000\002\001\001\000\004\047" +
    "\063\001\001\000\002\001\001\000\014\007\062\010\022" +
    "\011\016\012\017\013\020\001\001\000\002\001\001\000" +
    "\006\025\042\045\043\001\001\000\006\015\030\016\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\030\016\047\001\001\000\002" +
    "\001\001\000\010\014\051\015\030\016\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\054\015\030" +
    "\016\052\001\001\000\002\001\001\000\006\025\056\045" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\061\015\030\016\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\021\106\022\071" +
    "\023\110\030\077\031\101\033\076\034\100\035\075\036" +
    "\067\043\072\044\073\046\107\052\104\053\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\122\024\131\034\121\037" +
    "\221\047\222\051\114\052\126\053\070\054\120\001\001" +
    "\000\004\047\220\001\001\000\004\047\217\001\001\000" +
    "\004\023\215\001\001\000\002\001\001\000\034\021\106" +
    "\022\071\030\213\031\101\033\076\034\100\035\075\036" +
    "\067\043\072\044\073\046\107\052\104\053\070\001\001" +
    "\000\020\017\122\024\206\034\121\051\114\052\126\053" +
    "\070\054\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\017\122\024\123\034\121\051\114\052\126\053" +
    "\070\054\120\001\001\000\002\001\001\000\004\047\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\017\122\024\173\034\121" +
    "\051\114\052\126\053\070\054\120\001\001\000\002\001" +
    "\001\000\020\017\122\024\167\034\121\051\114\052\126" +
    "\053\070\054\120\001\001\000\022\017\122\024\131\034" +
    "\121\037\165\051\114\052\126\053\070\054\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\021\106\022\071\026\160\027\157\031\156\033\076" +
    "\034\100\035\075\036\067\043\072\044\073\046\107\050" +
    "\151\052\104\053\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\017\122\024\131\034" +
    "\121\037\130\051\114\052\126\053\070\054\120\001\001" +
    "\000\002\001\001\000\004\050\151\001\001\000\002\001" +
    "\001\000\022\017\122\024\131\034\121\037\154\051\114" +
    "\052\126\053\070\054\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\122\024" +
    "\153\034\121\051\114\052\126\053\070\054\120\001\001" +
    "\000\002\001\001\000\004\050\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\162" +
    "\001\001\000\002\001\001\000\036\021\106\022\071\026" +
    "\160\027\163\031\156\033\076\034\100\035\075\036\067" +
    "\043\072\044\073\046\107\052\104\053\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\151\001\001\000" +
    "\036\021\106\022\071\026\160\027\171\031\156\033\076" +
    "\034\100\035\075\036\067\043\072\044\073\046\107\052" +
    "\104\053\070\001\001\000\004\032\172\001\001\000\002" +
    "\001\001\000\004\050\151\001\001\000\020\017\122\024" +
    "\175\034\121\051\114\052\126\053\070\054\120\001\001" +
    "\000\004\050\151\001\001\000\002\001\001\000\022\017" +
    "\122\024\131\034\121\037\202\051\114\052\126\053\070" +
    "\054\120\001\001\000\006\015\030\016\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\017\122\024\210\034\121\051\114\052" +
    "\126\053\070\054\120\001\001\000\040\021\106\022\071" +
    "\026\160\027\207\031\156\033\076\034\100\035\075\036" +
    "\067\043\072\044\073\046\107\050\151\052\104\053\070" +
    "\001\001\000\002\001\001\000\004\050\151\001\001\000" +
    "\036\021\106\022\071\026\160\027\212\031\156\033\076" +
    "\034\100\035\075\036\067\043\072\044\073\046\107\052" +
    "\104\053\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\017\122\024" +
    "\131\034\121\037\225\051\114\052\126\053\070\054\120" +
    "\001\001\000\002\001\001\000\016\034\100\043\072\044" +
    "\227\046\231\052\104\053\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\122\024" +
    "\233\034\121\051\114\052\126\053\070\054\120\001\001" +
    "\000\004\050\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\241\011\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 105. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= file EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Eta start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Eta> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // file ::= INTERFACE interface 
            {
                Eta RESULT = null;
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                Interface It = CUP$parser$stack.peek().<Interface> value();
                 RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // file ::= PROGRAM program 
            {
                Eta RESULT = null;
                int Pleft = CUP$parser$stack.peek().left;
                int Pright = CUP$parser$stack.peek().right;
                Program P = CUP$parser$stack.peek().<Program> value();
                 RESULT = P;  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // interface ::= methodHeader interface 
            {
                Interface RESULT = null;
                int amleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int amright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Method am = CUP$parser$stack.elementAt(CUP$parser$top-1).<Method> value();
                int itleft = CUP$parser$stack.peek().left;
                int itright = CUP$parser$stack.peek().right;
                Interface it = CUP$parser$stack.peek().<Interface> value();
                 ArrayList<Method> ml = it.getMethodHeaders(); ml.add(0, am); RESULT = new Interface(ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // interface ::= 
            {
                Interface RESULT = null;
                 RESULT = new Interface(new ArrayList<Method>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // program ::= imports allDefinitions 
            {
                Program RESULT = null;
                int Isleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Isright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Use> Is = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Use>> value();
                int Dsleft = CUP$parser$stack.peek().left;
                int Dsright = CUP$parser$stack.peek().right;
                ArrayList<Definition> Ds = CUP$parser$stack.peek().<ArrayList<Definition>> value();
                 RESULT = new Program(Is, Ds); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // imports ::= use imports 
            {
                ArrayList<Use> RESULT = null;
                int uleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int uright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Use u = CUP$parser$stack.elementAt(CUP$parser$top-1).<Use> value();
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                ArrayList<Use> It = CUP$parser$stack.peek().<ArrayList<Use>> value();
                 It.add(0, u); RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // imports ::= 
            {
                ArrayList<Use> RESULT = null;
                 RESULT = new ArrayList<Use>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",3, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // use ::= USE IDENTIFIER semi 
            {
                Use RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                 RESULT = new Use(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // allDefinitions ::= definition allDefinitions 
            {
                ArrayList<Definition> RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Definition d = CUP$parser$stack.elementAt(CUP$parser$top-1).<Definition> value();
                int Dtleft = CUP$parser$stack.peek().left;
                int Dtright = CUP$parser$stack.peek().right;
                ArrayList<Definition> Dt = CUP$parser$stack.peek().<ArrayList<Definition>> value();
                 Dt.add(d); RESULT = Dt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("allDefinitions",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // allDefinitions ::= 
            {
                ArrayList<Definition> RESULT = null;
                 RESULT = new ArrayList<Definition>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("allDefinitions",5, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // definition ::= method 
            {
                Definition RESULT = null;
                int mleft = CUP$parser$stack.peek().left;
                int mright = CUP$parser$stack.peek().right;
                Method m = CUP$parser$stack.peek().<Method> value();
                 RESULT = m; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // definition ::= globalDecl semi 
            {
                Definition RESULT = null;
                int dcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                GlobalDecl dc = CUP$parser$stack.elementAt(CUP$parser$top-1).<GlobalDecl> value();
                 RESULT = dc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // globalDecl ::= IDENTIFIER COLON type 
            {
                GlobalDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new GlobalDecl(id, t, null); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // globalDecl ::= IDENTIFIER COLON type EQUALS primitiveLiteral 
            {
                GlobalDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                Literal pl = CUP$parser$stack.peek().<Literal> value();
                 RESULT = new GlobalDecl(id, t, pl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",9, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // methodHeader ::= IDENTIFIER OPEN_PAREN methodArgs CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-5).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<VarDecl.RawVarDecl> Ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<VarDecl.RawVarDecl>> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                ArrayList<Type> Ts = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 RESULT = new Method(id, Ds, Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // methodHeader ::= IDENTIFIER OPEN_PAREN methodArgs CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<VarDecl.RawVarDecl> Ds = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<VarDecl.RawVarDecl>> value();
                 RESULT = new Method(id, Ds, new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // methodHeader ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                ArrayList<Type> Ts = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 RESULT = new Method(id, new ArrayList<>(), Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // methodHeader ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Method(id, new ArrayList<>(), new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // methodArg ::= IDENTIFIER COLON type 
            {
                VarDecl.RawVarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                RESULT = new VarDecl.RawVarDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArg",35, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // methodArgs ::= methodArg 
            {
                ArrayList<VarDecl.RawVarDecl> RESULT = null;
                int maleft = CUP$parser$stack.peek().left;
                int maright = CUP$parser$stack.peek().right;
                VarDecl.RawVarDecl ma = CUP$parser$stack.peek().<VarDecl.RawVarDecl> value();
                RESULT = ParseUtil.singleton(ma); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArgs",19, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // methodArgs ::= methodArg COMMA methodArgs 
            {
                ArrayList<VarDecl.RawVarDecl> RESULT = null;
                int maleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int maright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                VarDecl.RawVarDecl ma = CUP$parser$stack.elementAt(CUP$parser$top-2).<VarDecl.RawVarDecl> value();
                int malleft = CUP$parser$stack.peek().left;
                int malright = CUP$parser$stack.peek().right;
                ArrayList<VarDecl.RawVarDecl> mal = CUP$parser$stack.peek().<ArrayList<VarDecl.RawVarDecl>> value();
                mal.add(0, ma); RESULT = mal;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArgs",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // statementList ::= statement 
            {
                ArrayList<Statement> RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                RESULT = ParseUtil.singleton(s);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // statementList ::= statement statementList 
            {
                ArrayList<Statement> RESULT = null;
                int sleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement s = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                int slleft = CUP$parser$stack.peek().left;
                int slright = CUP$parser$stack.peek().right;
                ArrayList<Statement> sl = CUP$parser$stack.peek().<ArrayList<Statement>> value();
                sl.add(0, s); RESULT = sl;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // statement ::= if 
            {
                Statement RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Statement.If i = CUP$parser$stack.peek().<Statement.If> value();
                 RESULT = i; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // statement ::= while 
            {
                Statement RESULT = null;
                int wleft = CUP$parser$stack.peek().left;
                int wright = CUP$parser$stack.peek().right;
                Statement.While w = CUP$parser$stack.peek().<Statement.While> value();
                 RESULT = w; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // statement ::= multiAssign semi 
            {
                Statement RESULT = null;
                int aleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                MultiAssign a = CUP$parser$stack.elementAt(CUP$parser$top-1).<MultiAssign> value();
                 RESULT = a; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // statement ::= arrayInit semi 
            {
                Statement RESULT = null;
                int aleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayInit a = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayInit> value();
                 RESULT = a; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // statement ::= varDecl semi 
            {
                Statement RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl.RawVarDecl d = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl.RawVarDecl> value();
                 RESULT = d; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // statement ::= procedureCall semi 
            {
                Statement RESULT = null;
                int fnleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fnright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement.Procedure fn = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement.Procedure> value();
                 RESULT = fn; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // if ::= IF expr block elseOptional 
            {
                Statement.If RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement.Block b = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement.Block> value();
                int elsleft = CUP$parser$stack.peek().left;
                int elsright = CUP$parser$stack.peek().right;
                Statement.Block els = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = new Statement.If(e, b, els); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",15, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // if ::= IF OPEN_PAREN expr CLOSE_PAREN block elseOptional 
            {
                Statement.If RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expr> value();
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement.Block b = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement.Block> value();
                int elsleft = CUP$parser$stack.peek().left;
                int elsright = CUP$parser$stack.peek().right;
                Statement.Block els = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = new Statement.If(e, b, els); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",15, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // while ::= WHILE OPEN_PAREN expr CLOSE_PAREN block 
            {
                Statement.While RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement.Block b = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = new Statement.While(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",16, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // while ::= WHILE expr block 
            {
                Statement.While RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement.Block b = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = new Statement.While(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",16, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // block ::= statement 
            {
                Statement.Block RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                 RESULT = new Statement.Block(ParseUtil.singleton(s)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // block ::= returnableBlock 
            {
                Statement.Block RESULT = null;
                int rbleft = CUP$parser$stack.peek().left;
                int rbright = CUP$parser$stack.peek().right;
                Statement.Block rb = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = rb; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // returnableBlock ::= OPEN_BRACE statementList CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Statement>> value();
                 RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // returnableBlock ::= OPEN_BRACE statementList return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Statement>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                 sLst.add(r); RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",20, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // returnableBlock ::= OPEN_BRACE return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                 RESULT = new Statement.Block(ParseUtil.singleton(r)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // procedureCall ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Statement.Procedure RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int vlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> vl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Statement.Procedure(id, vl);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCall",25, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // procedureCall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Statement.Procedure RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Statement.Procedure(id, new ArrayList<Expr>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCall",25, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // elseOptional ::= 
            {
                Statement.Block RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseOptional",24, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // elseOptional ::= ELSE block 
            {
                Statement.Block RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement.Block b = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = new Statement.Block(ParseUtil.singleton(b)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseOptional",24, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // semi ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",37, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // semi ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",37, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // return ::= RETURN semi 
            {
                Statement RESULT = null;
                 RESULT = new Statement.Return(new ArrayList<Expr>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // return ::= RETURN exprList semi 
            {
                Statement RESULT = null;
                int exprLstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int exprLstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> exprLst = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Statement.Return(exprLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // varDecl ::= IDENTIFIER COLON type 
            {
                VarDecl.RawVarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new VarDecl.RawVarDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // assignable ::= arrayAccess 
            {
                AssignTarget RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr e1 = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new AssignTarget.ExprAssign(e1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",33, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // assignable ::= varDecl 
            {
                AssignTarget RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl.RawVarDecl vd = CUP$parser$stack.peek().<VarDecl.RawVarDecl> value();
                 RESULT = new AssignTarget.DeclAssign(vd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",33, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // assignable ::= UNDERSCORE 
            {
                AssignTarget RESULT = null;
                 RESULT = new AssignTarget.Underscore(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",33, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // assignable ::= IDENTIFIER 
            {
                AssignTarget RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new AssignTarget.ExprAssign(new Expr.Identifier(id)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",33, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // assignables ::= assignable 
            {
                ArrayList<AssignTarget> RESULT = null;
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                AssignTarget at = CUP$parser$stack.peek().<AssignTarget> value();
                 RESULT = ParseUtil.singleton(at); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignables",34, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // assignables ::= assignable COMMA assignables 
            {
                ArrayList<AssignTarget> RESULT = null;
                int atleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int atright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                AssignTarget at = CUP$parser$stack.elementAt(CUP$parser$top-2).<AssignTarget> value();
                int atlleft = CUP$parser$stack.peek().left;
                int atlright = CUP$parser$stack.peek().right;
                ArrayList<AssignTarget> atl = CUP$parser$stack.peek().<ArrayList<AssignTarget>> value();
                 atl.add(0, at); RESULT = atl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignables",34, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // multiAssign ::= assignables EQUALS exprList 
            {
                MultiAssign RESULT = null;
                int tgleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tgright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<AssignTarget> tg = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<AssignTarget>> value();
                int exprsleft = CUP$parser$stack.peek().left;
                int exprsright = CUP$parser$stack.peek().right;
                ArrayList<Expr> exprs = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new MultiAssign(tg, exprs);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multiAssign",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // arrayinit ::= arrayNonBlank 
            {
                ArrayInit RESULT = null;
                int anbleft = CUP$parser$stack.peek().left;
                int anbright = CUP$parser$stack.peek().right;
                ArrayInit anb = CUP$parser$stack.peek().<ArrayInit> value();
                 RESULT = anb;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayinit",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // arrayinit ::= arrayinit OPEN_BRACKET CLOSE_BRACKET 
            {
                ArrayInit RESULT = null;
                int aileft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int airight = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayInit ai = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayInit> value();
                 RESULT = new ArrayInit.Dim(ai, null); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayinit",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // arrayNonBlank ::= primType OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayInit RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Primitive pt = CUP$parser$stack.elementAt(CUP$parser$top-3).<Primitive> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new ArrayInit.ArrPtr(pt, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",32, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // arrayNonBlank ::= arrayNonBlank OPEN_BRACKET expr CLOSE_BRACKET 
            {
                ArrayInit RESULT = null;
                int anbleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int anbright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayInit anb = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayInit> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new ArrayInit.Dim(anb, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",32, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // method ::= methodHeader returnableBlock 
            {
                Method RESULT = null;
                int amleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int amright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Method am = CUP$parser$stack.elementAt(CUP$parser$top-1).<Method> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement.Block b = CUP$parser$stack.peek().<Statement.Block> value();
                 am.setBody(b); RESULT = am; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // typelst ::= type 
            {
                ArrayList<Type> RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = ParseUtil.singleton(t);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // typelst ::= type COMMA typelst 
            {
                ArrayList<Type> RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int tlleft = CUP$parser$stack.peek().left;
                int tlright = CUP$parser$stack.peek().right;
                ArrayList<Type> tl = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 tl.add(0, t); RESULT = tl;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // expr ::= expr binop expr 
            {
                Expr RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr l = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                BinaryOp.Operation op = CUP$parser$stack.elementAt(CUP$parser$top-1).<BinaryOp.Operation> value();
                int rleft = CUP$parser$stack.peek().left;
                int rright = CUP$parser$stack.peek().right;
                Expr r = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(op, l, r); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // expr ::= unop expr 
            {
                Expr RESULT = null;
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UnaryOp.Operation op = CUP$parser$stack.elementAt(CUP$parser$top-1).<UnaryOp.Operation> value();
                int argleft = CUP$parser$stack.peek().left;
                int argright = CUP$parser$stack.peek().right;
                Expr arg = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryOp(op, arg); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // expr ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // expr ::= functionCall 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                Expr.FunctionCall fc = CUP$parser$stack.peek().<Expr.FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // expr ::= STRING_LITERAL 
            {
                Expr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                String s = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.StringLit(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // expr ::= primitiveLiteral 
            {
                Expr RESULT = null;
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                Literal pl = CUP$parser$stack.peek().<Literal> value();
                 RESULT = pl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // expr ::= OPEN_BRACE exprList CLOSE_BRACE 
            {
                Expr RESULT = null;
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> el = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Literal.ArrayLit(el); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // expr ::= arrayAccess 
            {
                Expr RESULT = null;
                int aaleft = CUP$parser$stack.peek().left;
                int aaright = CUP$parser$stack.peek().right;
                Expr aa = CUP$parser$stack.peek().<Expr> value();
                 RESULT = aa; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = e; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // exprList ::= expr 
            {
                ArrayList<Expr> RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = ParseUtil.singleton(e);  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // exprList ::= expr COMMA exprList 
            {
                ArrayList<Expr> RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                ArrayList<Expr> l = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                 l.add(0,e); RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",29, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // arrayAccess ::= indexable OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Expr RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expr> value();
                int e2left = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int e2right = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e2 = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new Expr.ArrayAccess(e1,e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",40, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // indexable ::= functionCall 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                Expr.FunctionCall fc = CUP$parser$stack.peek().<Expr.FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",41, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // indexable ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",41, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // indexable ::= arrayAccess 
            {
                Expr RESULT = null;
                int aaleft = CUP$parser$stack.peek().left;
                int aaright = CUP$parser$stack.peek().right;
                Expr aa = CUP$parser$stack.peek().<Expr> value();
                 RESULT = aa; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",41, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // primitiveLiteral ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int nleft = CUP$parser$stack.peek().left;
                int nright = CUP$parser$stack.peek().right;
                String n = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.IntLit(Long.parseLong(n)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // primitiveLiteral ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Integer c = CUP$parser$stack.peek().<Integer> value();
                 RESULT = new Literal.CharLit(c); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // primitiveLiteral ::= FALSE 
            {
                Literal RESULT = null;
                 RESULT = new Literal.BoolLit(false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // primitiveLiteral ::= TRUE 
            {
                Literal RESULT = null;
                 RESULT = new Literal.BoolLit(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // primLitLst ::= primitiveLiteral 
            {
                ArrayList<Literal> RESULT = null;
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                Literal pl = CUP$parser$stack.peek().<Literal> value();
                 RESULT = ParseUtil.singleton(pl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primLitLst",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // primLitLst ::= primitiveLiteral primLitLst 
            {
                ArrayList<Literal> RESULT = null;
                int plleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int plright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Literal pl = CUP$parser$stack.elementAt(CUP$parser$top-1).<Literal> value();
                int pllleft = CUP$parser$stack.peek().left;
                int pllright = CUP$parser$stack.peek().right;
                ArrayList<Literal> pll = CUP$parser$stack.peek().<ArrayList<Literal>> value();
                 pll.add(0, pl); RESULT = pll;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primLitLst",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // functionCall ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Expr.FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int vlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> vl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Expr.FunctionCall(id, vl);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCall",26, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // functionCall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Expr.FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Expr.FunctionCall(id, new ArrayList<Expr>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCall",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // unop ::= MINUS 
            {
                UnaryOp.Operation RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // NT$0 ::= 
            {
                UnaryOp.Operation RESULT = null;
 RESULT = UnaryOp.Operation.NEG; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",42, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // unop ::= NT$0 NOT 
            {
                UnaryOp.Operation RESULT = null;
                // propagate RESULT from NT$0
                RESULT = CUP$parser$stack.elementAt(CUP$parser$top-1).<UnaryOp.Operation> value();
                 RESULT = UnaryOp.Operation.NOT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",39, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // binop ::= PLUS 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.PLUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // binop ::= MINUS 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.MINUS; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // binop ::= TIMES 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.TIMES; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // binop ::= HIGHTIMES 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.HIGHTIMES; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // binop ::= DIVIDE 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.DIVIDE; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // binop ::= MODULO 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.MODULO; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // binop ::= LT 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.LT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // binop ::= LEQ 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.LEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // binop ::= GT 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.GT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // binop ::= GEQ 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.GEQ; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // binop ::= EQB 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.EQB; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // binop ::= NEQB 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.NEQB; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // binop ::= AND 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.AND; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // binop ::= OR 
            {
                BinaryOp.Operation RESULT = null;
                 RESULT = BinaryOp.Operation.OR; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",38, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // primType ::= BOOL 
            {
                Primitive RESULT = null;
                RESULT = new Primitive.BOOL(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primType",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // primType ::= INT 
            {
                Primitive RESULT = null;
                RESULT = new Primitive.INT(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primType",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // type ::= primType 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                Primitive pt = CUP$parser$stack.peek().<Primitive> value();
                RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // type ::= type OPEN_BRACKET CLOSE_BRACKET 
            {
                Type RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                RESULT = new Type.Array(t);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
