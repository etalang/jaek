
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return SymbolTable.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\004\010\000\002\004" +
    "\006\000\002\004\007\000\002\004\005\000\002\006\004" +
    "\000\002\007\004\000\002\007\002\000\002\010\005\000" +
    "\002\011\004\000\002\011\002\000\002\014\003\000\002" +
    "\014\005\000\002\013\005\000\002\015\005\000\002\012" +
    "\003\000\002\012\004\000\002\012\004\000\002\005\004" +
    "\000\002\021\003\000\002\021\005\000\002\023\003\000" +
    "\002\023\004\000\002\024\006\000\002\024\010\000\002" +
    "\025\007\000\002\025\005\000\002\026\005\000\002\026" +
    "\006\000\002\026\004\000\002\027\003\000\002\027\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\035\006\000\002" +
    "\035\005\000\002\030\002\000\002\030\004\000\002\033" +
    "\003\000\002\033\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\036\004" +
    "\000\002\036\005\000\002\037\003\000\002\037\005\000" +
    "\002\020\003\000\002\020\003\000\002\020\004\000\002" +
    "\020\004\000\002\040\003\000\002\040\005\000\002\040" +
    "\006\000\002\041\004\000\002\041\005\000\002\034\005" +
    "\000\002\034\004\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\005\000\002\034" +
    "\004\000\002\034\006\000\002\042\005\000\002\042\006" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\005\000\002\031\003\000\002\031\002" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\012\002\ufffa\004\ufffa\020\006\053\ufffa\001" +
    "\002\000\010\002\ufff7\004\023\053\015\001\002\000\012" +
    "\002\ufffa\004\ufffa\020\006\053\ufffa\001\002\000\004\004" +
    "\011\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\014\002\uffa8\004\uffa8\020\uffa8\052\012\053" +
    "\uffa8\001\002\000\024\002\uffa9\004\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\047\uffa9\053\uffa9\001\002\000" +
    "\012\002\ufff9\004\ufff9\020\ufff9\053\ufff9\001\002\000\010" +
    "\002\ufffb\004\ufffb\053\ufffb\001\002\000\006\037\uffac\051" +
    "\uffac\001\002\000\010\002\ufff2\004\ufff2\053\ufff2\001\002" +
    "\000\016\002\uffa8\004\uffa8\037\uffad\051\uffad\052\012\053" +
    "\uffa8\001\002\000\004\046\151\001\002\000\004\002\ufffc" +
    "\001\002\000\010\002\ufff7\004\023\053\015\001\002\000" +
    "\006\044\132\050\034\001\002\000\004\037\052\001\002" +
    "\000\006\037\uffab\051\030\001\002\000\012\002\uffa8\004" +
    "\uffa8\052\012\053\uffa8\001\002\000\010\002\ufff0\004\ufff0" +
    "\053\ufff0\001\002\000\006\004\032\053\015\001\002\000" +
    "\006\037\uffad\051\uffad\001\002\000\004\050\034\001\002" +
    "\000\004\037\uffaa\001\002\000\006\012\037\013\035\001" +
    "\002\000\036\002\uffc4\004\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\037\uffc4\042\041\045\uffc4\046\uffc4\047\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\001\002\000\032\002\ufff4\004\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\037\ufff4\045\ufff4\047" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\001\002\000\036\002\uffc3" +
    "\004\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\037\uffc3\042" +
    "\041\045\uffc3\046\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\001\002\000\034\002\uffc1\004\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\037\uffc1\045\uffc1\046\uffc1\047\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\001\002\000\006\007\044\043\043\001" +
    "\002\000\034\002\uffc0\004\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\037\uffc0\045\uffc0\046\uffc0\047\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\001\002\000\036\002\uffbd\004\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\037\uffbd\042\047\045\uffbd\046" +
    "\uffbd\047\uffbd\051\uffbd\052\uffbd\053\uffbd\001\002\000\004" +
    "\043\045\001\002\000\036\002\uffbf\004\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\037\uffbf\042\041\045\uffbf\046\uffbf" +
    "\047\uffbf\051\uffbf\052\uffbf\053\uffbf\001\002\000\034\002" +
    "\uffbe\004\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\037\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\001" +
    "\002\000\004\043\043\001\002\000\034\002\uffbc\004\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\037\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\001\002\000\034" +
    "\002\uffc2\004\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\037" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\001\002\000\026\004\070\005\067\006\053\007\057\010" +
    "\056\011\066\021\054\023\062\030\063\046\064\001\002" +
    "\000\070\002\uffb5\004\uffb5\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\040" +
    "\uffb5\041\uffb5\043\uffb5\045\uffb5\046\uffb5\047\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\001\002\000\004\044\127\001\002\000" +
    "\024\002\ufff3\004\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\047\ufff3\052\ufff3\053\ufff3\001\002\000\070\002\uffb3\004" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\043\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3\001" +
    "\002\000\070\002\uffb6\004\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\040\uffb6\041\uffb6\043\uffb6\045\uffb6\046\uffb6\047\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\001\002\000\070\002\uffb8\004\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\017\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\040\uffb8\041\uffb8\043\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\051\uffb8\052\uffb8\053\uffb8\001\002" +
    "\000\026\004\070\005\067\006\053\007\057\010\056\011" +
    "\066\021\054\023\062\030\063\046\064\001\002\000\026" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\021" +
    "\uffd8\023\uffd8\030\uffd8\046\uffd8\001\002\000\026\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\021\uffd7\023" +
    "\uffd7\030\uffd7\046\uffd7\001\002\000\026\004\070\005\067" +
    "\006\053\007\057\010\056\011\066\021\054\023\062\030" +
    "\063\046\064\001\002\000\064\002\uffc6\004\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\022\114\023\106\024\076\025" +
    "\102\026\105\027\077\031\100\032\112\033\104\034\107" +
    "\035\110\036\075\040\111\041\103\045\uffc6\047\uffc6\051" +
    "\122\052\uffc6\053\uffc6\001\002\000\070\002\uffb4\004\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\017\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\040\uffb4\041\uffb4\043\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\001\002" +
    "\000\070\002\uffb7\004\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040" +
    "\uffb7\041\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\001\002\000\074\002\uffb9\004\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\040\uffb9\041\uffb9\042\073\043\uffb9" +
    "\044\071\045\uffb9\046\uffb9\047\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\001\002\000\030\004\070\005\067\006\053\007\057" +
    "\010\056\011\066\021\054\023\062\030\063\045\120\046" +
    "\064\001\002\000\070\002\uffb1\004\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\040\uffb1\041\uffb1\043\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\001\002\000\026\004\070" +
    "\005\067\006\053\007\057\010\056\011\066\021\054\023" +
    "\062\030\063\046\064\001\002\000\040\022\114\023\106" +
    "\024\076\025\102\026\105\027\077\031\100\032\112\033" +
    "\104\034\107\035\110\036\075\040\111\041\103\043\101" +
    "\001\002\000\026\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\021\uffc9\023\uffc9\030\uffc9\046\uffc9\001\002" +
    "\000\026\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\021\uffd4\023\uffd4\030\uffd4\046\uffd4\001\002\000\026" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\021" +
    "\uffd1\023\uffd1\030\uffd1\046\uffd1\001\002\000\026\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\021\uffd0\023" +
    "\uffd0\030\uffd0\046\uffd0\001\002\000\072\002\uffaf\004\uffaf" +
    "\014\uffaf\015\uffaf\016\uffaf\017\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\040\uffaf\041\uffaf\042\073\043" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\001\002\000\026\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\021\uffd3\023\uffd3\030\uffd3\046\uffd3\001\002" +
    "\000\026\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\021\uffcb\023\uffcb\030\uffcb\046\uffcb\001\002\000\026" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\021" +
    "\uffce\023\uffce\030\uffce\046\uffce\001\002\000\026\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\021\uffd2\023" +
    "\uffd2\030\uffd2\046\uffd2\001\002\000\026\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\021\uffd5\023\uffd5\030" +
    "\uffd5\046\uffd5\001\002\000\026\004\uffcd\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\021\uffcd\023\uffcd\030\uffcd\046" +
    "\uffcd\001\002\000\026\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\011\uffca\021\uffca\023\uffca\030\uffca\046\uffca\001" +
    "\002\000\026\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\021\uffcc\023\uffcc\030\uffcc\046\uffcc\001\002\000" +
    "\026\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\021\uffcf\023\uffcf\030\uffcf\046\uffcf\001\002\000\026\004" +
    "\070\005\067\006\053\007\057\010\056\011\066\021\054" +
    "\023\062\030\063\046\064\001\002\000\026\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\021\uffd6\023\uffd6" +
    "\030\uffd6\046\uffd6\001\002\000\070\002\uffbb\004\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\022\114\023\106\024\076" +
    "\025\102\026\105\027\077\031\100\032\112\033\104\034" +
    "\107\035\110\036\075\040\111\041\103\043\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002\000" +
    "\070\002\uffae\004\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\040\uffae" +
    "\041\uffae\043\uffae\045\uffae\046\uffae\047\uffae\051\uffae\052" +
    "\uffae\053\uffae\001\002\000\004\045\121\001\002\000\070" +
    "\002\uffdb\004\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb\041" +
    "\uffdb\043\uffdb\045\uffdb\046\uffdb\047\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\001\002\000\070\002\uffdc\004\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\040\uffdc\041\uffdc\043\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000\026\004" +
    "\070\005\067\006\053\007\057\010\056\011\066\021\054" +
    "\023\062\030\063\046\064\001\002\000\026\002\uffc5\004" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\045\uffc5\047\uffc5" +
    "\052\uffc5\053\uffc5\001\002\000\004\047\125\001\002\000" +
    "\070\002\uffb2\004\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2" +
    "\041\uffb2\043\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\001\002\000\070\002\uffba\004\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\022\114\023\106\024\076\025" +
    "\102\026\105\027\077\031\100\032\112\033\104\034\107" +
    "\035\110\036\075\040\111\041\103\043\uffba\045\uffba\046" +
    "\uffba\047\uffba\051\uffba\052\uffba\053\uffba\001\002\000\026" +
    "\004\070\005\067\006\053\007\057\010\056\011\066\021" +
    "\054\023\062\030\063\046\064\001\002\000\040\022\114" +
    "\023\106\024\076\025\102\026\105\027\077\031\100\032" +
    "\112\033\104\034\107\035\110\036\075\040\111\041\103" +
    "\045\131\001\002\000\070\002\uffb0\004\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\040\uffb0\041\uffb0\043\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\051\uffb0\052\uffb0\053\uffb0\001\002\000\006\004" +
    "\032\045\135\001\002\000\006\045\ufff6\051\ufff6\001\002" +
    "\000\006\045\144\051\143\001\002\000\006\046\ufffd\050" +
    "\136\001\002\000\006\012\037\013\035\001\002\000\004" +
    "\046\ufffe\001\002\000\006\046\uffee\051\141\001\002\000" +
    "\006\012\037\013\035\001\002\000\004\046\uffed\001\002" +
    "\000\004\004\032\001\002\000\006\046\uffff\050\145\001" +
    "\002\000\006\012\037\013\035\001\002\000\004\046\000" +
    "\001\002\000\006\045\ufff5\051\ufff5\001\002\000\004\002" +
    "\ufff8\001\002\000\014\004\161\014\163\016\160\047\156" +
    "\053\015\001\002\000\010\002\uffef\004\uffef\053\uffef\001" +
    "\002\000\026\004\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8" +
    "\037\uffad\047\uffa8\051\uffad\052\012\053\uffa8\001\002\000" +
    "\022\004\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\047\uffa8" +
    "\052\012\053\uffa8\001\002\000\020\004\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\047\uffe0\053\uffe0\001\002\000\022" +
    "\002\uffe4\004\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\047" +
    "\uffe4\053\uffe4\001\002\000\016\004\161\014\163\016\160" +
    "\017\uffec\047\uffec\053\015\001\002\000\030\004\070\005" +
    "\067\006\053\007\057\010\056\011\066\021\054\023\062" +
    "\030\063\044\212\046\064\001\002\000\006\044\071\050" +
    "\034\001\002\000\020\004\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\047\uffe1\053\uffe1\001\002\000\030\004\070\005" +
    "\067\006\053\007\057\010\056\011\066\021\054\023\062" +
    "\030\063\044\176\046\064\001\002\000\006\017\167\047" +
    "\170\001\002\000\022\004\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\047\uffa8\052\012\053\uffa8\001\002\000\020\004" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\047\uffde\053\uffde" +
    "\001\002\000\032\004\070\005\067\006\053\007\057\010" +
    "\056\011\066\021\054\023\062\030\063\046\064\047\uffa8" +
    "\052\012\001\002\000\022\002\uffe6\004\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\047\uffe6\053\uffe6\001\002\000\004" +
    "\047\172\001\002\000\022\002\uffe5\004\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\047\uffe5\053\uffe5\001\002\000\006" +
    "\047\uffa8\052\012\001\002\000\004\047\uffc8\001\002\000" +
    "\004\047\uffc7\001\002\000\026\004\070\005\067\006\053" +
    "\007\057\010\056\011\066\021\054\023\062\030\063\046" +
    "\064\001\002\000\050\004\161\014\163\016\160\022\114" +
    "\023\106\024\076\025\102\026\105\027\077\031\100\032" +
    "\112\033\104\034\107\035\110\036\075\040\111\041\103" +
    "\046\151\053\015\001\002\000\020\004\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\047\uffe2\053\uffe2\001\002\000\020" +
    "\004\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\047\uffe3\053" +
    "\uffe3\001\002\000\020\004\uffda\014\uffda\015\203\016\uffda" +
    "\017\uffda\047\uffda\053\uffda\001\002\000\014\004\161\014" +
    "\163\016\160\046\151\053\015\001\002\000\020\004\uffea" +
    "\014\uffea\015\uffea\016\uffea\017\uffea\047\uffea\053\uffea\001" +
    "\002\000\020\004\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\047\uffd9\053\uffd9\001\002\000\040\022\114\023\106\024" +
    "\076\025\102\026\105\027\077\031\100\032\112\033\104" +
    "\034\107\035\110\036\075\040\111\041\103\045\207\001" +
    "\002\000\014\004\161\014\163\016\160\046\151\053\015" +
    "\001\002\000\020\004\uffda\014\uffda\015\203\016\uffda\017" +
    "\uffda\047\uffda\053\uffda\001\002\000\020\004\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\047\uffe9\053\uffe9\001\002\000" +
    "\026\004\070\005\067\006\053\007\057\010\056\011\066" +
    "\021\054\023\062\030\063\046\064\001\002\000\050\004" +
    "\161\014\163\016\160\022\114\023\106\024\076\025\102" +
    "\026\105\027\077\031\100\032\112\033\104\034\107\035" +
    "\110\036\075\040\111\041\103\046\151\053\015\001\002" +
    "\000\020\004\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\047" +
    "\uffe7\053\uffe7\001\002\000\040\022\114\023\106\024\076" +
    "\025\102\026\105\027\077\031\100\032\112\033\104\034" +
    "\107\035\110\036\075\040\111\041\103\045\216\001\002" +
    "\000\014\004\161\014\163\016\160\046\151\053\015\001" +
    "\002\000\020\004\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\047\uffe8\053\uffe8\001\002\000\006\017\uffeb\047\uffeb\001" +
    "\002\000\020\004\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\047\uffdd\053\uffdd\001\002\000\020\004\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\047\uffdf\053\uffdf\001\002\000\010" +
    "\002\ufff1\004\ufff1\053\ufff1\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\010\006\006\007\003\010\004\001\001\000" +
    "\022\004\017\005\015\011\020\012\021\013\016\015\025" +
    "\016\024\017\023\001\001\000\006\007\013\010\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\222\001\001\000\004\026\151\001\001\000" +
    "\002\001\001\000\022\004\017\005\015\011\147\012\021" +
    "\013\016\015\025\016\024\017\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\026" +
    "\001\001\000\002\001\001\000\010\013\030\016\024\017" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\035\001\001\000\006\040\050\041" +
    "\041\001\001\000\002\001\001\000\006\040\037\041\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\047\001\001\000\002\001\001\000\006" +
    "\040\045\041\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\033\060" +
    "\034\064\035\057\037\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\060\034\125\035" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\033\060\034\064\035\057\037\123\001\001\000\004\032" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\071\001\001\000\012\033\060\034\064\035\057\037" +
    "\116\001\001\000\002\001\001\000\010\033\060\034\073" +
    "\035\057\001\001\000\004\032\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\033\060\034\114\035\057\001\001" +
    "\000\002\001\001\000\004\032\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\033\060\034\064\035\057\037\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\112\001\001\000\010\033\060\034\127\035\057\001" +
    "\001\000\004\032\112\001\001\000\002\001\001\000\006" +
    "\013\132\014\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\137\021\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\137\021" +
    "\141\001\001\000\002\001\001\000\006\013\132\014\146" +
    "\001\001\000\002\001\001\000\006\020\137\021\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\013\152\015\164\016\024\017\023\022\156\023" +
    "\163\024\161\025\154\035\153\001\001\000\002\001\001" +
    "\000\004\031\221\001\001\000\004\031\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\013\152\015\164" +
    "\016\024\017\023\022\156\023\217\024\161\025\154\035" +
    "\153\001\001\000\010\033\060\034\212\035\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\033\060\034" +
    "\176\035\057\001\001\000\004\036\170\001\001\000\004" +
    "\031\165\001\001\000\002\001\001\000\014\031\173\033" +
    "\060\034\064\035\057\037\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\033\060" +
    "\034\205\035\057\001\001\000\030\013\152\015\164\016" +
    "\024\017\023\022\200\024\161\025\154\026\177\027\201" +
    "\032\112\035\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\203\001\001\000\026\013\152\015\164" +
    "\016\024\017\023\022\200\024\161\025\154\026\177\027" +
    "\204\035\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\112\001\001\000\026\013\152\015\164\016" +
    "\024\017\023\022\200\024\161\025\154\026\177\027\207" +
    "\035\153\001\001\000\004\030\210\001\001\000\002\001" +
    "\001\000\010\033\060\034\214\035\057\001\001\000\030" +
    "\013\152\015\164\016\024\017\023\022\200\024\161\025" +
    "\154\026\177\027\213\032\112\035\153\001\001\000\002" +
    "\001\001\000\004\032\112\001\001\000\026\013\152\015" +
    "\164\016\024\017\023\022\200\024\161\025\154\026\177" +
    "\027\216\035\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 89. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= program EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Object start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Object> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // abs_meth ::= IDENTIFIER OPEN_PAREN decls CLOSE_PAREN COLON typelst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",2, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // abs_meth ::= IDENTIFIER OPEN_PAREN decls CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",2, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // abs_meth ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN COLON typelst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",2, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // abs_meth ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("abs_meth",2, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // program ::= imports defns 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",4, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // imports ::= use imports 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // imports ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",5, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // use ::= USE IDENTIFIER semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("use",6, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // defns ::= definition defns 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("defns",7, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // defns ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("defns",7, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // decls ::= decl 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // decls ::= decls COMMA decls 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // decl ::= IDENTIFIER COLON type 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // assign ::= targets EQUALS vallst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",11, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // definition ::= method 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",8, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // definition ::= decl semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // definition ::= assign semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // method ::= abs_meth fnblock 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // typelst ::= type 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",15, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // typelst ::= type COMMA typelst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // statementlst ::= statement 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlst",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // statementlst ::= statement statementlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementlst",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // if ::= IF expr block elseopt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",18, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // if ::= IF OPEN_PAREN expr CLOSE_PAREN block elseopt 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",18, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // while ::= WHILE OPEN_PAREN expr CLOSE_PAREN block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // while ::= WHILE expr block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // fnblock ::= OPEN_BRACE statementlst CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",20, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // fnblock ::= OPEN_BRACE statementlst return CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",20, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // fnblock ::= OPEN_BRACE CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fnblock",20, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // block ::= statement 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // block ::= fnblock 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // statement ::= if 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // statement ::= while 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // statement ::= decl semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // statement ::= assign semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // statement ::= fncall semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",16, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // fncall ::= IDENTIFIER OPEN_PAREN vallst CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",27, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // fncall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("fncall",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // elseopt ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseopt",22, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // elseopt ::= ELSE block 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseopt",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // unop ::= MINUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // unop ::= NOT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",25, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // binop ::= PLUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // binop ::= MINUS 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // binop ::= TIMES 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // binop ::= HIGHTIMES 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // binop ::= DIVIDE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // binop ::= MODULO 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // binop ::= LT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // binop ::= LEQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // binop ::= GT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // binop ::= GEQ 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // binop ::= EQB 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // binop ::= NEQB 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // binop ::= AND 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // binop ::= OR 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",24, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // return ::= RETURN semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",28, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // return ::= RETURN vallst semi 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // vallst ::= expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("vallst",29, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // vallst ::= expr COMMA vallst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("vallst",29, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // type ::= BOOL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // type ::= INT 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // type ::= BOOL bracketlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // type ::= INT bracketlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // bracketlst ::= nullbrackets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bracketlst",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // bracketlst ::= OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bracketlst",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // bracketlst ::= OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET bracketlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("bracketlst",30, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // nullbrackets ::= OPEN_BRACKET CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("nullbrackets",31, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // nullbrackets ::= OPEN_BRACKET CLOSE_BRACKET nullbrackets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("nullbrackets",31, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // expr ::= expr binop expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // expr ::= unop expr 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // expr ::= IDENTIFIER 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // expr ::= fncall 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // expr ::= STRING_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // expr ::= INTEGER_LITERAL 
            {
                Object RESULT = null;
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Object l = CUP$parser$stack.peek().<Object> value();

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // expr ::= CHARACTER_LITERAL 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // expr ::= FALSE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // expr ::= TRUE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // expr ::= OPEN_BRACE vallst CLOSE_BRACE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // expr ::= IDENTIFIER idxlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",26, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // idxlst ::= OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("idxlst",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // idxlst ::= OPEN_BRACKET expr CLOSE_BRACKET idxlst 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("idxlst",32, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // target ::= decl 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // target ::= UNDERSCORE 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("target",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // targets ::= target 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("targets",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // targets ::= target COMMA targets 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("targets",13, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // semi ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",23, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // semi ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",23, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
