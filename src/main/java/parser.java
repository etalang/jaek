
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.internal.markers.*;
import java.util.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class parser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return SymbolTable.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\005\004\000\002\005\002\000\002\006\005\000" +
    "\002\007\004\000\002\007\002\000\002\010\003\000\002" +
    "\010\004\000\002\013\005\000\002\013\007\000\002\011" +
    "\010\000\002\011\006\000\002\011\007\000\002\011\005" +
    "\000\002\043\005\000\002\024\003\000\002\024\005\000" +
    "\002\027\003\000\002\027\004\000\002\030\003\000\002" +
    "\030\003\000\002\030\004\000\002\030\004\000\002\030" +
    "\004\000\002\030\004\000\002\020\006\000\002\020\010" +
    "\000\002\021\007\000\002\021\005\000\002\026\003\000" +
    "\002\026\003\000\002\025\005\000\002\025\006\000\002" +
    "\025\004\000\002\025\005\000\002\025\006\000\002\025" +
    "\007\000\002\025\007\000\002\025\006\000\002\025\007" +
    "\000\002\025\010\000\002\025\005\000\002\025\006\000" +
    "\002\032\006\000\002\032\005\000\002\031\002\000\002" +
    "\031\004\000\002\045\003\000\002\045\002\000\002\022" +
    "\004\000\002\022\005\000\002\044\005\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\003\000\002\042\005\000\002\034\005\000\002" +
    "\037\005\000\002\035\003\000\002\035\005\000\002\036" +
    "\006\000\002\036\005\000\002\036\006\000\002\012\004" +
    "\000\002\014\003\000\002\014\005\000\002\023\003\000" +
    "\002\023\003\000\002\023\004\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\005\000\002\023" +
    "\006\000\002\023\003\000\002\023\005\000\002\023\006" +
    "\000\002\040\003\000\002\040\005\000\002\050\006\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\017\003\000\002\017\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\033\006\000\002\033\005" +
    "\000\002\047\003\000\002\047\003\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\005\000\002\016\005" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\006\056\005\057\006\001\002\000\004\002" +
    "\324\001\002\000\006\002\ufffd\004\ufffd\001\002\000\010" +
    "\002\ufffa\004\ufffa\040\011\001\002\000\006\002\ufff7\004" +
    "\ufff7\001\002\000\010\002\ufffa\004\ufffa\040\011\001\002" +
    "\000\004\004\013\001\002\000\004\002\uffff\001\002\000" +
    "\012\002\uffcc\004\uffcc\040\uffcc\052\014\001\002\000\026" +
    "\002\uffcd\004\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\046\uffcd\047\uffcd\053\uffcd\001\002\000\010\002\ufff9" +
    "\004\ufff9\040\ufff9\001\002\000\006\002\ufffb\004\ufffb\001" +
    "\002\000\006\002\ufffc\004\024\001\002\000\004\046\070" +
    "\001\002\000\006\002\ufff6\004\ufff6\001\002\000\010\002" +
    "\uffcc\004\uffcc\052\014\001\002\000\006\002\ufff8\004\ufff8" +
    "\001\002\000\006\044\025\050\026\001\002\000\006\004" +
    "\052\045\051\001\002\000\006\012\031\013\027\001\002" +
    "\000\036\002\uff90\004\uff90\031\uff90\034\uff90\035\uff90\036" +
    "\uff90\037\uff90\042\uff90\045\uff90\046\uff90\047\uff90\051\uff90" +
    "\052\uff90\053\uff90\001\002\000\014\002\ufff4\004\ufff4\031" +
    "\035\042\036\052\ufff4\001\002\000\036\002\uff8f\004\uff8f" +
    "\031\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\042\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\051\uff8f\052\uff8f\053\uff8f\001\002" +
    "\000\022\002\uff8e\004\uff8e\031\uff8e\042\033\045\uff8e\046" +
    "\uff8e\051\uff8e\052\uff8e\001\002\000\004\043\034\001\002" +
    "\000\036\002\uff8d\004\uff8d\031\uff8d\034\uff8d\035\uff8d\036" +
    "\uff8d\037\uff8d\042\uff8d\045\uff8d\046\uff8d\047\uff8d\051\uff8d" +
    "\052\uff8d\053\uff8d\001\002\000\014\006\040\007\044\010" +
    "\042\011\043\015\045\001\002\000\004\043\037\001\002" +
    "\000\036\002\uff8c\004\uff8c\031\uff8c\034\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\042\uff8c\045\uff8c\046\uff8c\047\uff8c\051\uff8c" +
    "\052\uff8c\053\uff8c\001\002\000\070\002\uffa5\004\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\023\uffa5" +
    "\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\043\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\051\uffa5\052\uffa5\053\uffa5\001\002\000" +
    "\010\002\ufff3\004\ufff3\052\ufff3\001\002\000\070\002\uffa3" +
    "\004\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\043" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\001\002\000\070\002\uffa4\004\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\032\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\043\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\051\uffa4\052\uffa4\053\uffa4\001\002\000\070\002\uffa7\004" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\043\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\051\uffa7\052\uffa7\053\uffa7\001" +
    "\002\000\004\007\046\001\002\000\070\002\uffa6\004\uffa6" +
    "\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\043\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\051\uffa6\052\uffa6\053\uffa6\001\002" +
    "\000\004\045\064\001\002\000\006\045\uffed\051\062\001" +
    "\002\000\012\002\uffef\004\uffef\046\uffef\050\055\001\002" +
    "\000\004\050\053\001\002\000\006\012\031\013\027\001" +
    "\002\000\010\042\036\045\uffee\051\uffee\001\002\000\006" +
    "\012\031\013\027\001\002\000\012\002\ufff0\004\ufff0\046" +
    "\ufff0\051\060\001\002\000\014\002\uffba\004\uffba\042\036" +
    "\046\uffba\051\uffba\001\002\000\006\012\031\013\027\001" +
    "\002\000\014\002\uffb9\004\uffb9\042\036\046\uffb9\051\uffb9" +
    "\001\002\000\004\004\052\001\002\000\004\045\uffec\001" +
    "\002\000\012\002\ufff1\004\ufff1\046\ufff1\050\065\001\002" +
    "\000\006\012\031\013\027\001\002\000\012\002\ufff2\004" +
    "\ufff2\046\ufff2\051\060\001\002\000\006\002\ufff5\004\ufff5" +
    "\001\002\000\020\004\110\034\113\036\107\037\100\046" +
    "\070\047\103\053\073\001\002\000\006\002\uffbb\004\uffbb" +
    "\001\002\000\024\004\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\046\uffcc\047\uffcc\052\014\053\uffcc\001\002\000\006" +
    "\031\uffc6\051\uffc6\001\002\000\004\042\315\001\002\000" +
    "\022\004\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\046\uffe8" +
    "\047\uffe8\053\uffe8\001\002\000\006\031\uffc4\051\uffc4\001" +
    "\002\000\006\031\307\051\306\001\002\000\034\004\143" +
    "\005\141\006\040\007\044\010\042\011\043\015\132\022" +
    "\133\041\130\044\146\046\135\047\uffcc\052\014\001\002" +
    "\000\024\004\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\046" +
    "\uffcc\047\uffcc\052\014\053\uffcc\001\002\000\024\004\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\046\uffcc\047\uffcc\052" +
    "\014\053\uffcc\001\002\000\024\002\uffdb\004\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\046\uffdb\047\uffdb\053\uffdb\001" +
    "\002\000\020\004\110\034\113\036\107\037\100\046\070" +
    "\047\266\053\073\001\002\000\004\042\uffaa\001\002\000" +
    "\020\004\uffeb\034\uffeb\036\uffeb\037\uffeb\046\uffeb\047\uffeb" +
    "\053\uffeb\001\002\000\030\004\143\005\141\006\040\007" +
    "\044\010\042\011\043\015\132\022\133\041\130\044\260" +
    "\046\135\001\002\000\014\031\uffc5\042\uffa9\044\236\050" +
    "\237\051\uffc5\001\002\000\010\031\uffc8\042\uffa8\051\uffc8" +
    "\001\002\000\030\004\uffcc\031\uffc7\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\046\uffcc\047\uffcc\051\uffc7\052\014\053\uffcc" +
    "\001\002\000\030\004\143\005\141\006\040\007\044\010" +
    "\042\011\043\015\132\022\133\041\130\044\134\046\135" +
    "\001\002\000\022\004\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\046\uffe9\047\uffe9\053\uffe9\001\002\000\004\047\127" +
    "\001\002\000\016\004\110\034\113\036\107\037\100\047" +
    "\117\053\073\001\002\000\024\002\uffd3\004\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\046\uffd3\047\uffd3\053\uffd3\001" +
    "\002\000\016\004\110\034\113\036\107\037\100\047\123" +
    "\053\073\001\002\000\004\047\122\001\002\000\024\002" +
    "\uffd2\004\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\046\uffd2" +
    "\047\uffd2\053\uffd2\001\002\000\024\002\uffd6\004\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\046\uffd6\047\uffd6\053\uffd6" +
    "\001\002\000\020\004\uffea\034\uffea\036\uffea\037\uffea\046" +
    "\uffea\047\uffea\053\uffea\001\002\000\004\047\126\001\002" +
    "\000\024\002\uffd7\004\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\046\uffd7\047\uffd7\053\uffd7\001\002\000\024\002\uffda" +
    "\004\uffda\034\uffda\035\uffda\036\uffda\037\uffda\046\uffda\047" +
    "\uffda\053\uffda\001\002\000\004\044\232\001\002\000\030" +
    "\004\143\005\141\006\040\007\044\010\042\011\043\015" +
    "\132\022\133\041\130\044\146\046\135\001\002\000\030" +
    "\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\015" +
    "\uffa0\022\uffa0\041\uffa0\044\uffa0\046\uffa0\001\002\000\030" +
    "\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\015" +
    "\uff9f\022\uff9f\041\uff9f\044\uff9f\046\uff9f\001\002\000\030" +
    "\004\143\005\141\006\040\007\044\010\042\011\043\015" +
    "\132\022\133\041\130\044\146\046\135\001\002\000\030" +
    "\004\143\005\141\006\040\007\044\010\042\011\043\015" +
    "\132\022\133\041\130\044\146\046\135\001\002\000\070" +
    "\004\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\042" +
    "\uffaa\043\uffb4\045\uffb4\046\uffb4\047\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\001\002\000\066\004\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\001\002\000\050\004\110\014" +
    "\167\015\162\016\153\017\156\020\161\021\154\023\155" +
    "\024\166\025\160\026\163\027\164\030\152\032\165\033" +
    "\157\034\113\036\107\046\070\053\073\001\002\000\066" +
    "\004\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\043" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\001\002\000\070\004\uffb0\014\uffb0\015\uffb0\016\uffb0\017" +
    "\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\037\uffb0\042\uffa8\043\uffb0\045\uffb0\046\uffb0\047\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\001\002\000\072\004\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\042\uffa9\043\uffb5" +
    "\044\145\045\uffb5\046\uffb5\047\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\001\002\000\066\004\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\043\uffb8\045\uffb8\046\uffb8\047\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\001\002\000\032\004\143\005\141" +
    "\006\040\007\044\010\042\011\043\015\132\022\133\041" +
    "\130\044\146\045\151\046\135\001\002\000\030\004\143" +
    "\005\141\006\040\007\044\010\042\011\043\015\132\022" +
    "\133\041\130\044\146\046\135\001\002\000\006\045\207" +
    "\051\206\001\002\000\064\004\uffad\014\167\015\162\016" +
    "\153\017\156\020\161\021\154\023\155\024\166\025\160" +
    "\026\163\027\164\030\152\032\165\033\157\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\045\uffad\046\uffad\047\uffad\051\uffad" +
    "\052\uffad\053\uffad\001\002\000\070\004\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\042\uffa1\043\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\051\uffa1\052\uffa1\053\uffa1\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\030\004\143\005\141\006\040\007\044\010\042\011\043" +
    "\015\132\022\133\041\130\044\146\046\135\001\002\000" +
    "\066\004\uff9e\014\uff9e\015\uff9e\016\153\017\156\020\161" +
    "\021\154\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\043\uff9e\045\uff9e\046\uff9e\047\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\001\002\000\066\004\uff97\014\167\015\162\016\153" +
    "\017\156\020\161\021\154\023\uff97\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\032\uff97\033\uff97\034\uff97\035\uff97" +
    "\036\uff97\037\uff97\043\uff97\045\uff97\046\uff97\047\uff97\051" +
    "\uff97\052\uff97\053\uff97\001\002\000\066\004\uff94\014\167" +
    "\015\162\016\153\017\156\020\161\021\154\023\155\024" +
    "\166\025\160\026\163\027\uff94\030\uff94\032\uff94\033\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\043\uff94\045\uff94\046" +
    "\uff94\047\uff94\051\uff94\052\uff94\053\uff94\001\002\000\066" +
    "\004\uff92\014\167\015\162\016\153\017\156\020\161\021" +
    "\154\023\155\024\166\025\160\026\163\027\uff92\030\uff92" +
    "\032\165\033\157\034\uff92\035\uff92\036\uff92\037\uff92\043" +
    "\uff92\045\uff92\046\uff92\047\uff92\051\uff92\052\uff92\053\uff92" +
    "\001\002\000\066\004\uff95\014\167\015\162\016\153\017" +
    "\156\020\161\021\154\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\043\uff95\045\uff95\046\uff95\047\uff95\051\uff95" +
    "\052\uff95\053\uff95\001\002\000\066\004\uff9c\014\uff9c\015" +
    "\uff9c\016\153\017\156\020\161\021\154\023\uff9c\024\uff9c" +
    "\025\uff9c\026\uff9c\027\uff9c\030\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\043\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\051\uff9c\052\uff9c\053\uff9c\001\002\000\066\004" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\043\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\051\uff9a\052\uff9a\053\uff9a\001" +
    "\002\000\066\004\uff96\014\167\015\162\016\153\017\156" +
    "\020\161\021\154\023\uff96\024\uff96\025\uff96\026\uff96\027" +
    "\uff96\030\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96" +
    "\037\uff96\043\uff96\045\uff96\046\uff96\047\uff96\051\uff96\052" +
    "\uff96\053\uff96\001\002\000\066\004\uff93\014\167\015\162" +
    "\016\153\017\156\020\161\021\154\023\155\024\166\025" +
    "\160\026\163\027\uff93\030\uff93\032\uff93\033\uff93\034\uff93" +
    "\035\uff93\036\uff93\037\uff93\043\uff93\045\uff93\046\uff93\047" +
    "\uff93\051\uff93\052\uff93\053\uff93\001\002\000\066\004\uff9b" +
    "\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\043\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\051\uff9b\052\uff9b\053\uff9b\001\002" +
    "\000\066\004\uff98\014\167\015\162\016\153\017\156\020" +
    "\161\021\154\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\043\uff98\045\uff98\046\uff98\047\uff98\051\uff98\052\uff98" +
    "\053\uff98\001\002\000\066\004\uff99\014\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\023\uff99\024\uff99\025\uff99" +
    "\026\uff99\027\uff99\030\uff99\032\uff99\033\uff99\034\uff99\035" +
    "\uff99\036\uff99\037\uff99\043\uff99\045\uff99\046\uff99\047\uff99" +
    "\051\uff99\052\uff99\053\uff99\001\002\000\066\004\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\023\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\043\uff9d\045\uff9d" +
    "\046\uff9d\047\uff9d\051\uff9d\052\uff9d\053\uff9d\001\002\000" +
    "\066\004\uff91\014\167\015\162\016\153\017\156\020\161" +
    "\021\154\023\155\024\166\025\160\026\163\027\164\030" +
    "\uff91\032\165\033\157\034\uff91\035\uff91\036\uff91\037\uff91" +
    "\043\uff91\045\uff91\046\uff91\047\uff91\051\uff91\052\uff91\053" +
    "\uff91\001\002\000\030\004\143\005\141\006\040\007\044" +
    "\010\042\011\043\015\132\022\133\041\130\044\146\046" +
    "\135\001\002\000\070\004\uffa2\014\uffa2\015\uffa2\016\uffa2" +
    "\017\uffa2\020\uffa2\021\uffa2\023\uffa2\024\uffa2\025\uffa2\026" +
    "\uffa2\027\uffa2\030\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\042\uffa2\043\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\001\002\000\064\004\uffac" +
    "\014\167\015\162\016\153\017\156\020\161\021\154\023" +
    "\155\024\166\025\160\026\163\027\164\030\152\032\165" +
    "\033\157\034\uffac\035\uffac\036\uffac\037\uffac\045\uffac\046" +
    "\uffac\047\uffac\051\uffac\052\uffac\053\uffac\001\002\000\040" +
    "\014\167\015\162\016\153\017\156\020\161\021\154\023" +
    "\155\024\166\025\160\026\163\027\164\030\152\032\165" +
    "\033\157\045\212\001\002\000\066\004\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\043\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\051\uffaf\052\uffaf\053\uffaf\001\002\000\022\004" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\046\uffdf\047\uffdf" +
    "\053\uffdf\001\002\000\022\004\uffcf\034\uffcf\035\216\036" +
    "\uffcf\037\uffcf\046\uffcf\047\uffcf\053\uffcf\001\002\000\022" +
    "\004\uffde\034\uffde\035\uffde\036\uffde\037\uffde\046\uffde\047" +
    "\uffde\053\uffde\001\002\000\014\004\110\034\113\036\107" +
    "\046\070\053\073\001\002\000\022\004\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\046\uffe3\047\uffe3\053\uffe3\001\002" +
    "\000\022\004\uffce\034\uffce\035\uffce\036\uffce\037\uffce\046" +
    "\uffce\047\uffce\053\uffce\001\002\000\006\047\223\051\222" +
    "\001\002\000\032\004\143\005\141\006\040\007\044\010" +
    "\042\011\043\015\132\022\133\041\130\044\146\046\135" +
    "\047\224\001\002\000\066\004\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\043\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\001\002\000\066\004\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\043\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\051\uffb1\052\uffb1\053\uffb1\001\002\000" +
    "\040\014\167\015\162\016\153\017\156\020\161\021\154" +
    "\023\155\024\166\025\160\026\163\027\164\030\152\032" +
    "\165\033\157\045\226\001\002\000\050\004\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\036\uffaf\046\uffaf\053\uffaf\001\002\000\022\004" +
    "\uffcf\034\uffcf\035\216\036\uffcf\037\uffcf\046\uffcf\047\uffcf" +
    "\053\uffcf\001\002\000\022\004\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\046\uffe2\047\uffe2\053\uffe2\001\002\000\066" +
    "\004\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\043" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\001\002\000\030\004\143\005\141\006\040\007\044\010" +
    "\042\011\043\015\132\022\133\041\130\044\146\046\135" +
    "\001\002\000\040\014\167\015\162\016\153\017\156\020" +
    "\161\021\154\023\155\024\166\025\160\026\163\027\164" +
    "\030\152\032\165\033\157\045\234\001\002\000\066\004" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae" +
    "\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\043\uffae" +
    "\045\uffae\046\uffae\047\uffae\051\uffae\052\uffae\053\uffae\001" +
    "\002\000\022\004\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\046\uffe6\047\uffe6\053\uffe6\001\002\000\032\004\143\005" +
    "\141\006\040\007\044\010\042\011\043\015\132\022\133" +
    "\041\130\044\146\045\256\046\135\001\002\000\006\012" +
    "\031\013\027\001\002\000\026\004\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\042\253\046\uffc1\047\uffc1\052\uffc1\053" +
    "\uffc1\001\002\000\032\004\uffc9\031\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\042\036\046\uffc9\047\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\001\002\000\026\004\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\042\247\046\uffc0\047\uffc0\052\uffc0\053" +
    "\uffc0\001\002\000\032\004\uff8e\031\uff8e\034\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\042\244\046\uff8e\047\uff8e\051\uff8e\052" +
    "\uff8e\053\uff8e\001\002\000\032\004\143\005\141\006\040" +
    "\007\044\010\042\011\043\015\132\022\133\041\130\043" +
    "\034\044\146\046\135\001\002\000\040\014\167\015\162" +
    "\016\153\017\156\020\161\021\154\023\155\024\166\025" +
    "\160\026\163\027\164\030\152\032\165\033\157\043\246" +
    "\001\002\000\026\004\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\042\uffbe\046\uffbe\047\uffbe\052\uffbe\053\uffbe\001\002" +
    "\000\032\004\143\005\141\006\040\007\044\010\042\011" +
    "\043\015\132\022\133\041\130\043\250\044\146\046\135" +
    "\001\002\000\026\004\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\042\uffbd\046\uffbd\047\uffbd\052\uffbd\053\uffbd\001\002" +
    "\000\040\014\167\015\162\016\153\017\156\020\161\021" +
    "\154\023\155\024\166\025\160\026\163\027\164\030\152" +
    "\032\165\033\157\043\252\001\002\000\026\004\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\042\uffbc\046\uffbc\047\uffbc" +
    "\052\uffbc\053\uffbc\001\002\000\004\043\254\001\002\000" +
    "\026\004\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\042\uffbf" +
    "\046\uffbf\047\uffbf\052\uffbf\053\uffbf\001\002\000\006\045" +
    "\257\051\206\001\002\000\026\004\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\042\uffa1\046\uffd0\047\uffd0\052\uffd0\053" +
    "\uffd0\001\002\000\026\004\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\042\uffa2\046\uffd1\047\uffd1\052\uffd1\053\uffd1\001" +
    "\002\000\030\004\143\005\141\006\040\007\044\010\042" +
    "\011\043\015\132\022\133\041\130\044\146\046\135\001" +
    "\002\000\050\004\110\014\167\015\162\016\153\017\156" +
    "\020\161\021\154\023\155\024\166\025\160\026\163\027" +
    "\164\030\152\032\165\033\157\034\113\036\107\046\070" +
    "\053\073\001\002\000\022\004\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\046\uffe0\047\uffe0\053\uffe0\001\002\000\040" +
    "\014\167\015\162\016\153\017\156\020\161\021\154\023" +
    "\155\024\166\025\160\026\163\027\164\030\152\032\165" +
    "\033\157\045\264\001\002\000\050\004\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\036\uffaf\046\uffaf\053\uffaf\001\002\000\022\004\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\046\uffe1\047\uffe1\053" +
    "\uffe1\001\002\000\024\002\uffdd\004\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\046\uffdd\047\uffdd\053\uffdd\001\002\000" +
    "\004\047\300\001\002\000\016\004\110\034\113\036\107" +
    "\037\100\047\271\053\073\001\002\000\024\002\uffd9\004" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\046\uffd9\047\uffd9" +
    "\053\uffd9\001\002\000\016\004\110\034\113\036\107\037" +
    "\100\047\275\053\073\001\002\000\004\047\274\001\002" +
    "\000\024\002\uffd8\004\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\046\uffd8\047\uffd8\053\uffd8\001\002\000\024\002\uffd5" +
    "\004\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\046\uffd5\047" +
    "\uffd5\053\uffd5\001\002\000\004\047\277\001\002\000\024" +
    "\002\uffd4\004\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\046" +
    "\uffd4\047\uffd4\053\uffd4\001\002\000\024\002\uffdc\004\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\046\uffdc\047\uffdc\053" +
    "\uffdc\001\002\000\022\004\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\046\uffe4\047\uffe4\053\uffe4\001\002\000\022\004" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\046\uffe7\047\uffe7" +
    "\053\uffe7\001\002\000\010\047\uffcc\051\206\052\014\001" +
    "\002\000\004\047\uffcb\001\002\000\004\047\uffca\001\002" +
    "\000\006\004\311\053\073\001\002\000\030\004\143\005" +
    "\141\006\040\007\044\010\042\011\043\015\132\022\133" +
    "\041\130\044\146\046\135\001\002\000\026\004\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\046\uffc2\047\uffc2\051\206" +
    "\052\uffc2\053\uffc2\001\002\000\014\031\uffc5\042\uffa9\044" +
    "\145\050\314\051\uffc5\001\002\000\006\031\uffc7\051\uffc7" +
    "\001\002\000\006\031\uffc3\051\uffc3\001\002\000\006\012" +
    "\031\013\027\001\002\000\030\004\143\005\141\006\040" +
    "\007\044\010\042\011\043\015\132\022\133\041\130\044" +
    "\146\046\135\001\002\000\040\014\167\015\162\016\153" +
    "\017\156\020\161\021\154\023\155\024\166\025\160\026" +
    "\163\027\164\030\152\032\165\033\157\043\317\001\002" +
    "\000\072\004\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\042\uffab\043\uffab\045\uffab\046\uffab\047\uffab" +
    "\051\uffab\052\uffab\053\uffab\001\002\000\022\004\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\046\uffe5\047\uffe5\053\uffe5" +
    "\001\002\000\006\002\000\004\323\001\002\000\006\002" +
    "\ufffe\004\ufffe\001\002\000\004\044\025\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\320\001\001\000\010\004\011\005\006\006\007" +
    "\001\001\000\004\007\016\001\001\000\006\005\015\006" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\022\011\017\012\020\013\021" +
    "\001\001\000\004\025\070\001\001\000\002\001\001\000" +
    "\004\045\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\046\043\047\001\001\000\006\015\031\016" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\031\016\053" +
    "\001\001\000\002\001\001\000\010\014\055\015\031\016" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\031\016\060\001\001\000\002\001\001\000\006\024" +
    "\062\043\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\065\015\031\016\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\020\113\021\074\022\114" +
    "\025\115\027\103\030\105\032\101\033\104\034\100\037" +
    "\071\041\075\042\076\044\111\050\110\051\073\001\001" +
    "\000\002\001\001\000\004\045\317\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\136\023\147\033\135\040" +
    "\302\045\303\046\143\047\130\050\141\051\073\001\001" +
    "\000\004\045\301\001\001\000\004\045\300\001\001\000" +
    "\002\001\001\000\036\020\113\021\074\022\266\025\267" +
    "\030\123\032\101\033\104\034\100\037\071\041\075\042" +
    "\076\044\111\050\110\051\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\136\023\260\033\135\046" +
    "\143\047\130\050\141\051\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\234\001\001\000\020\017" +
    "\136\023\137\033\135\046\143\047\130\050\141\051\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\020" +
    "\113\021\074\022\120\027\117\030\105\032\101\033\104" +
    "\034\100\037\071\041\075\042\076\044\111\050\110\051" +
    "\073\001\001\000\002\001\001\000\034\020\113\021\074" +
    "\022\124\030\123\032\101\033\104\034\100\037\071\041" +
    "\075\042\076\044\111\050\110\051\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\136\023\230\033\135\046" +
    "\143\047\130\050\141\051\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\136\023\224\033\135\046" +
    "\143\047\130\050\141\051\073\001\001\000\022\017\136" +
    "\023\147\033\135\040\220\046\143\047\130\050\141\051" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\020\113\021\074\025\214\026\213\030\212\032\101\033" +
    "\104\034\100\037\071\041\075\042\076\044\111\050\110" +
    "\051\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\136\023\147" +
    "\033\135\040\146\046\143\047\130\050\141\051\073\001" +
    "\001\000\020\017\136\023\210\033\135\046\143\047\130" +
    "\050\141\051\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\017\136\023\204\033\135" +
    "\046\143\047\130\050\141\051\073\001\001\000\020\017" +
    "\136\023\203\033\135\046\143\047\130\050\141\051\073" +
    "\001\001\000\020\017\136\023\202\033\135\046\143\047" +
    "\130\050\141\051\073\001\001\000\020\017\136\023\201" +
    "\033\135\046\143\047\130\050\141\051\073\001\001\000" +
    "\020\017\136\023\200\033\135\046\143\047\130\050\141" +
    "\051\073\001\001\000\020\017\136\023\177\033\135\046" +
    "\143\047\130\050\141\051\073\001\001\000\020\017\136" +
    "\023\176\033\135\046\143\047\130\050\141\051\073\001" +
    "\001\000\020\017\136\023\175\033\135\046\143\047\130" +
    "\050\141\051\073\001\001\000\020\017\136\023\174\033" +
    "\135\046\143\047\130\050\141\051\073\001\001\000\020" +
    "\017\136\023\173\033\135\046\143\047\130\050\141\051" +
    "\073\001\001\000\020\017\136\023\172\033\135\046\143" +
    "\047\130\050\141\051\073\001\001\000\020\017\136\023" +
    "\171\033\135\046\143\047\130\050\141\051\073\001\001" +
    "\000\020\017\136\023\170\033\135\046\143\047\130\050" +
    "\141\051\073\001\001\000\020\017\136\023\167\033\135" +
    "\046\143\047\130\050\141\051\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\136\023\207\033\135\046\143\047\130" +
    "\050\141\051\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\216\001\001\000\002\001\001\000\036\020" +
    "\113\021\074\025\214\026\217\030\212\032\101\033\104" +
    "\034\100\037\071\041\075\042\076\044\111\050\110\051" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\017\136\023\207\033\135\046\143\047" +
    "\130\050\141\051\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\020\113\021\074\025" +
    "\214\026\226\030\212\032\101\033\104\034\100\037\071" +
    "\041\075\042\076\044\111\050\110\051\073\001\001\000" +
    "\004\031\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\017\136\023\232\033\135\046\143\047\130\050" +
    "\141\051\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\017\136\023\147\033\135\040" +
    "\254\046\143\047\130\050\141\051\073\001\001\000\012" +
    "\015\242\016\240\035\237\036\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\017\136\023\244\033\135\046\143\047\130\050" +
    "\141\051\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\017\136\023\250\033\135\046\143\047\130\050" +
    "\141\051\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\136\023\262\033\135\046\143\047\130\050\141\051" +
    "\073\001\001\000\036\020\113\021\074\025\214\026\261" +
    "\030\212\032\101\033\104\034\100\037\071\041\075\042" +
    "\076\044\111\050\110\051\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\020\113\021\074\025\214\026" +
    "\264\030\212\032\101\033\104\034\100\037\071\041\075" +
    "\042\076\044\111\050\110\051\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\020\113" +
    "\021\074\022\272\027\271\030\105\032\101\033\104\034" +
    "\100\037\071\041\075\042\076\044\111\050\110\051\073" +
    "\001\001\000\002\001\001\000\034\020\113\021\074\022" +
    "\275\030\123\032\101\033\104\034\100\037\071\041\075" +
    "\042\076\044\111\050\110\051\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\033\104\041\312\044\311\050" +
    "\110\051\073\001\001\000\022\017\136\023\147\033\135" +
    "\040\307\046\143\047\130\050\141\051\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\031\016\240\001\001\000\020\017" +
    "\136\023\315\033\135\046\143\047\130\050\141\051\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


  public void syntax_error(java_cup.runtime.Symbol current) throws ParseError {
    throw new ParseError(current);
  }


/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 117. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= file EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int start_valright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Eta start_val = CUP$parser$stack.elementAt(CUP$parser$top-1).<Eta> value();
                RESULT = start_val;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$parser$parser.done_parsing();
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // file ::= INTERFACE interface 
            {
                Eta RESULT = null;
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                Interface It = CUP$parser$stack.peek().<Interface> value();
                 RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // file ::= PROGRAM program 
            {
                Eta RESULT = null;
                int Pleft = CUP$parser$stack.peek().left;
                int Pright = CUP$parser$stack.peek().right;
                Program P = CUP$parser$stack.peek().<Program> value();
                 RESULT = P;  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // interface ::= interface methodHeader 
            {
                Interface RESULT = null;
                int itleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int itright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Interface it = CUP$parser$stack.elementAt(CUP$parser$top-1).<Interface> value();
                int amleft = CUP$parser$stack.peek().left;
                int amright = CUP$parser$stack.peek().right;
                Method am = CUP$parser$stack.peek().<Method> value();
                 ArrayList<Method> ml = it.getMethodHeaders(); ml.add(am); RESULT = new Interface(ml); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // interface ::= 
            {
                Interface RESULT = null;
                 RESULT = new Interface(new ArrayList<>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("interface",1, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // program ::= imports allDefinitions 
            {
                Program RESULT = null;
                int Isleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Isright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Use> Is = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Use>> value();
                int Dsleft = CUP$parser$stack.peek().left;
                int Dsright = CUP$parser$stack.peek().right;
                ArrayList<Definition> Ds = CUP$parser$stack.peek().<ArrayList<Definition>> value();
                 RESULT = new Program(Is, Ds); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("program",2, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // imports ::= use imports 
            {
                ArrayList<Use> RESULT = null;
                int uleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int uright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Use u = CUP$parser$stack.elementAt(CUP$parser$top-1).<Use> value();
                int Itleft = CUP$parser$stack.peek().left;
                int Itright = CUP$parser$stack.peek().right;
                ArrayList<Use> It = CUP$parser$stack.peek().<ArrayList<Use>> value();
                 It.add(0, u); RESULT = It; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",3, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // imports ::= 
            {
                ArrayList<Use> RESULT = null;
                 RESULT = new ArrayList<Use>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("imports",3, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // use ::= USE IDENTIFIER semi 
            {
                Use RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-1).<String> value();
                 RESULT = new Use(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("use",4, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // allDefinitions ::= allDefinitions definition 
            {
                ArrayList<Definition> RESULT = null;
                int Dtleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Dtright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Definition> Dt = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Definition>> value();
                int dleft = CUP$parser$stack.peek().left;
                int dright = CUP$parser$stack.peek().right;
                Definition d = CUP$parser$stack.peek().<Definition> value();
                 Dt.add(d); RESULT = Dt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("allDefinitions",5, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // allDefinitions ::= 
            {
                ArrayList<Definition> RESULT = null;
                 RESULT = new ArrayList<>(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("allDefinitions",5, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // definition ::= method 
            {
                Definition RESULT = null;
                int mleft = CUP$parser$stack.peek().left;
                int mright = CUP$parser$stack.peek().right;
                Method m = CUP$parser$stack.peek().<Method> value();
                 RESULT = m; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",6, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // definition ::= globalDecl semi 
            {
                Definition RESULT = null;
                int dcleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dcright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                GlobalDecl dc = CUP$parser$stack.elementAt(CUP$parser$top-1).<GlobalDecl> value();
                 RESULT = dc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("definition",6, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // globalDecl ::= IDENTIFIER COLON type 
            {
                GlobalDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new GlobalDecl(id, t, null); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",9, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // globalDecl ::= IDENTIFIER COLON type EQUALS primitiveLiteral 
            {
                GlobalDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                Literal pl = CUP$parser$stack.peek().<Literal> value();
                 RESULT = new GlobalDecl(id, t, pl); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("globalDecl",9, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // methodHeader ::= IDENTIFIER OPEN_PAREN methodArgs CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-5).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-5).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-5).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<VarDecl.RawVarDecl> Ds = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<VarDecl.RawVarDecl>> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                ArrayList<Type> Ts = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 RESULT = new Method(id, Ds, Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // methodHeader ::= IDENTIFIER OPEN_PAREN methodArgs CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int Dsleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int Dsright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<VarDecl.RawVarDecl> Ds = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<VarDecl.RawVarDecl>> value();
                 RESULT = new Method(id, Ds, new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // methodHeader ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN COLON typelst 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-4).<String> value();
                int Tsleft = CUP$parser$stack.peek().left;
                int Tsright = CUP$parser$stack.peek().right;
                ArrayList<Type> Ts = CUP$parser$stack.peek().<ArrayList<Type>> value();
                 RESULT = new Method(id, new ArrayList<>(), Ts); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // methodHeader ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Method RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Method(id, new ArrayList<>(), new ArrayList<Type>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodHeader",7, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // methodArg ::= IDENTIFIER COLON type 
            {
                VarDecl.RawVarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                RESULT = new VarDecl.RawVarDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArg",33, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // methodArgs ::= methodArg 
            {
                ArrayList<VarDecl.RawVarDecl> RESULT = null;
                int maleft = CUP$parser$stack.peek().left;
                int maright = CUP$parser$stack.peek().right;
                VarDecl.RawVarDecl ma = CUP$parser$stack.peek().<VarDecl.RawVarDecl> value();
                RESULT = ParseUtil.singleton(ma); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArgs",18, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // methodArgs ::= methodArg COMMA methodArgs 
            {
                ArrayList<VarDecl.RawVarDecl> RESULT = null;
                int maleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int maright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                VarDecl.RawVarDecl ma = CUP$parser$stack.elementAt(CUP$parser$top-2).<VarDecl.RawVarDecl> value();
                int malleft = CUP$parser$stack.peek().left;
                int malright = CUP$parser$stack.peek().right;
                ArrayList<VarDecl.RawVarDecl> mal = CUP$parser$stack.peek().<ArrayList<VarDecl.RawVarDecl>> value();
                mal.add(0, ma); RESULT = mal;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("methodArgs",18, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // statementList ::= statement 
            {
                ArrayList<Statement> RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                RESULT = ParseUtil.singleton(s);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",21, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // statementList ::= statementList statement 
            {
                ArrayList<Statement> RESULT = null;
                int slleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int slright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Statement> sl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Statement>> value();
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                sl.add(s); RESULT = sl;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",21, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // statement ::= if 
            {
                Statement RESULT = null;
                int ileft = CUP$parser$stack.peek().left;
                int iright = CUP$parser$stack.peek().right;
                Statement.If i = CUP$parser$stack.peek().<Statement.If> value();
                 RESULT = i; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // statement ::= while 
            {
                Statement RESULT = null;
                int wleft = CUP$parser$stack.peek().left;
                int wright = CUP$parser$stack.peek().right;
                Statement.While w = CUP$parser$stack.peek().<Statement.While> value();
                 RESULT = w; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // statement ::= multiAssign semi 
            {
                Statement RESULT = null;
                int aleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                MultiAssign a = CUP$parser$stack.elementAt(CUP$parser$top-1).<MultiAssign> value();
                 RESULT = a; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // statement ::= varDecl semi 
            {
                Statement RESULT = null;
                int dleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int dright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl.RawVarDecl d = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl.RawVarDecl> value();
                 RESULT = d; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // statement ::= arrayInitStatement semi 
            {
                Statement RESULT = null;
                int aleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int aright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                VarDecl.InitArr a = CUP$parser$stack.elementAt(CUP$parser$top-1).<VarDecl.InitArr> value();
                 RESULT = a; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // statement ::= procedureCall semi 
            {
                Statement RESULT = null;
                int fnleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int fnright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement.Procedure fn = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement.Procedure> value();
                 RESULT = fn; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // if ::= IF expr block elseOptional 
            {
                Statement.If RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement b = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                int elsleft = CUP$parser$stack.peek().left;
                int elsright = CUP$parser$stack.peek().right;
                Statement els = CUP$parser$stack.peek().<Statement> value();
                 RESULT = new Statement.If(e, b, els); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // if ::= IF OPEN_PAREN expr CLOSE_PAREN block elseOptional 
            {
                Statement.If RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expr> value();
                int bleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int bright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement b = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                int elsleft = CUP$parser$stack.peek().left;
                int elsright = CUP$parser$stack.peek().right;
                Statement els = CUP$parser$stack.peek().<Statement> value();
                 RESULT = new Statement.If(e, b, els); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("if",14, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // while ::= WHILE OPEN_PAREN expr CLOSE_PAREN block 
            {
                Statement.While RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement b = CUP$parser$stack.peek().<Statement> value();
                 RESULT = new Statement.While(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",15, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // while ::= WHILE expr block 
            {
                Statement.While RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement b = CUP$parser$stack.peek().<Statement> value();
                 RESULT = new Statement.While(e, b); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("while",15, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // block ::= statement 
            {
                Statement RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                Statement s = CUP$parser$stack.peek().<Statement> value();
                 RESULT = s; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // block ::= returnableBlock 
            {
                Statement RESULT = null;
                int rbleft = CUP$parser$stack.peek().left;
                int rbright = CUP$parser$stack.peek().right;
                Statement.Block rb = CUP$parser$stack.peek().<Statement.Block> value();
                 RESULT = rb; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("block",20, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // returnableBlock ::= OPEN_BRACE statementList CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Statement>> value();
                 RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // returnableBlock ::= OPEN_BRACE statementList return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Statement>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                 sLst.add(r); RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // returnableBlock ::= OPEN_BRACE CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                 RESULT = new Statement.Block(new ArrayList<Statement>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // returnableBlock ::= OPEN_BRACE return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                 RESULT = new Statement.Block(ParseUtil.singleton(r)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // returnableBlock ::= OPEN_BRACE statementList returnableBlock CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Statement>> value();
                int rbleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rbright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement.Block rb = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement.Block> value();
                 sLst.add(rb); RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // returnableBlock ::= OPEN_BRACE statementList returnableBlock return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<Statement>> value();
                int rbleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rbright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Statement.Block rb = CUP$parser$stack.elementAt(CUP$parser$top-2).<Statement.Block> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                sLst.add(rb); sLst.add(r); RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // returnableBlock ::= OPEN_BRACE returnableBlock statementList return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int rbleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int rbright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Statement.Block rb = CUP$parser$stack.elementAt(CUP$parser$top-3).<Statement.Block> value();
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Statement>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                sLst.add(0, rb); sLst.add(r); RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // returnableBlock ::= OPEN_BRACE returnableBlock statementList CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int rbleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rbright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Statement.Block rb = CUP$parser$stack.elementAt(CUP$parser$top-2).<Statement.Block> value();
                int sLstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sLstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Statement> sLst = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Statement>> value();
                sLst.add(0, rb); RESULT = new Statement.Block(sLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // returnableBlock ::= OPEN_BRACE statementList returnableBlock statementList CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLst1left = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int sLst1right = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                ArrayList<Statement> sLst1 = CUP$parser$stack.elementAt(CUP$parser$top-3).<ArrayList<Statement>> value();
                int rbleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rbright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Statement.Block rb = CUP$parser$stack.elementAt(CUP$parser$top-2).<Statement.Block> value();
                int sLst2left = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int sLst2right = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Statement> sLst2 = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Statement>> value();
                sLst1.add(rb); sLst1.addAll(sLst2); RESULT = new Statement.Block(sLst1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-4), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // returnableBlock ::= OPEN_BRACE statementList returnableBlock statementList return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int sLst1left = CUP$parser$stack.elementAt(CUP$parser$top-4).left;
                int sLst1right = CUP$parser$stack.elementAt(CUP$parser$top-4).right;
                ArrayList<Statement> sLst1 = CUP$parser$stack.elementAt(CUP$parser$top-4).<ArrayList<Statement>> value();
                int rbleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int rbright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Statement.Block rb = CUP$parser$stack.elementAt(CUP$parser$top-3).<Statement.Block> value();
                int sLst2left = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int sLst2right = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Statement> sLst2 = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Statement>> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                sLst1.add(rb); sLst1.addAll(sLst2); sLst1.add(r); RESULT = new Statement.Block(sLst1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-5), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // returnableBlock ::= OPEN_BRACE returnableBlock CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int rbleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rbright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement.Block rb = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement.Block> value();
                 RESULT = new Statement.Block(ParseUtil.singleton(rb)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // returnableBlock ::= OPEN_BRACE returnableBlock return CLOSE_BRACE 
            {
                Statement.Block RESULT = null;
                int rbleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rbright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Statement.Block rb = CUP$parser$stack.elementAt(CUP$parser$top-2).<Statement.Block> value();
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Statement r = CUP$parser$stack.elementAt(CUP$parser$top-1).<Statement> value();
                 ArrayList<Statement> st = ParseUtil.singleton(rb); st.add(r); RESULT = new Statement.Block(st); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("returnableBlock",19, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // procedureCall ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Statement.Procedure RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int vlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> vl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Statement.Procedure(id, vl);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCall",24, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // procedureCall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Statement.Procedure RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Statement.Procedure(id, new ArrayList<Expr>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("procedureCall",24, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // elseOptional ::= 
            {
                Statement RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseOptional",23, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // elseOptional ::= ELSE block 
            {
                Statement RESULT = null;
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement b = CUP$parser$stack.peek().<Statement> value();
                 RESULT = b; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("elseOptional",23, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // semi ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",35, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // semi ::= 
            {
                Object RESULT = null;

                CUP$parser$result = parser.getSymbolFactory().newSymbol("semi",35, CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // return ::= RETURN semi 
            {
                Statement RESULT = null;
                 RESULT = new Statement.Return(new ArrayList<Expr>()); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",16, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // return ::= RETURN exprList semi 
            {
                Statement RESULT = null;
                int exprLstleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int exprLstright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> exprLst = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Statement.Return(exprLst); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("return",16, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // varDecl ::= IDENTIFIER COLON type 
            {
                VarDecl.RawVarDecl RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = new VarDecl.RawVarDecl(id, t); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",34, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // assignable ::= arrayAccess 
            {
                AssignTarget RESULT = null;
                int e1left = CUP$parser$stack.peek().left;
                int e1right = CUP$parser$stack.peek().right;
                Expr.ArrayAccess e1 = CUP$parser$stack.peek().<Expr.ArrayAccess> value();
                 RESULT = new AssignTarget.ArrayAssign(e1); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // assignable ::= varDecl 
            {
                AssignTarget RESULT = null;
                int vdleft = CUP$parser$stack.peek().left;
                int vdright = CUP$parser$stack.peek().right;
                VarDecl.RawVarDecl vd = CUP$parser$stack.peek().<VarDecl.RawVarDecl> value();
                 RESULT = new AssignTarget.DeclAssign(vd); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // assignable ::= UNDERSCORE 
            {
                AssignTarget RESULT = null;
                 RESULT = new AssignTarget.Underscore(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // assignable ::= IDENTIFIER 
            {
                AssignTarget RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new AssignTarget.IdAssign(new Expr.Identifier(id)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignable",31, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // assignables ::= assignable 
            {
                ArrayList<AssignTarget> RESULT = null;
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                AssignTarget at = CUP$parser$stack.peek().<AssignTarget> value();
                 RESULT = ParseUtil.singleton(at); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignables",32, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // assignables ::= assignables COMMA assignable 
            {
                ArrayList<AssignTarget> RESULT = null;
                int atlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int atlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<AssignTarget> atl = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<AssignTarget>> value();
                int atleft = CUP$parser$stack.peek().left;
                int atright = CUP$parser$stack.peek().right;
                AssignTarget at = CUP$parser$stack.peek().<AssignTarget> value();
                 atl.add(at); RESULT = atl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("assignables",32, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // multiAssign ::= assignables EQUALS exprList 
            {
                MultiAssign RESULT = null;
                int tgleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tgright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<AssignTarget> tg = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<AssignTarget>> value();
                int exprsleft = CUP$parser$stack.peek().left;
                int exprsright = CUP$parser$stack.peek().right;
                ArrayList<Expr> exprs = CUP$parser$stack.peek().<ArrayList<Expr>> value();
                 RESULT = new MultiAssign(tg, exprs);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("multiAssign",26, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // arrayInitStatement ::= IDENTIFIER COLON arrayInit 
            {
                VarDecl.InitArr RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                int arleft = CUP$parser$stack.peek().left;
                int arright = CUP$parser$stack.peek().right;
                Statement.ArrayInit ar = CUP$parser$stack.peek().<Statement.ArrayInit> value();
                 RESULT = new VarDecl.InitArr(id, ar); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInitStatement",29, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // arrayInit ::= arrayNonBlank 
            {
                Statement.ArrayInit RESULT = null;
                int anbleft = CUP$parser$stack.peek().left;
                int anbright = CUP$parser$stack.peek().right;
                Statement.ArrayInit anb = CUP$parser$stack.peek().<Statement.ArrayInit> value();
                 RESULT = anb;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInit",27, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // arrayInit ::= arrayInit OPEN_BRACKET CLOSE_BRACKET 
            {
                Statement.ArrayInit RESULT = null;
                int aileft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int airight = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Statement.ArrayInit ai = CUP$parser$stack.elementAt(CUP$parser$top-2).<Statement.ArrayInit> value();
                 ai.getDimensions().add(0, null); RESULT = ai; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayInit",27, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // arrayNonBlank ::= primType OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Statement.ArrayInit RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Primitive pt = CUP$parser$stack.elementAt(CUP$parser$top-3).<Primitive> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new Statement.ArrayInit(pt, e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",28, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // arrayNonBlank ::= arrayNonBlank OPEN_BRACKET CLOSE_BRACKET 
            {
                Statement.ArrayInit RESULT = null;
                int anbleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int anbright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Statement.ArrayInit anb = CUP$parser$stack.elementAt(CUP$parser$top-2).<Statement.ArrayInit> value();
                 anb.getDimensions().add(0, null); RESULT = anb; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",28, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // arrayNonBlank ::= arrayNonBlank OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Statement.ArrayInit RESULT = null;
                int anbleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int anbright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Statement.ArrayInit anb = CUP$parser$stack.elementAt(CUP$parser$top-3).<Statement.ArrayInit> value();
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 anb.getDimensions().add(0, e); RESULT = anb; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayNonBlank",28, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // method ::= methodHeader returnableBlock 
            {
                Method RESULT = null;
                int amleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int amright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Method am = CUP$parser$stack.elementAt(CUP$parser$top-1).<Method> value();
                int bleft = CUP$parser$stack.peek().left;
                int bright = CUP$parser$stack.peek().right;
                Statement.Block b = CUP$parser$stack.peek().<Statement.Block> value();
                 am.setBody(b); RESULT = am; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("method",8, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // typelst ::= type 
            {
                ArrayList<Type> RESULT = null;
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 RESULT = ParseUtil.singleton(t);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",10, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // typelst ::= typelst COMMA type 
            {
                ArrayList<Type> RESULT = null;
                int tlleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tlright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Type> tl = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Type>> value();
                int tleft = CUP$parser$stack.peek().left;
                int tright = CUP$parser$stack.peek().right;
                Type t = CUP$parser$stack.peek().<Type> value();
                 tl.add(t); RESULT = tl;
                CUP$parser$result = parser.getSymbolFactory().newSymbol("typelst",10, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // expr ::= binop 
            {
                Expr RESULT = null;
                int opleft = CUP$parser$stack.peek().left;
                int opright = CUP$parser$stack.peek().right;
                BinaryOp op = CUP$parser$stack.peek().<BinaryOp> value();
                 RESULT = op; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // expr ::= primitiveLiteral 
            {
                Expr RESULT = null;
                int plleft = CUP$parser$stack.peek().left;
                int plright = CUP$parser$stack.peek().right;
                Literal pl = CUP$parser$stack.peek().<Literal> value();
                 RESULT = pl; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // expr ::= unop expr 
            {
                Expr RESULT = null;
                int opleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int opright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                UnaryOp.Operation op = CUP$parser$stack.elementAt(CUP$parser$top-1).<UnaryOp.Operation> value();
                int argleft = CUP$parser$stack.peek().left;
                int argright = CUP$parser$stack.peek().right;
                Expr arg = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new UnaryOp(op, arg); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // expr ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // expr ::= functionCall 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                Expr.FunctionCall fc = CUP$parser$stack.peek().<Expr.FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // expr ::= STRING_LITERAL 
            {
                Expr RESULT = null;
                int sleft = CUP$parser$stack.peek().left;
                int sright = CUP$parser$stack.peek().right;
                String s = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.StringLit(s); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // expr ::= OPEN_BRACE exprList CLOSE_BRACE 
            {
                Expr RESULT = null;
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> el = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Literal.ArrayLit(el); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // expr ::= OPEN_BRACE exprList COMMA CLOSE_BRACE 
            {
                Expr RESULT = null;
                int elleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int elright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Expr> el = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Expr>> value();
                 RESULT = new Literal.ArrayLit(el); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // expr ::= arrayAccess 
            {
                Expr RESULT = null;
                int aaleft = CUP$parser$stack.peek().left;
                int aaright = CUP$parser$stack.peek().right;
                Expr.ArrayAccess aa = CUP$parser$stack.peek().<Expr.ArrayAccess> value();
                 RESULT = aa; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = e; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // expr ::= LENGTH OPEN_PAREN expr CLOSE_PAREN 
            {
                Expr RESULT = null;
                int eleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int eright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new Expr.FunctionCall.LengthFn(e); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // exprList ::= expr 
            {
                ArrayList<Expr> RESULT = null;
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 RESULT = ParseUtil.singleton(e);  
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",30, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // exprList ::= exprList COMMA expr 
            {
                ArrayList<Expr> RESULT = null;
                int lleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int lright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                ArrayList<Expr> l = CUP$parser$stack.elementAt(CUP$parser$top-2).<ArrayList<Expr>> value();
                int eleft = CUP$parser$stack.peek().left;
                int eright = CUP$parser$stack.peek().right;
                Expr e = CUP$parser$stack.peek().<Expr> value();
                 l.add(e); RESULT = l; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",30, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // arrayAccess ::= indexable OPEN_BRACKET expr CLOSE_BRACKET 
            {
                Expr.ArrayAccess RESULT = null;
                int e1left = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int e1right = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                Expr e1 = CUP$parser$stack.elementAt(CUP$parser$top-3).<Expr> value();
                int e2left = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int e2right = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                Expr e2 = CUP$parser$stack.elementAt(CUP$parser$top-1).<Expr> value();
                 RESULT = new Expr.ArrayAccess(e1,e2); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",38, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // indexable ::= functionCall 
            {
                Expr RESULT = null;
                int fcleft = CUP$parser$stack.peek().left;
                int fcright = CUP$parser$stack.peek().right;
                Expr.FunctionCall fc = CUP$parser$stack.peek().<Expr.FunctionCall> value();
                 RESULT = fc; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // indexable ::= IDENTIFIER 
            {
                Expr RESULT = null;
                int idleft = CUP$parser$stack.peek().left;
                int idright = CUP$parser$stack.peek().right;
                String id = CUP$parser$stack.peek().<String> value();
                 RESULT = new Literal.Identifier(id); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // indexable ::= arrayAccess 
            {
                Expr RESULT = null;
                int aaleft = CUP$parser$stack.peek().left;
                int aaright = CUP$parser$stack.peek().right;
                Expr.ArrayAccess aa = CUP$parser$stack.peek().<Expr.ArrayAccess> value();
                 RESULT = aa; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("indexable",39, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // primitiveLiteral ::= INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int nleft = CUP$parser$stack.peek().left;
                int nright = CUP$parser$stack.peek().right;
                IntLitInfo n = CUP$parser$stack.peek().<IntLitInfo> value();
                 if (n.data.equals("9223372036854775808")) { throw new ParseError(new Token.IntegerToken(n.data, n.line, n.column)); }
                                                                        RESULT = new Literal.IntLit(Long.parseLong(n.data)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // primitiveLiteral ::= MINUS INTEGER_LITERAL 
            {
                Literal RESULT = null;
                int nleft = CUP$parser$stack.peek().left;
                int nright = CUP$parser$stack.peek().right;
                IntLitInfo n = CUP$parser$stack.peek().<IntLitInfo> value();
                 RESULT = new Literal.IntLit(Long.parseLong("-" + n.data)); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.elementAt(CUP$parser$top-1), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // primitiveLiteral ::= CHARACTER_LITERAL 
            {
                Literal RESULT = null;
                int cleft = CUP$parser$stack.peek().left;
                int cright = CUP$parser$stack.peek().right;
                Integer c = CUP$parser$stack.peek().<Integer> value();
                 RESULT = new Literal.CharLit(c); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // primitiveLiteral ::= FALSE 
            {
                Literal RESULT = null;
                 RESULT = new Literal.BoolLit(false); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // primitiveLiteral ::= TRUE 
            {
                Literal RESULT = null;
                 RESULT = new Literal.BoolLit(true); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primitiveLiteral",13, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // functionCall ::= IDENTIFIER OPEN_PAREN exprList CLOSE_PAREN 
            {
                Expr.FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-3).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-3).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-3).<String> value();
                int vlleft = CUP$parser$stack.elementAt(CUP$parser$top-1).left;
                int vlright = CUP$parser$stack.elementAt(CUP$parser$top-1).right;
                ArrayList<Expr> vl = CUP$parser$stack.elementAt(CUP$parser$top-1).<ArrayList<Expr>> value();
                 RESULT = new Expr.FunctionCall(id, vl);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCall",25, CUP$parser$stack.elementAt(CUP$parser$top-3), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // functionCall ::= IDENTIFIER OPEN_PAREN CLOSE_PAREN 
            {
                Expr.FunctionCall RESULT = null;
                int idleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int idright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                String id = CUP$parser$stack.elementAt(CUP$parser$top-2).<String> value();
                 RESULT = new Expr.FunctionCall(id, new ArrayList<>());
                CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCall",25, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // unop ::= MINUS 
            {
                UnaryOp.Operation RESULT = null;
                 RESULT = UnaryOp.Operation.NEG; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",37, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // unop ::= NOT 
            {
                UnaryOp.Operation RESULT = null;
                 RESULT = UnaryOp.Operation.NOT; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("unop",37, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // binop ::= expr PLUS expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.PLUS,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // binop ::= expr TIMES expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.TIMES,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // binop ::= expr MINUS expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.MINUS,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // binop ::= expr HIGHTIMES expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.HIGHTIMES,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // binop ::= expr DIVIDE expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.DIVIDE,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // binop ::= expr MODULO expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.MODULO,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // binop ::= expr LT expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.LT,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // binop ::= expr LEQ expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.LEQ,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // binop ::= expr GT expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.GT,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // binop ::= expr GEQ expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.GEQ,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // binop ::= expr EQB expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.EQB,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // binop ::= expr NEQB expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.NEQB,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // binop ::= expr AND expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.AND,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // binop ::= expr OR expr 
            {
                BinaryOp RESULT = null;
                int rleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int rright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Expr r = CUP$parser$stack.elementAt(CUP$parser$top-2).<Expr> value();
                int lleft = CUP$parser$stack.peek().left;
                int lright = CUP$parser$stack.peek().right;
                Expr l = CUP$parser$stack.peek().<Expr> value();
                 RESULT = new BinaryOp(BinaryOp.Operation.OR,r,l); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("binop",36, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // primType ::= BOOL 
            {
                Primitive RESULT = null;
                RESULT = new Primitive.BOOL(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primType",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // primType ::= INT 
            {
                Primitive RESULT = null;
                RESULT = new Primitive.INT(); 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("primType",11, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // type ::= primType 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.peek().left;
                int ptright = CUP$parser$stack.peek().right;
                Primitive pt = CUP$parser$stack.peek().<Primitive> value();
                RESULT = pt; 
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, CUP$parser$stack.peek(), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // type ::= primType OPEN_BRACKET CLOSE_BRACKET 
            {
                Type RESULT = null;
                int ptleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int ptright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Primitive pt = CUP$parser$stack.elementAt(CUP$parser$top-2).<Primitive> value();
                RESULT = new Type.Array(pt);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // type ::= type OPEN_BRACKET CLOSE_BRACKET 
            {
                Type RESULT = null;
                int tleft = CUP$parser$stack.elementAt(CUP$parser$top-2).left;
                int tright = CUP$parser$stack.elementAt(CUP$parser$top-2).right;
                Type t = CUP$parser$stack.elementAt(CUP$parser$top-2).<Type> value();
                RESULT = new Type.Array(t);
                CUP$parser$result = parser.getSymbolFactory().newSymbol("type",12, CUP$parser$stack.elementAt(CUP$parser$top-2), CUP$parser$stack.peek(), RESULT);
            }
            return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$parser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception {
            return CUP$parser$do_action_part00000000(
                           CUP$parser$act_num,
                           CUP$parser$parser,
                           CUP$parser$stack,
                           CUP$parser$top);
    }
}

}
